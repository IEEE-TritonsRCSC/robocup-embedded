
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e54  08004e54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001181d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002969  00000000  00000000  0003189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e98  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b4d  00000000  00000000  000350a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f02  00000000  00000000  00035bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012ab4  00000000  00000000  00059aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a8c  00000000  00000000  0006c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003be0  00000000  00000000  00146030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00149c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004e14 	.word	0x08004e14

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004e14 	.word	0x08004e14

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <pid_init>:
	int16_t  target,

	float 	kp,
	float 	ki,
	float 	kd)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b089      	sub	sp, #36	; 0x24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	61f8      	str	r0, [r7, #28]
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	ed87 0a05 	vstr	s0, [r7, #20]
 80004f8:	461a      	mov	r2, r3
 80004fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80004fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8000502:	edc7 1a01 	vstr	s3, [r7, #4]
 8000506:	4603      	mov	r3, r0
 8000508:	837b      	strh	r3, [r7, #26]
 800050a:	460b      	mov	r3, r1
 800050c:	833b      	strh	r3, [r7, #24]
 800050e:	4613      	mov	r3, r2
 8000510:	827b      	strh	r3, [r7, #18]

	pid->MaxOutput = maxout;
 8000512:	8b7b      	ldrh	r3, [r7, #26]
 8000514:	ee07 3a90 	vmov	s15, r3
 8000518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	pid->IntegralLimit = integral_limit;
 8000522:	8b3b      	ldrh	r3, [r7, #24]
 8000524:	ee07 3a90 	vmov	s15, r3
 8000528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	pid->DeadBand = deadband;
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	655a      	str	r2, [r3, #84]	; 0x54
	pid->target = target;
 8000538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	edc3 7a00 	vstr	s15, [r3]

	pid->kp = kp;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	609a      	str	r2, [r3, #8]
	pid->ki = ki;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	60da      	str	r2, [r3, #12]
	pid->kd = kd;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	611a      	str	r2, [r3, #16]

	pid->output = 0;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000564:	bf00      	nop
 8000566:	3724      	adds	r7, #36	; 0x24
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000576:	4a2b      	ldr	r2, [pc, #172]	; (8000624 <MX_CAN1_Init+0xb4>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <MX_CAN1_Init+0xb0>)
 800057c:	2203      	movs	r2, #3
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <MX_CAN1_Init+0xb0>)
 800058e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000596:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800059a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_CAN1_Init+0xb0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005c2:	f000 fff3 	bl	80015ac <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 fca0 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterBank = 0;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005de:	2201      	movs	r2, #1
 80005e0:	61da      	str	r2, [r3, #28]
  canfilter1.FilterIdHigh = 0x0000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  canfilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_CAN1_Init+0xb8>)
 8000602:	2201      	movs	r2, #1
 8000604:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &canfilter1);
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <MX_CAN1_Init+0xb8>)
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CAN1_Init+0xb0>)
 800060a:	f001 f8cb 	bl	80017a4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1); //start CAN
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000610:	f001 f9a8 	bl	8001964 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate CAN receive interrupt for encoder data
 8000614:	2102      	movs	r1, #2
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000618:	f001 fbd5 	bl	8001dc6 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40006400 	.word	0x40006400
 8000628:	20000050 	.word	0x20000050

0800062c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d13b      	bne.n	80006c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000696:	2309      	movs	r3, #9
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <HAL_CAN_MspInit+0xac>)
 80006a2:	f002 f9b1 	bl	8002a08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	2013      	movs	r0, #19
 80006ac:	f001 fe98 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006b0:	2013      	movs	r0, #19
 80006b2:	f001 feb1 	bl	8002418 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	2014      	movs	r0, #20
 80006bc:	f001 fe90 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c0:	2014      	movs	r0, #20
 80006c2:	f001 fea9 	bl	8002418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020c00 	.word	0x40020c00

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x3c>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	2045      	movs	r0, #69	; 0x45
 8000704:	f001 fe6c 	bl	80023e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000708:	2045      	movs	r0, #69	; 0x45
 800070a:	f001 fe85 	bl	8002418 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	623b      	str	r3, [r7, #32]
 800074c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a5f      	ldr	r2, [pc, #380]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b59      	ldr	r3, [pc, #356]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a58      	ldr	r2, [pc, #352]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a51      	ldr	r2, [pc, #324]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4f      	ldr	r3, [pc, #316]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b48      	ldr	r3, [pc, #288]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a43      	ldr	r2, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0320 	and.w	r3, r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3c      	ldr	r2, [pc, #240]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a35      	ldr	r2, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x1b8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	482f      	ldr	r0, [pc, #188]	; (80008d8 <MX_GPIO_Init+0x1bc>)
 800081a:	f002 faa1 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000824:	482d      	ldr	r0, [pc, #180]	; (80008dc <MX_GPIO_Init+0x1c0>)
 8000826:	f002 fa9b 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	213c      	movs	r1, #60	; 0x3c
 800082e:	482c      	ldr	r0, [pc, #176]	; (80008e0 <MX_GPIO_Init+0x1c4>)
 8000830:	f002 fa96 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 8000834:	233c      	movs	r3, #60	; 0x3c
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4825      	ldr	r0, [pc, #148]	; (80008e0 <MX_GPIO_Init+0x1c4>)
 800084c:	f002 f8dc 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <MX_GPIO_Init+0x1c8>)
 8000866:	f002 f8cf 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800086a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4815      	ldr	r0, [pc, #84]	; (80008d8 <MX_GPIO_Init+0x1bc>)
 8000884:	f002 f8c0 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4619      	mov	r1, r3
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_GPIO_Init+0x1c0>)
 80008a2:	f002 f8b1 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_GPIO_Init+0x1cc>)
 80008ac:	f002 fa58 	bl	8002d60 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = Kicker_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b4:	2311      	movs	r3, #17
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Kicker_Port, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MX_GPIO_Init+0x1cc>)
 80008c8:	f002 f89e 	bl	8002a08 <HAL_GPIO_Init>
}
 80008cc:	bf00      	nop
 80008ce:	3738      	adds	r7, #56	; 0x38
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021400 	.word	0x40021400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40021c00 	.word	0x40021c00
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_UART_RxCpltCallback>:
  * @retval int
  */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if (uart_rx_buffer[0] == RUN_HEADER){
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <HAL_UART_RxCpltCallback+0xc8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b11      	cmp	r3, #17
 80008fa:	d151      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0xb4>
		for (int i = 0; i<8; i++){
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	e00b      	b.n	800091a <HAL_UART_RxCpltCallback+0x2e>
			motorCurrents[i] = uart_rx_buffer[i+1];
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	b219      	sxth	r1, r3
 800090c:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <HAL_UART_RxCpltCallback+0xcc>)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i<8; i++){
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2b07      	cmp	r3, #7
 800091e:	ddf0      	ble.n	8000902 <HAL_UART_RxCpltCallback+0x16>
		}
		uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 8000920:	2301      	movs	r3, #1
 8000922:	723b      	strb	r3, [r7, #8]
 8000924:	2301      	movs	r3, #1
 8000926:	727b      	strb	r3, [r7, #9]
 8000928:	2301      	movs	r3, #1
 800092a:	72bb      	strb	r3, [r7, #10]
 800092c:	2301      	movs	r3, #1
 800092e:	72fb      	strb	r3, [r7, #11]
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b21b      	sxth	r3, r3
 8000936:	121b      	asrs	r3, r3, #8
 8000938:	b21b      	sxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	733b      	strb	r3, [r7, #12]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b21b      	sxth	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	737b      	strb	r3, [r7, #13]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 800094a:	885b      	ldrh	r3, [r3, #2]
 800094c:	b21b      	sxth	r3, r3
 800094e:	121b      	asrs	r3, r3, #8
 8000950:	b21b      	sxth	r3, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	73bb      	strb	r3, [r7, #14]
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000958:	885b      	ldrh	r3, [r3, #2]
 800095a:	b21b      	sxth	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000962:	889b      	ldrh	r3, [r3, #4]
 8000964:	b21b      	sxth	r3, r3
 8000966:	121b      	asrs	r3, r3, #8
 8000968:	b21b      	sxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	743b      	strb	r3, [r7, #16]
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000970:	889b      	ldrh	r3, [r3, #4]
 8000972:	b21b      	sxth	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	747b      	strb	r3, [r7, #17]
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 800097a:	88db      	ldrh	r3, [r3, #6]
 800097c:	b21b      	sxth	r3, r3
 800097e:	121b      	asrs	r3, r3, #8
 8000980:	b21b      	sxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	74bb      	strb	r3, [r7, #18]
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_UART_RxCpltCallback+0xd0>)
 8000988:	88db      	ldrh	r3, [r3, #6]
 800098a:	b21b      	sxth	r3, r3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 8000990:	f107 0108 	add.w	r1, r7, #8
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	220c      	movs	r2, #12
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_UART_RxCpltCallback+0xd4>)
 800099c:	f003 fd89 	bl	80044b2 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 80009a0:	220a      	movs	r2, #10
 80009a2:	4904      	ldr	r1, [pc, #16]	; (80009b4 <HAL_UART_RxCpltCallback+0xc8>)
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_UART_RxCpltCallback+0xd4>)
 80009a6:	f003 feb8 	bl	800471a <HAL_UART_Receive_IT>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000284 	.word	0x20000284
 80009b8:	200000e4 	.word	0x200000e4
 80009bc:	200000cc 	.word	0x200000cc
 80009c0:	20000380 	.word	0x20000380

080009c4 <main>:


int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fd89 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f977 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff fea3 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 80009d6:	f7ff fe81 	bl	80006dc <MX_DMA_Init>
  MX_CAN1_Init();
 80009da:	f7ff fdc9 	bl	8000570 <MX_CAN1_Init>
  MX_TIM1_Init();
 80009de:	f000 fbb1 	bl	8001144 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80009e2:	f000 fcd9 	bl	8001398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 80009e6:	2104      	movs	r1, #4
 80009e8:	4870      	ldr	r0, [pc, #448]	; (8000bac <main+0x1e8>)
 80009ea:	f002 f9d2 	bl	8002d92 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 80009ee:	2108      	movs	r1, #8
 80009f0:	486e      	ldr	r0, [pc, #440]	; (8000bac <main+0x1e8>)
 80009f2:	f002 f9ce 	bl	8002d92 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 80009f6:	2110      	movs	r1, #16
 80009f8:	486c      	ldr	r0, [pc, #432]	; (8000bac <main+0x1e8>)
 80009fa:	f002 f9ca 	bl	8002d92 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 80009fe:	2120      	movs	r1, #32
 8000a00:	486a      	ldr	r0, [pc, #424]	; (8000bac <main+0x1e8>)
 8000a02:	f002 f9c6 	bl	8002d92 <HAL_GPIO_TogglePin>

  //CAN setup
  canTxHeader.DLC = 8;
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <main+0x1ec>)
 8000a08:	2208      	movs	r2, #8
 8000a0a:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 8000a0c:	4b68      	ldr	r3, [pc, #416]	; (8000bb0 <main+0x1ec>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <main+0x1ec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 8000a18:	4b65      	ldr	r3, [pc, #404]	; (8000bb0 <main+0x1ec>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 8000a20:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <main+0x1ec>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	751a      	strb	r2, [r3, #20]

  //PID Setup
  for (int i = 0; i < 4; i++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2a:	e007      	b.n	8000a3c <main+0x78>
        speed_data[i] = 100;
 8000a2c:	4a61      	ldr	r2, [pc, #388]	; (8000bb4 <main+0x1f0>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++) {
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	3301      	adds	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	ddf4      	ble.n	8000a2c <main+0x68>
  }
  pid_init(&motor_pid[0],10000,5000,20,0,0.09,0.5,0);
 8000a42:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8000bb8 <main+0x1f4>
 8000a46:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8000a4a:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8000bbc <main+0x1f8>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a58:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a5c:	4858      	ldr	r0, [pc, #352]	; (8000bc0 <main+0x1fc>)
 8000a5e:	f7ff fd43 	bl	80004e8 <pid_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //runMotors(0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
  //uint8_t feedback[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);   //Uncomment to start the UART interrupt tests
  for (int i = 0; i < 4; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	e010      	b.n	8000a8a <main+0xc6>
	  /*
	  if (i%2 == 0){
		  targetSpeeds[i] = -100;
	  }
	  else{*/
	  targetSpeeds[i] = 100;
 8000a68:	4a56      	ldr	r2, [pc, #344]	; (8000bc4 <main+0x200>)
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	2164      	movs	r1, #100	; 0x64
 8000a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  motor_pid[i].output = 1000;
 8000a72:	4a53      	ldr	r2, [pc, #332]	; (8000bc0 <main+0x1fc>)
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	2164      	movs	r1, #100	; 0x64
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3344      	adds	r3, #68	; 0x44
 8000a80:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <main+0x204>)
 8000a82:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	3301      	adds	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	ddeb      	ble.n	8000a68 <main+0xa4>

  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));

  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
  //HAL_GPIO_TogglePin(Kicker_Port, Kicker_Pin);
  kick(10000);
 8000a90:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a94:	f000 fa12 	bl	8000ebc <kick>


	  //uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
	  //HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
	   //UART Receive code, uncomment this block and comment out other parts to test UART
	  HAL_UART_Receive(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE, 1000);
 8000a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	494b      	ldr	r1, [pc, #300]	; (8000bcc <main+0x208>)
 8000aa0:	484b      	ldr	r0, [pc, #300]	; (8000bd0 <main+0x20c>)
 8000aa2:	f003 fd98 	bl	80045d6 <HAL_UART_Receive>
	  if (uart_rx_buffer[0] == RUN_HEADER){
 8000aa6:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <main+0x208>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b11      	cmp	r3, #17
 8000aac:	d1f4      	bne.n	8000a98 <main+0xd4>
		  int motorSpeed1 = (uart_rx_buffer[1] << 8) | uart_rx_buffer[2];
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <main+0x208>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	4a45      	ldr	r2, [pc, #276]	; (8000bcc <main+0x208>)
 8000ab6:	7892      	ldrb	r2, [r2, #2]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	61fb      	str	r3, [r7, #28]
		  int motorSpeed2 = (uart_rx_buffer[3] << 8) | uart_rx_buffer[4];
 8000abc:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <main+0x208>)
 8000abe:	78db      	ldrb	r3, [r3, #3]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <main+0x208>)
 8000ac4:	7912      	ldrb	r2, [r2, #4]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
		  int motorSpeed3 = (uart_rx_buffer[5] << 8) | uart_rx_buffer[6];
 8000aca:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <main+0x208>)
 8000acc:	795b      	ldrb	r3, [r3, #5]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <main+0x208>)
 8000ad2:	7992      	ldrb	r2, [r2, #6]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	617b      	str	r3, [r7, #20]
		  int motorSpeed4 = (uart_rx_buffer[7] << 8) | uart_rx_buffer[8];
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <main+0x208>)
 8000ada:	79db      	ldrb	r3, [r3, #7]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	4a3b      	ldr	r2, [pc, #236]	; (8000bcc <main+0x208>)
 8000ae0:	7a12      	ldrb	r2, [r2, #8]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
		  setMotorSpeeds(motorSpeed1, motorSpeed2, motorSpeed3, motorSpeed4);
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	b218      	sxth	r0, r3
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	b219      	sxth	r1, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	f000 f94d 	bl	8000d94 <setMotorSpeeds>
		  if (uart_rx_buffer[9] == DRIBBLE_ON){
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <main+0x208>)
 8000afc:	7a5b      	ldrb	r3, [r3, #9]
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d102      	bne.n	8000b08 <main+0x144>
			  dribble();
 8000b02:	f000 f9c1 	bl	8000e88 <dribble>
 8000b06:	e010      	b.n	8000b2a <main+0x166>
		  }
		  else if (uart_rx_buffer[9] == DRIBBLE_OFF){
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x208>)
 8000b0a:	7a5b      	ldrb	r3, [r3, #9]
 8000b0c:	2b13      	cmp	r3, #19
 8000b0e:	d102      	bne.n	8000b16 <main+0x152>
			  noDribble();
 8000b10:	f000 f9ca 	bl	8000ea8 <noDribble>
 8000b14:	e009      	b.n	8000b2a <main+0x166>
		  }
		  else if (uart_rx_buffer[9] == KICK){
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <main+0x208>)
 8000b18:	7a5b      	ldrb	r3, [r3, #9]
 8000b1a:	2b14      	cmp	r3, #20
 8000b1c:	d105      	bne.n	8000b2a <main+0x166>
		  	  noDribble();
 8000b1e:	f000 f9c3 	bl	8000ea8 <noDribble>
			  kick(300);
 8000b22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b26:	f000 f9c9 	bl	8000ebc <kick>
	  	  }

		  uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	713b      	strb	r3, [r7, #4]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	717b      	strb	r3, [r7, #5]
 8000b32:	2301      	movs	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	2301      	movs	r3, #1
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <main+0x1f0>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	121b      	asrs	r3, r3, #8
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	723b      	strb	r3, [r7, #8]
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <main+0x1f0>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	727b      	strb	r3, [r7, #9]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <main+0x1f0>)
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	121b      	asrs	r3, r3, #8
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	72bb      	strb	r3, [r7, #10]
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <main+0x1f0>)
 8000b62:	885b      	ldrh	r3, [r3, #2]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	72fb      	strb	r3, [r7, #11]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <main+0x1f0>)
 8000b6c:	889b      	ldrh	r3, [r3, #4]
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	121b      	asrs	r3, r3, #8
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	733b      	strb	r3, [r7, #12]
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <main+0x1f0>)
 8000b7a:	889b      	ldrh	r3, [r3, #4]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	737b      	strb	r3, [r7, #13]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <main+0x1f0>)
 8000b84:	88db      	ldrh	r3, [r3, #6]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	121b      	asrs	r3, r3, #8
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	73bb      	strb	r3, [r7, #14]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <main+0x1f0>)
 8000b92:	88db      	ldrh	r3, [r3, #6]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
		  //runMotors(uart_rx_buffer[1], uart_rx_buffer[2], uart_rx_buffer[3], uart_rx_buffer[4], uart_rx_buffer[5], uart_rx_buffer[6], uart_rx_buffer[7], uart_rx_buffer[8]);
		  HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 8000b9a:	1d39      	adds	r1, r7, #4
 8000b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <main+0x20c>)
 8000ba4:	f003 fc85 	bl	80044b2 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE, 1000);
 8000ba8:	e776      	b.n	8000a98 <main+0xd4>
 8000baa:	bf00      	nop
 8000bac:	40021c00 	.word	0x40021c00
 8000bb0:	20000078 	.word	0x20000078
 8000bb4:	200000cc 	.word	0x200000cc
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	3db851ec 	.word	0x3db851ec
 8000bc0:	200000f4 	.word	0x200000f4
 8000bc4:	200000ec 	.word	0x200000ec
 8000bc8:	447a0000 	.word	0x447a0000
 8000bcc:	20000284 	.word	0x20000284
 8000bd0:	20000380 	.word	0x20000380

08000bd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
    if(hcan == &hcan1) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15a      	bne.n	8000c9a <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, CAN_RxData);
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000be6:	4a31      	ldr	r2, [pc, #196]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000bec:	f000 ffd9 	bl	8001ba2 <HAL_CAN_GetRxMessage>

        if(canRxHeader.StdId == 0x201) motor_idx = 0;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f240 2201 	movw	r2, #513	; 0x201
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d102      	bne.n	8000c02 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x202) motor_idx = 1;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f240 2202 	movw	r2, #514	; 0x202
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d102      	bne.n	8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 2;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f240 2203 	movw	r2, #515	; 0x203
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x204) motor_idx = 3;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000c2e:	d102      	bne.n	8000c36 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]

        angle_data[motor_idx] = (uint16_t)(CAN_RxData[0]<<8 | CAN_RxData[1]);
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b219      	sxth	r1, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	b289      	uxth	r1, r1
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000c54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        speed_data[motor_idx] = (int16_t)(CAN_RxData[2]<<8 | CAN_RxData[3]); // originally rpm
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c62:	78db      	ldrb	r3, [r3, #3]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c68:	7809      	ldrb	r1, [r1, #0]
 8000c6a:	b2c9      	uxtb	r1, r1
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000c72:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        torque_current_data[motor_idx] = (CAN_RxData[4]<<8 | CAN_RxData[5]);
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c78:	791b      	ldrb	r3, [r3, #4]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000c7e:	7952      	ldrb	r2, [r2, #5]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	ee07 2a90 	vmov	s15, r2
 8000c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000028 	.word	0x20000028
 8000ca8:	200000b8 	.word	0x200000b8
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	200000c0 	.word	0x200000c0
 8000cb4:	200000c4 	.word	0x200000c4
 8000cb8:	200000cc 	.word	0x200000cc
 8000cbc:	200000d4 	.word	0x200000d4

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 f874 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000d30:	2306      	movs	r3, #6
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d34:	23a8      	movs	r3, #168	; 0xa8
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f002 f83f 	bl	8002dc8 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d50:	f000 f8de 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 faa0 	bl	80032b8 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d7e:	f000 f8c7 	bl	8000f10 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	; 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <setMotorSpeeds>:
	CAN_TxData[7] = (motorSpeed);

	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
}

void setMotorSpeeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4){
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af04      	add	r7, sp, #16
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4623      	mov	r3, r4
 8000da4:	80fb      	strh	r3, [r7, #6]
 8000da6:	4603      	mov	r3, r0
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	807b      	strh	r3, [r7, #2]
 8000dae:	4613      	mov	r3, r2
 8000db0:	803b      	strh	r3, [r7, #0]
	uint8_t h1 = ms1 >> 8;
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	121b      	asrs	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	73fb      	strb	r3, [r7, #15]
	uint8_t l1 = ms1;
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	73bb      	strb	r3, [r7, #14]
	uint8_t h2 = ms2 >> 8;
 8000dc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dc4:	121b      	asrs	r3, r3, #8
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	737b      	strb	r3, [r7, #13]
	uint8_t l2 = ms2;
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	733b      	strb	r3, [r7, #12]
	uint8_t h3 = ms3 >> 8;
 8000dce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dd2:	121b      	asrs	r3, r3, #8
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	72fb      	strb	r3, [r7, #11]
	uint8_t l3 = ms3;
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	72bb      	strb	r3, [r7, #10]
	uint8_t h4 = ms4 >> 8;
 8000ddc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000de0:	121b      	asrs	r3, r3, #8
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	727b      	strb	r3, [r7, #9]
	uint8_t l4 = ms4;
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	723b      	strb	r3, [r7, #8]
	runMotors(h1,l1,h2,l2,h3,l3,h4,l4);
 8000dea:	7b3c      	ldrb	r4, [r7, #12]
 8000dec:	7b7a      	ldrb	r2, [r7, #13]
 8000dee:	7bb9      	ldrb	r1, [r7, #14]
 8000df0:	7bf8      	ldrb	r0, [r7, #15]
 8000df2:	7a3b      	ldrb	r3, [r7, #8]
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	7a7b      	ldrb	r3, [r7, #9]
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	7abb      	ldrb	r3, [r7, #10]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4623      	mov	r3, r4
 8000e04:	f000 f804 	bl	8000e10 <runMotors>
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <runMotors>:

void runMotors(unsigned char motorOneHigh, unsigned char motorOneLow, unsigned char motorTwoHigh, unsigned char motorTwoLow, unsigned char motorThreeHigh, unsigned char motorThreeLow, unsigned char motorFourHigh, unsigned char motorFourLow){          //speed can be 16 bits, split into high and low bytes
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4603      	mov	r3, r0
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	460b      	mov	r3, r1
 8000e28:	717b      	strb	r3, [r7, #5]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	713b      	strb	r3, [r7, #4]
	CAN_TxData[0] = motorOneHigh;  //high byte for speed, shifted 8 because only buffer is only 8 bits
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <runMotors+0x68>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	7013      	strb	r3, [r2, #0]
	CAN_TxData[1] = motorOneLow;       //low bytes for speed
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <runMotors+0x68>)
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	7053      	strb	r3, [r2, #1]
	CAN_TxData[2] = motorTwoHigh;
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <runMotors+0x68>)
 8000e3c:	797b      	ldrb	r3, [r7, #5]
 8000e3e:	7093      	strb	r3, [r2, #2]
	CAN_TxData[3] = motorTwoLow;
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <runMotors+0x68>)
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	70d3      	strb	r3, [r2, #3]
	CAN_TxData[4] = motorThreeHigh;
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <runMotors+0x68>)
 8000e48:	7e3b      	ldrb	r3, [r7, #24]
 8000e4a:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = motorThreeLow;
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <runMotors+0x68>)
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = motorFourHigh;
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <runMotors+0x68>)
 8000e54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e58:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = motorFourLow;
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <runMotors+0x68>)
 8000e5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e60:	71d3      	strb	r3, [r2, #7]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <runMotors+0x6c>)
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <runMotors+0x68>)
 8000e66:	4906      	ldr	r1, [pc, #24]	; (8000e80 <runMotors+0x70>)
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <runMotors+0x74>)
 8000e6a:	f000 fdbf 	bl	80019ec <HAL_CAN_AddTxMessage>
	while(i < 100000){
		HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
	    HAL_Delay(0.5);
	    i++;
	}*/
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000b0 	.word	0x200000b0
 8000e7c:	200000ac 	.word	0x200000ac
 8000e80:	20000078 	.word	0x20000078
 8000e84:	20000028 	.word	0x20000028

08000e88 <dribble>:

void dribble() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <dribble+0x18>)
 8000e90:	f002 fcee 	bl	8003870 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 75;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <dribble+0x1c>)
 8000e96:	224b      	movs	r2, #75	; 0x4b
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002d8 	.word	0x200002d8
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <noDribble>:

void noDribble(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000eac:	2100      	movs	r1, #0
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <noDribble+0x10>)
 8000eb0:	f002 fda6 	bl	8003a00 <HAL_TIM_PWM_Stop>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200002d8 	.word	0x200002d8

08000ebc <kick>:

void kick(int kickDuration){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <kick+0x2c>)
 8000eca:	f001 ff49 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_Delay(kickDuration);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fb47 	bl	8001564 <HAL_Delay>
	HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <kick+0x2c>)
 8000edc:	f001 ff40 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020800 	.word	0x40020800

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)


{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fb11 	bl	8001524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_InitTick+0xe4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_InitTick+0xe4>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_InitTick+0xe4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f98:	f107 0210 	add.w	r2, r7, #16
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fb68 	bl	8003678 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d103      	bne.n	8000fba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb2:	f002 fb39 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8000fb6:	6378      	str	r0, [r7, #52]	; 0x34
 8000fb8:	e004      	b.n	8000fc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fba:	f002 fb35 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <HAL_InitTick+0xe8>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_InitTick+0xec>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <HAL_InitTick+0xf0>)
 8000fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_InitTick+0xec>)
 8000fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_InitTick+0xec>)
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_InitTick+0xec>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_InitTick+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <HAL_InitTick+0xec>)
 8000ffa:	f002 fb6f 	bl	80036dc <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <HAL_InitTick+0xec>)
 800100e:	f002 fbbf 	bl	8003790 <HAL_TIM_Base_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001020:	2036      	movs	r0, #54	; 0x36
 8001022:	f001 f9f9 	bl	8002418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d808      	bhi.n	800103e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f001 f9d5 	bl	80023e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0xf4>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e002      	b.n	8001044 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001048:	4618      	mov	r0, r3
 800104a:	3738      	adds	r7, #56	; 0x38
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	431bde83 	.word	0x431bde83
 8001058:	20000290 	.word	0x20000290
 800105c:	40001000 	.word	0x40001000
 8001060:	20000004 	.word	0x20000004

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <CAN1_TX_IRQHandler+0x10>)
 80010c2:	f000 fea6 	bl	8001e12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000028 	.word	0x20000028

080010d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <CAN1_RX0_IRQHandler+0x10>)
 80010d6:	f000 fe9c 	bl	8001e12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000028 	.word	0x20000028

080010e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart2);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <USART2_IRQHandler+0x10>)
 80010ea:	f7ff fbff 	bl	80008ec <HAL_UART_RxCpltCallback>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000380 	.word	0x20000380

080010f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM6_DAC_IRQHandler+0x10>)
 80010fe:	f002 fd3e 	bl	8003b7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000290 	.word	0x20000290

0800110c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA2_Stream6_IRQHandler+0x10>)
 8001112:	f001 fa3d 	bl	8002590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000320 	.word	0x20000320

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001160:	4b36      	ldr	r3, [pc, #216]	; (800123c <MX_TIM1_Init+0xf8>)
 8001162:	4a37      	ldr	r2, [pc, #220]	; (8001240 <MX_TIM1_Init+0xfc>)
 8001164:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <MX_TIM1_Init+0xf8>)
 8001168:	2209      	movs	r2, #9
 800116a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <MX_TIM1_Init+0xf8>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <MX_TIM1_Init+0xf8>)
 8001174:	f242 720f 	movw	r2, #9999	; 0x270f
 8001178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <MX_TIM1_Init+0xf8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <MX_TIM1_Init+0xf8>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_TIM1_Init+0xf8>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800118c:	482b      	ldr	r0, [pc, #172]	; (800123c <MX_TIM1_Init+0xf8>)
 800118e:	f002 fca7 	bl	8003ae0 <HAL_TIM_IC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001198:	f7ff feba 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4824      	ldr	r0, [pc, #144]	; (800123c <MX_TIM1_Init+0xf8>)
 80011ac:	f003 f8a4 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011b6:	f7ff feab 	bl	8000f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011be:	2302      	movs	r3, #2
 80011c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	481a      	ldr	r0, [pc, #104]	; (800123c <MX_TIM1_Init+0xf8>)
 80011d2:	f002 fddc 	bl	8003d8e <HAL_TIM_IC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011dc:	f7ff fe98 	bl	8000f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011e0:	230a      	movs	r3, #10
 80011e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	2204      	movs	r2, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_TIM1_Init+0xf8>)
 80011f0:	f002 fdcd 	bl	8003d8e <HAL_TIM_IC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80011fa:	f7ff fe89 	bl	8000f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	2208      	movs	r2, #8
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_TIM1_Init+0xf8>)
 800120a:	f002 fdc0 	bl	8003d8e <HAL_TIM_IC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001214:	f7ff fe7c 	bl	8000f10 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001218:	2302      	movs	r3, #2
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	220c      	movs	r2, #12
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM1_Init+0xf8>)
 8001224:	f002 fdb3 	bl	8003d8e <HAL_TIM_IC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800122e:	f7ff fe6f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002d8 	.word	0x200002d8
 8001240:	40010000 	.word	0x40010000

08001244 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_TIM_IC_MspInit+0x13c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 8088 	bne.w	8001378 <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	4a44      	ldr	r2, [pc, #272]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6453      	str	r3, [r2, #68]	; 0x44
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_TIM_IC_MspInit+0x140>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	482b      	ldr	r0, [pc, #172]	; (8001388 <HAL_TIM_IC_MspInit+0x144>)
 80012da:	f001 fb95 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4824      	ldr	r0, [pc, #144]	; (800138c <HAL_TIM_IC_MspInit+0x148>)
 80012fc:	f001 fb84 	bl	8002a08 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_TIM_IC_MspInit+0x150>)
 8001304:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001346:	f001 f875 	bl	8002434 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 8001350:	f7ff fdde 	bl	8000f10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_TIM_IC_MspInit+0x14c>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40010000 	.word	0x40010000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40021000 	.word	0x40021000
 8001390:	20000320 	.word	0x20000320
 8001394:	400264a0 	.word	0x400264a0

08001398 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART2_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f003 f822 	bl	8004418 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f7ff fd99 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000380 	.word	0x20000380
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_UART_MspInit+0x94>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d133      	bne.n	8001476 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_UART_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <HAL_UART_MspInit+0x9c>)
 8001462:	f001 fad1 	bl	8002a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
      HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2026      	movs	r0, #38	; 0x26
 800146c:	f000 ffb8 	bl	80023e0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001470:	2026      	movs	r0, #38	; 0x26
 8001472:	f000 ffd1 	bl	8002418 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004400 	.word	0x40004400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020c00 	.word	0x40020c00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b6:	f7ff fe33 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f003 fc87 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fa81 	bl	80009c4 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d0:	08004e5c 	.word	0x08004e5c
  ldr r2, =_sbss
 80014d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d8:	200003c8 	.word	0x200003c8

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 ff5e 	bl	80023ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff fd2c 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fd02 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	200003c4 	.word	0x200003c4

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200003c4 	.word	0x200003c4

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0ed      	b.n	800179a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff f82e 	bl	800062c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff ffb4 	bl	800154c <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015e6:	e012      	b.n	800160e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e8:	f7ff ffb0 	bl	800154c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b0a      	cmp	r3, #10
 80015f4:	d90b      	bls.n	800160e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2205      	movs	r2, #5
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0c5      	b.n	800179a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0e5      	beq.n	80015e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0202 	bic.w	r2, r2, #2
 800162a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff ff8e 	bl	800154c <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001632:	e012      	b.n	800165a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001634:	f7ff ff8a 	bl	800154c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d90b      	bls.n	800165a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2205      	movs	r2, #5
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e09f      	b.n	800179a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e5      	bne.n	8001634 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7e1b      	ldrb	r3, [r3, #24]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7e5b      	ldrb	r3, [r3, #25]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e9b      	ldrb	r3, [r3, #26]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0220 	bic.w	r2, r2, #32
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7edb      	ldrb	r3, [r3, #27]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0210 	bic.w	r2, r2, #16
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0210 	orr.w	r2, r2, #16
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0208 	orr.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0208 	bic.w	r2, r2, #8
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7f5b      	ldrb	r3, [r3, #29]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0204 	orr.w	r2, r2, #4
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0204 	bic.w	r2, r2, #4
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	ea42 0103 	orr.w	r1, r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017bc:	7cfb      	ldrb	r3, [r7, #19]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_ConfigFilter+0x26>
 80017c2:	7cfb      	ldrb	r3, [r7, #19]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	f040 80be 	bne.w	8001946 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017ca:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_CAN_ConfigFilter+0x1bc>)
 80017cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	431a      	orrs	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2201      	movs	r2, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d123      	bne.n	8001874 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800184e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3248      	adds	r2, #72	; 0x48
 8001854:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001868:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800186a:	6979      	ldr	r1, [r7, #20]
 800186c:	3348      	adds	r3, #72	; 0x48
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d122      	bne.n	80018c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3248      	adds	r2, #72	; 0x48
 80018a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	3348      	adds	r3, #72	; 0x48
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018dc:	e007      	b.n	80018ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001908:	e007      	b.n	800191a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001938:	f023 0201 	bic.w	r2, r3, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e006      	b.n	8001954 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
  }
}
 8001954:	4618      	mov	r0, r3
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40006400 	.word	0x40006400

08001964 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d12e      	bne.n	80019d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fddc 	bl	800154c <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001996:	e012      	b.n	80019be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001998:	f7ff fdd8 	bl	800154c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d90b      	bls.n	80019be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2205      	movs	r2, #5
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e012      	b.n	80019e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e5      	bne.n	8001998 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e006      	b.n	80019e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d003      	beq.n	8001a18 <HAL_CAN_AddTxMessage+0x2c>
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	f040 80b8 	bne.w	8001b88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10a      	bne.n	8001a38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80a0 	beq.w	8001b78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	0e1b      	lsrs	r3, r3, #24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d907      	bls.n	8001a58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e09e      	b.n	8001b96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	440b      	add	r3, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e00f      	b.n	8001aa6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	440b      	add	r3, r1
 8001aa4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3318      	adds	r3, #24
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	7d1b      	ldrb	r3, [r3, #20]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d111      	bne.n	8001ae6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3318      	adds	r3, #24
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	6811      	ldr	r1, [r2, #0]
 8001ad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3307      	adds	r3, #7
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	061a      	lsls	r2, r3, #24
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3306      	adds	r3, #6
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3305      	adds	r3, #5
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4313      	orrs	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	3204      	adds	r2, #4
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	4610      	mov	r0, r2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6811      	ldr	r1, [r2, #0]
 8001b0e:	ea43 0200 	orr.w	r2, r3, r0
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	440b      	add	r3, r1
 8001b18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3303      	adds	r3, #3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	061a      	lsls	r2, r3, #24
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3301      	adds	r3, #1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	6811      	ldr	r1, [r2, #0]
 8001b44:	ea43 0200 	orr.w	r2, r3, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	440b      	add	r3, r1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e00e      	b.n	8001b96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e006      	b.n	8001b96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_GetRxMessage+0x24>
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 80f3 	bne.w	8001dac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10e      	bne.n	8001bea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0e7      	b.n	8001dba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0d8      	b.n	8001dba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	331b      	adds	r3, #27
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0204 	and.w	r2, r3, #4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	331b      	adds	r3, #27
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0d5b      	lsrs	r3, r3, #21
 8001c36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	331b      	adds	r3, #27
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	331b      	adds	r3, #27
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0202 	and.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	331b      	adds	r3, #27
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 020f 	and.w	r2, r3, #15
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	331b      	adds	r3, #27
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	331b      	adds	r3, #27
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0a1a      	lsrs	r2, r3, #8
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0c1a      	lsrs	r2, r3, #16
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e1a      	lsrs	r2, r3, #24
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3303      	adds	r3, #3
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0a1a      	lsrs	r2, r3, #8
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	3305      	adds	r3, #5
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1a      	lsrs	r2, r3, #16
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3306      	adds	r3, #6
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e1a      	lsrs	r2, r3, #24
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e006      	b.n	8001dba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d002      	beq.n	8001de4 <HAL_CAN_ActivateNotification+0x1e>
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d109      	bne.n	8001df8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6959      	ldr	r1, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e006      	b.n	8001e06 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08a      	sub	sp, #40	; 0x28
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d07c      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d023      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f983 	bl	8002180 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e7a:	e016      	b.n	8001eaa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e00c      	b.n	8001eaa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e002      	b.n	8001eaa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f989 	bl	80021bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d024      	beq.n	8001efe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f963 	bl	8002194 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ece:	e016      	b.n	8001efe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e00c      	b.n	8001efe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	e002      	b.n	8001efe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f969 	bl	80021d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d024      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f943 	bl	80021a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f22:	e016      	b.n	8001f52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e00c      	b.n	8001f52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	e002      	b.n	8001f52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f949 	bl	80021e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2210      	movs	r2, #16
 8001f74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f930 	bl	80021f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7fe fe0f 	bl	8000bd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f912 	bl	8002220 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8f9 	bl	800220c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00b      	beq.n	800203c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2210      	movs	r2, #16
 8002034:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8fc 	bl	8002234 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2208      	movs	r2, #8
 8002056:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8f5 	bl	8002248 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d07b      	beq.n	8002160 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d072      	beq.n	8002158 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d043      	beq.n	8002158 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03e      	beq.n	8002158 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e0:	2b60      	cmp	r3, #96	; 0x60
 80020e2:	d02b      	beq.n	800213c <HAL_CAN_IRQHandler+0x32a>
 80020e4:	2b60      	cmp	r3, #96	; 0x60
 80020e6:	d82e      	bhi.n	8002146 <HAL_CAN_IRQHandler+0x334>
 80020e8:	2b50      	cmp	r3, #80	; 0x50
 80020ea:	d022      	beq.n	8002132 <HAL_CAN_IRQHandler+0x320>
 80020ec:	2b50      	cmp	r3, #80	; 0x50
 80020ee:	d82a      	bhi.n	8002146 <HAL_CAN_IRQHandler+0x334>
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d019      	beq.n	8002128 <HAL_CAN_IRQHandler+0x316>
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d826      	bhi.n	8002146 <HAL_CAN_IRQHandler+0x334>
 80020f8:	2b30      	cmp	r3, #48	; 0x30
 80020fa:	d010      	beq.n	800211e <HAL_CAN_IRQHandler+0x30c>
 80020fc:	2b30      	cmp	r3, #48	; 0x30
 80020fe:	d822      	bhi.n	8002146 <HAL_CAN_IRQHandler+0x334>
 8002100:	2b10      	cmp	r3, #16
 8002102:	d002      	beq.n	800210a <HAL_CAN_IRQHandler+0x2f8>
 8002104:	2b20      	cmp	r3, #32
 8002106:	d005      	beq.n	8002114 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002108:	e01d      	b.n	8002146 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002112:	e019      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800211c:	e014      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002126:	e00f      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002130:	e00a      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800213a:	e005      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002144:	e000      	b.n	8002148 <HAL_CAN_IRQHandler+0x336>
            break;
 8002146:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002156:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2204      	movs	r2, #4
 800215e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f872 	bl	800225c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff4c 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f2:	f7ff ff61 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 80023f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff ffb1 	bl	8002364 <NVIC_EncodePriority>
 8002402:	4602      	mov	r2, r0
 8002404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff80 	bl	8002310 <__NVIC_SetPriority>
}
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff54 	bl	80022d4 <__NVIC_EnableIRQ>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff f884 	bl	800154c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e099      	b.n	8002584 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002470:	e00f      	b.n	8002492 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002472:	f7ff f86b 	bl	800154c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b05      	cmp	r3, #5
 800247e:	d908      	bls.n	8002492 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e078      	b.n	8002584 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e8      	bne.n	8002472 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_DMA_Init+0x158>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4313      	orrs	r3, r2
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f023 0307 	bic.w	r3, r3, #7
 8002512:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b04      	cmp	r3, #4
 8002524:	d117      	bne.n	8002556 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f9e9 	bl	8002910 <DMA_CheckFifoParam>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002552:	2301      	movs	r3, #1
 8002554:	e016      	b.n	8002584 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f9a0 	bl	80028a4 <DMA_CalcBaseAndBitshift>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	223f      	movs	r2, #63	; 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	f010803f 	.word	0xf010803f

08002590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800259c:	4b8e      	ldr	r3, [pc, #568]	; (80027d8 <HAL_DMA_IRQHandler+0x248>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a8e      	ldr	r2, [pc, #568]	; (80027dc <HAL_DMA_IRQHandler+0x24c>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2208      	movs	r2, #8
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01a      	beq.n	80025fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	2208      	movs	r2, #8
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	2201      	movs	r2, #1
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2201      	movs	r2, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	2204      	movs	r2, #4
 8002638:	409a      	lsls	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2204      	movs	r2, #4
 8002656:	409a      	lsls	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2210      	movs	r2, #16
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d043      	beq.n	8002700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d03c      	beq.n	8002700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2210      	movs	r2, #16
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d018      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d024      	beq.n	8002700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
 80026be:	e01f      	b.n	8002700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	e016      	b.n	8002700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0208 	bic.w	r2, r2, #8
 80026ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2220      	movs	r2, #32
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 808f 	beq.w	8002830 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8087 	beq.w	8002830 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2220      	movs	r2, #32
 8002728:	409a      	lsls	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b05      	cmp	r3, #5
 8002738:	d136      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0216 	bic.w	r2, r2, #22
 8002748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <HAL_DMA_IRQHandler+0x1da>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	223f      	movs	r2, #63	; 0x3f
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07e      	beq.n	800289c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
        }
        return;
 80027a6:	e079      	b.n	800289c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01d      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
 80027d4:	e02c      	b.n	8002830 <HAL_DMA_IRQHandler+0x2a0>
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000
 80027dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e01e      	b.n	8002830 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10f      	bne.n	8002820 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0210 	bic.w	r2, r2, #16
 800280e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	2b00      	cmp	r3, #0
 8002836:	d032      	beq.n	800289e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d022      	beq.n	800288a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2205      	movs	r2, #5
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	d307      	bcc.n	8002878 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f2      	bne.n	800285c <HAL_DMA_IRQHandler+0x2cc>
 8002876:	e000      	b.n	800287a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002878:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
 800289a:	e000      	b.n	800289e <HAL_DMA_IRQHandler+0x30e>
        return;
 800289c:	bf00      	nop
    }
  }
}
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3b10      	subs	r3, #16
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <DMA_CalcBaseAndBitshift+0x64>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028be:	4a13      	ldr	r2, [pc, #76]	; (800290c <DMA_CalcBaseAndBitshift+0x68>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d909      	bls.n	80028e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	1d1a      	adds	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58
 80028e4:	e007      	b.n	80028f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	aaaaaaab 	.word	0xaaaaaaab
 800290c:	08004e44 	.word	0x08004e44

08002910 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11f      	bne.n	800296a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d856      	bhi.n	80029de <DMA_CheckFifoParam+0xce>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <DMA_CheckFifoParam+0x28>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002949 	.word	0x08002949
 800293c:	0800295b 	.word	0x0800295b
 8002940:	08002949 	.word	0x08002949
 8002944:	080029df 	.word	0x080029df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d046      	beq.n	80029e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e043      	b.n	80029e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002962:	d140      	bne.n	80029e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e03d      	b.n	80029e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002972:	d121      	bne.n	80029b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d837      	bhi.n	80029ea <DMA_CheckFifoParam+0xda>
 800297a:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <DMA_CheckFifoParam+0x70>)
 800297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002980:	08002991 	.word	0x08002991
 8002984:	08002997 	.word	0x08002997
 8002988:	08002991 	.word	0x08002991
 800298c:	080029a9 	.word	0x080029a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e030      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d025      	beq.n	80029ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a6:	e022      	b.n	80029ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b0:	d11f      	bne.n	80029f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029b6:	e01c      	b.n	80029f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d903      	bls.n	80029c6 <DMA_CheckFifoParam+0xb6>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d003      	beq.n	80029cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029c4:	e018      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ca:	e015      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e00b      	b.n	80029f6 <DMA_CheckFifoParam+0xe6>
      break;
 80029de:	bf00      	nop
 80029e0:	e00a      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;
 80029e2:	bf00      	nop
 80029e4:	e008      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e006      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;
 80029ea:	bf00      	nop
 80029ec:	e004      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
    }
  } 
  
  return status; 
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e177      	b.n	8002d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8166 	bne.w	8002d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d005      	beq.n	8002a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80c0 	beq.w	8002d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002baa:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_GPIO_Init+0x32c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d037      	beq.n	8002c46 <HAL_GPIO_Init+0x23e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d031      	beq.n	8002c42 <HAL_GPIO_Init+0x23a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x334>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x236>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_GPIO_Init+0x338>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x232>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x33c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x22e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a53      	ldr	r2, [pc, #332]	; (8002d48 <HAL_GPIO_Init+0x340>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x22a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x344>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x226>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a51      	ldr	r2, [pc, #324]	; (8002d50 <HAL_GPIO_Init+0x348>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x222>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <HAL_GPIO_Init+0x34c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x21e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x21a>
 8002c1e:	2309      	movs	r3, #9
 8002c20:	e012      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c22:	230a      	movs	r3, #10
 8002c24:	e010      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c26:	2308      	movs	r3, #8
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae84 	bls.w	8002a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40022400 	.word	0x40022400
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002da4:	887a      	ldrh	r2, [r7, #2]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4013      	ands	r3, r2
 8002daa:	041a      	lsls	r2, r3, #16
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	400b      	ands	r3, r1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e267      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d075      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d00c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b85      	ldr	r3, [pc, #532]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d112      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfe:	4b82      	ldr	r3, [pc, #520]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x108>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d157      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e242      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x74>
 8002e2e:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6f      	ldr	r2, [pc, #444]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6c      	ldr	r2, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a68      	ldr	r2, [pc, #416]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fb64 	bl	800154c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fb60 	bl	800154c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e207      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xc0>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fb50 	bl	800154c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fb4c 	bl	800154c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1f3      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	4b51      	ldr	r3, [pc, #324]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xe8>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d063      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x152>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1c7      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4937      	ldr	r1, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	e03a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f38:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x244>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fb05 	bl	800154c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f46:	f7fe fb01 	bl	800154c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1a8      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x244>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fae4 	bl	800154c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f88:	f7fe fae0 	bl	800154c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e187      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCC_OscConfig+0x248>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fac4 	bl	800154c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fac0 	bl	800154c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e167      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x200>
 8002fe6:	e01b      	b.n	8003020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_OscConfig+0x248>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fe faad 	bl	800154c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	e00e      	b.n	8003014 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fe faa9 	bl	800154c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e150      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ea      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8097 	beq.w	800315c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a7c      	ldr	r2, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b77      	ldr	r3, [pc, #476]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b74      	ldr	r3, [pc, #464]	; (800323c <HAL_RCC_OscConfig+0x474>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a73      	ldr	r2, [pc, #460]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe fa69 	bl	800154c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7fe fa65 	bl	800154c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e10c      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_OscConfig+0x474>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2ea>
 80030a4:	4b64      	ldr	r3, [pc, #400]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	e01c      	b.n	80030ec <HAL_RCC_OscConfig+0x324>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x30c>
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a5e      	ldr	r2, [pc, #376]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a5b      	ldr	r2, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0x324>
 80030d4:	4b58      	ldr	r3, [pc, #352]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a57      	ldr	r2, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	4b55      	ldr	r3, [pc, #340]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fa2a 	bl	800154c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe fa26 	bl	800154c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0cb      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ee      	beq.n	80030fc <HAL_RCC_OscConfig+0x334>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe fa14 	bl	800154c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fa10 	bl	800154c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0b5      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ee      	bne.n	8003128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a38      	ldr	r2, [pc, #224]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80a1 	beq.w	80032a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d05c      	beq.n	800322c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d141      	bne.n	80031fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe f9e4 	bl	800154c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe f9e0 	bl	800154c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e087      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe f9b9 	bl	800154c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe f9b5 	bl	800154c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e05c      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x416>
 80031fc:	e054      	b.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x478>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe f9a2 	bl	800154c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe f99e 	bl	800154c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e045      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x470>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x444>
 800322a:	e03d      	b.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e038      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000
 8003240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x4ec>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d028      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d121      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d11a      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800327a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327c:	4293      	cmp	r3, r2
 800327e:	d111      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	3b01      	subs	r3, #1
 800328e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0cc      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d90c      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a58      	ldr	r2, [pc, #352]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	494d      	ldr	r1, [pc, #308]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d044      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d119      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	2b03      	cmp	r3, #3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e067      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe f8d0 	bl	800154c <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe f8cc 	bl	800154c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e04f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d20c      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4916      	ldr	r1, [pc, #88]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490e      	ldr	r1, [pc, #56]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	490a      	ldr	r1, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fd84 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00
 8003474:	40023800 	.word	0x40023800
 8003478:	08004e2c 	.word	0x08004e2c
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b090      	sub	sp, #64	; 0x40
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
 8003490:	2300      	movs	r3, #0
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	2300      	movs	r3, #0
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x40>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	f200 80a1 	bhi.w	80035f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x3a>
 80034b6:	e09b      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034bc:	e09b      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_GetSysClockFreq+0x188>)
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034c2:	e098      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c4:	4b4f      	ldr	r3, [pc, #316]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ce:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	2200      	movs	r2, #0
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	627a      	str	r2, [r7, #36]	; 0x24
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034ec:	2100      	movs	r1, #0
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_GetSysClockFreq+0x188>)
 80034f0:	fb03 f201 	mul.w	r2, r3, r1
 80034f4:	2300      	movs	r3, #0
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	4a43      	ldr	r2, [pc, #268]	; (800360c <HAL_RCC_GetSysClockFreq+0x188>)
 80034fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003504:	460a      	mov	r2, r1
 8003506:	62ba      	str	r2, [r7, #40]	; 0x28
 8003508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350a:	4413      	add	r3, r2
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	2200      	movs	r2, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	61fa      	str	r2, [r7, #28]
 8003516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800351e:	f7fc fe65 	bl	80001ec <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4613      	mov	r3, r2
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352a:	e053      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	2200      	movs	r2, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	617a      	str	r2, [r7, #20]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800353e:	f04f 0b00 	mov.w	fp, #0
 8003542:	4652      	mov	r2, sl
 8003544:	465b      	mov	r3, fp
 8003546:	f04f 0000 	mov.w	r0, #0
 800354a:	f04f 0100 	mov.w	r1, #0
 800354e:	0159      	lsls	r1, r3, #5
 8003550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003554:	0150      	lsls	r0, r2, #5
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	ebb2 080a 	subs.w	r8, r2, sl
 800355e:	eb63 090b 	sbc.w	r9, r3, fp
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800356e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003572:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003576:	ebb2 0408 	subs.w	r4, r2, r8
 800357a:	eb63 0509 	sbc.w	r5, r3, r9
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	00eb      	lsls	r3, r5, #3
 8003588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358c:	00e2      	lsls	r2, r4, #3
 800358e:	4614      	mov	r4, r2
 8003590:	461d      	mov	r5, r3
 8003592:	eb14 030a 	adds.w	r3, r4, sl
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	eb45 030b 	adc.w	r3, r5, fp
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035aa:	4629      	mov	r1, r5
 80035ac:	028b      	lsls	r3, r1, #10
 80035ae:	4621      	mov	r1, r4
 80035b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b4:	4621      	mov	r1, r4
 80035b6:	028a      	lsls	r2, r1, #10
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	2200      	movs	r2, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	60fa      	str	r2, [r7, #12]
 80035c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c8:	f7fc fe10 	bl	80001ec <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4613      	mov	r3, r2
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	3301      	adds	r3, #1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetSysClockFreq+0x184>)
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3740      	adds	r7, #64	; 0x40
 80035fc:	46bd      	mov	sp, r7
 80035fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	00f42400 	.word	0x00f42400
 800360c:	00b71b00 	.word	0x00b71b00

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCC_GetHCLKFreq+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff0 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a9b      	lsrs	r3, r3, #10
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	08004e3c 	.word	0x08004e3c

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffdc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0b5b      	lsrs	r3, r3, #13
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	08004e3c 	.word	0x08004e3c

08003678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	220f      	movs	r2, #15
 8003686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_RCC_GetClockConfig+0x60>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40023c00 	.word	0x40023c00

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f839 	bl	800377a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fbfc 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04e      	b.n	8003846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <HAL_TIM_Base_Start_IT+0xc4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d01d      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_TIM_Base_Start_IT+0xc8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_TIM_Base_Start_IT+0xcc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_TIM_Base_Start_IT+0xd0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_Base_Start_IT+0xd4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_TIM_Base_Start_IT+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_TIM_Base_Start_IT+0xdc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d010      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	e007      	b.n	8003844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40010400 	.word	0x40010400
 8003868:	40014000 	.word	0x40014000
 800386c:	40001800 	.word	0x40001800

08003870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_TIM_PWM_Start+0x24>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e022      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b04      	cmp	r3, #4
 8003898:	d109      	bne.n	80038ae <HAL_TIM_PWM_Start+0x3e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e015      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d109      	bne.n	80038c8 <HAL_TIM_PWM_Start+0x58>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e008      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07c      	b.n	80039dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x82>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	e013      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003900:	e00b      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0xa2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003910:	e003      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fcc2 	bl	80042ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_TIM_PWM_Start+0x174>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIM_PWM_Start+0xcc>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <HAL_TIM_PWM_Start+0x178>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_TIM_PWM_Start+0xd0>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_TIM_PWM_Start+0xd2>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_TIM_PWM_Start+0x174>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d01d      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_TIM_PWM_Start+0x17c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_TIM_PWM_Start+0x180>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_TIM_PWM_Start+0x184>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <HAL_TIM_PWM_Start+0x178>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_TIM_PWM_Start+0x188>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x136>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <HAL_TIM_PWM_Start+0x18c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d111      	bne.n	80039ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d010      	beq.n	80039da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	e007      	b.n	80039da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40010400 	.word	0x40010400
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40001800 	.word	0x40001800

08003a00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fc4a 	bl	80042ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2e      	ldr	r2, [pc, #184]	; (8003ad8 <HAL_TIM_PWM_Stop+0xd8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_PWM_Stop+0x2c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <HAL_TIM_PWM_Stop+0xdc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_PWM_Stop+0x30>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_PWM_Stop+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d017      	beq.n	8003a66 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <HAL_TIM_PWM_Stop+0x66>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	f240 4344 	movw	r3, #1092	; 0x444
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_TIM_PWM_Stop+0x66>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1a      	ldr	r2, [r3, #32]
 8003a6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_TIM_PWM_Stop+0x96>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	f240 4344 	movw	r3, #1092	; 0x444
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_PWM_Stop+0x96>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Stop+0xa6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_PWM_Stop+0xce>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Stop+0xb6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_PWM_Stop+0xce>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Stop+0xc6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_PWM_Stop+0xce>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40010400 	.word	0x40010400

08003ae0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e041      	b.n	8003b76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fb9c 	bl	8001244 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 f9fa 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d122      	bne.n	8003bda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d11b      	bne.n	8003bda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0202 	mvn.w	r2, #2
 8003baa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f98a 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003bc6:	e005      	b.n	8003bd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f97c 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f98d 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d122      	bne.n	8003c2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d11b      	bne.n	8003c2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0204 	mvn.w	r2, #4
 8003bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f960 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003c1a:	e005      	b.n	8003c28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f952 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f963 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d122      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11b      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0208 	mvn.w	r2, #8
 8003c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f936 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003c6e:	e005      	b.n	8003c7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f928 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f939 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d122      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0210 	mvn.w	r2, #16
 8003ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2208      	movs	r2, #8
 8003cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f90c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003cc2:	e005      	b.n	8003cd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8fe 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f90f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10e      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0201 	mvn.w	r2, #1
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fd f8f5 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d10e      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb6b 	bl	8004404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d10e      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8d4 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d10e      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d107      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0220 	mvn.w	r2, #32
 8003d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fb35 	bl	80043f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_IC_ConfigChannel+0x1e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e088      	b.n	8003ebe <HAL_TIM_IC_ConfigChannel+0x130>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11b      	bne.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f000 f945 	bl	8004058 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 020c 	bic.w	r2, r2, #12
 8003ddc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6999      	ldr	r1, [r3, #24]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	e060      	b.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d11c      	bne.n	8003e32 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f000 f99a 	bl	8004140 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e1a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	021a      	lsls	r2, r3, #8
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	619a      	str	r2, [r3, #24]
 8003e30:	e040      	b.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f000 f9b7 	bl	80041ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020c 	bic.w	r2, r2, #12
 8003e5a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69d9      	ldr	r1, [r3, #28]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	61da      	str	r2, [r3, #28]
 8003e6e:	e021      	b.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d11c      	bne.n	8003eb0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f000 f9d4 	bl	8004232 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	e001      	b.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <TIM_TI1_SetConfig+0xcc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01b      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d017      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_TI1_SetConfig+0xd0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_TI1_SetConfig+0xd4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <TIM_TI1_SetConfig+0xd8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <TIM_TI1_SetConfig+0xdc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <TIM_TI1_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_TI1_SetConfig+0x66>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <TIM_TI1_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <TIM_TI1_SetConfig+0x6a>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <TIM_TI1_SetConfig+0x6c>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e003      	b.n	80040e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f023 030a 	bic.w	r3, r3, #10
 80040fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 030a 	and.w	r3, r3, #10
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40001800 	.word	0x40001800

08004140 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	b29b      	uxth	r3, r3
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800420a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004270:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	b29b      	uxth	r3, r3
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004284:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2201      	movs	r2, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1a      	ldr	r2, [r3, #32]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e05a      	b.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d01d      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40001800 	.word	0x40001800

080043f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e03f      	b.n	80044aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc ffd4 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa39 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08a      	sub	sp, #40	; 0x28
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d17c      	bne.n	80045cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_Transmit+0x2c>
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e075      	b.n	80045ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Transmit+0x3e>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e06e      	b.n	80045ce <HAL_UART_Transmit+0x11c>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004506:	f7fd f821 	bl	800154c <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d108      	bne.n	8004534 <HAL_UART_Transmit+0x82>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e003      	b.n	800453c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004544:	e02a      	b.n	800459c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f912 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e036      	b.n	80045ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	3302      	adds	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e007      	b.n	800458e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	3301      	adds	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1cf      	bne.n	8004546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f8e2 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af02      	add	r7, sp, #8
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	f040 808c 	bne.w	8004710 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Receive+0x2e>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e084      	b.n	8004712 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UART_Receive+0x40>
 8004612:	2302      	movs	r3, #2
 8004614:	e07d      	b.n	8004712 <HAL_UART_Receive+0x13c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2222      	movs	r2, #34	; 0x22
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004632:	f7fc ff8b 	bl	800154c <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d108      	bne.n	8004660 <HAL_UART_Receive+0x8a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e003      	b.n	8004668 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004670:	e043      	b.n	80046fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2120      	movs	r1, #32
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f87c 	bl	800477a <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e042      	b.n	8004712 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	b29a      	uxth	r2, r3
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	3302      	adds	r3, #2
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e01f      	b.n	80046ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b4:	d007      	beq.n	80046c6 <HAL_UART_Receive+0xf0>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_UART_Receive+0xfe>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e008      	b.n	80046e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1b6      	bne.n	8004672 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	d11d      	bne.n	8004770 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Receive_IT+0x26>
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e016      	b.n	8004772 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Receive_IT+0x38>
 800474e:	2302      	movs	r3, #2
 8004750:	e00f      	b.n	8004772 <HAL_UART_Receive_IT+0x58>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	461a      	mov	r2, r3
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f875 	bl	8004856 <UART_Start_Receive_IT>
 800476c:	4603      	mov	r3, r0
 800476e:	e000      	b.n	8004772 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b090      	sub	sp, #64	; 0x40
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478a:	e050      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d04c      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0x30>
 800479a:	f7fc fed7 	bl	800154c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d241      	bcs.n	800482e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ca:	637a      	str	r2, [r7, #52]	; 0x34
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	613b      	str	r3, [r7, #16]
   return(result);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047fe:	623a      	str	r2, [r7, #32]
 8004800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	69f9      	ldr	r1, [r7, #28]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	61bb      	str	r3, [r7, #24]
   return(result);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d09f      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3740      	adds	r7, #64	; 0x40
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2222      	movs	r2, #34	; 0x22
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0220 	orr.w	r2, r2, #32
 80048c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b0c0      	sub	sp, #256	; 0x100
 80048da:	af00      	add	r7, sp, #0
 80048dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	ea40 0301 	orr.w	r3, r0, r1
 80048fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	431a      	orrs	r2, r3
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800492c:	f021 010c 	bic.w	r1, r1, #12
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800493a:	430b      	orrs	r3, r1
 800493c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	6999      	ldr	r1, [r3, #24]
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	ea40 0301 	orr.w	r3, r0, r1
 800495a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b8f      	ldr	r3, [pc, #572]	; (8004ba0 <UART_SetConfig+0x2cc>)
 8004964:	429a      	cmp	r2, r3
 8004966:	d005      	beq.n	8004974 <UART_SetConfig+0xa0>
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b8d      	ldr	r3, [pc, #564]	; (8004ba4 <UART_SetConfig+0x2d0>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d104      	bne.n	800497e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fe fe6c 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8004978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800497c:	e003      	b.n	8004986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800497e:	f7fe fe53 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8004982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	f040 810c 	bne.w	8004bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800499e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	1891      	adds	r1, r2, r2
 80049ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ae:	415b      	adcs	r3, r3
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b6:	4621      	mov	r1, r4
 80049b8:	eb12 0801 	adds.w	r8, r2, r1
 80049bc:	4629      	mov	r1, r5
 80049be:	eb43 0901 	adc.w	r9, r3, r1
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d6:	4690      	mov	r8, r2
 80049d8:	4699      	mov	r9, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	eb18 0303 	adds.w	r3, r8, r3
 80049e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049e4:	462b      	mov	r3, r5
 80049e6:	eb49 0303 	adc.w	r3, r9, r3
 80049ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a02:	460b      	mov	r3, r1
 8004a04:	18db      	adds	r3, r3, r3
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
 8004a08:	4613      	mov	r3, r2
 8004a0a:	eb42 0303 	adc.w	r3, r2, r3
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a18:	f7fb fbe8 	bl	80001ec <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004a22:	fba3 2302 	umull	r2, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	011c      	lsls	r4, r3, #4
 8004a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a44:	415b      	adcs	r3, r3
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0b01 	adc.w	fp, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a6c:	4692      	mov	sl, r2
 8004a6e:	469b      	mov	fp, r3
 8004a70:	4643      	mov	r3, r8
 8004a72:	eb1a 0303 	adds.w	r3, sl, r3
 8004a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	18db      	adds	r3, r3, r3
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aae:	f7fb fb9d 	bl	80001ec <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004aba:	fba3 2301 	umull	r2, r3, r3, r1
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	2264      	movs	r2, #100	; 0x64
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	1acb      	subs	r3, r1, r3
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004adc:	441c      	add	r4, r3
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af8:	415b      	adcs	r3, r3
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6339      	str	r1, [r7, #48]	; 0x30
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b54:	460b      	mov	r3, r1
 8004b56:	18db      	adds	r3, r3, r3
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	eb42 0303 	adc.w	r3, r2, r3
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b6a:	f7fb fb3f 	bl	80001ec <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <UART_SetConfig+0x2d4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 0207 	and.w	r2, r3, #7
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4422      	add	r2, r4
 8004b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b9c:	e106      	b.n	8004dac <UART_SetConfig+0x4d8>
 8004b9e:	bf00      	nop
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	40011400 	.word	0x40011400
 8004ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	1891      	adds	r1, r2, r2
 8004bc4:	6239      	str	r1, [r7, #32]
 8004bc6:	415b      	adcs	r3, r3
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bce:	4641      	mov	r1, r8
 8004bd0:	1854      	adds	r4, r2, r1
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	eb43 0501 	adc.w	r5, r3, r1
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	00eb      	lsls	r3, r5, #3
 8004be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be6:	00e2      	lsls	r2, r4, #3
 8004be8:	4614      	mov	r4, r2
 8004bea:	461d      	mov	r5, r3
 8004bec:	4643      	mov	r3, r8
 8004bee:	18e3      	adds	r3, r4, r3
 8004bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	eb45 0303 	adc.w	r3, r5, r3
 8004bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	008b      	lsls	r3, r1, #2
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c24:	4621      	mov	r1, r4
 8004c26:	008a      	lsls	r2, r1, #2
 8004c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c2c:	f7fb fade 	bl	80001ec <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b60      	ldr	r3, [pc, #384]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004c36:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	011c      	lsls	r4, r3, #4
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	1891      	adds	r1, r2, r2
 8004c56:	61b9      	str	r1, [r7, #24]
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c60:	4641      	mov	r1, r8
 8004c62:	1851      	adds	r1, r2, r1
 8004c64:	6139      	str	r1, [r7, #16]
 8004c66:	4649      	mov	r1, r9
 8004c68:	414b      	adcs	r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	00cb      	lsls	r3, r1, #3
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c82:	4651      	mov	r1, sl
 8004c84:	00ca      	lsls	r2, r1, #3
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c94:	464b      	mov	r3, r9
 8004c96:	460a      	mov	r2, r1
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb8:	4649      	mov	r1, r9
 8004cba:	008b      	lsls	r3, r1, #2
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	008a      	lsls	r2, r1, #2
 8004cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cca:	f7fb fa8f 	bl	80001ec <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2264      	movs	r2, #100	; 0x64
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	1acb      	subs	r3, r1, r3
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	3332      	adds	r3, #50	; 0x32
 8004ce8:	4a33      	ldr	r2, [pc, #204]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	441c      	add	r4, r3
 8004cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8004cfe:	677a      	str	r2, [r7, #116]	; 0x74
 8004d00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d14:	4641      	mov	r1, r8
 8004d16:	1851      	adds	r1, r2, r1
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	414b      	adcs	r3, r1
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	00cb      	lsls	r3, r1, #3
 8004d30:	4651      	mov	r1, sl
 8004d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d36:	4651      	mov	r1, sl
 8004d38:	00ca      	lsls	r2, r1, #3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4642      	mov	r2, r8
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d46:	464b      	mov	r3, r9
 8004d48:	460a      	mov	r2, r1
 8004d4a:	eb42 0303 	adc.w	r3, r2, r3
 8004d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	663b      	str	r3, [r7, #96]	; 0x60
 8004d5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d68:	4649      	mov	r1, r9
 8004d6a:	008b      	lsls	r3, r1, #2
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d72:	4641      	mov	r1, r8
 8004d74:	008a      	lsls	r2, r1, #2
 8004d76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d7a:	f7fb fa37 	bl	80001ec <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004d84:	fba3 1302 	umull	r1, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	2164      	movs	r1, #100	; 0x64
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	3332      	adds	r3, #50	; 0x32
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <UART_SetConfig+0x4e4>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4422      	add	r2, r4
 8004daa:	609a      	str	r2, [r3, #8]
}
 8004dac:	bf00      	nop
 8004dae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db8:	51eb851f 	.word	0x51eb851f

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4d0d      	ldr	r5, [pc, #52]	; (8004e04 <__libc_init_array+0x38>)
 8004dd0:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	4d0b      	ldr	r5, [pc, #44]	; (8004e0c <__libc_init_array+0x40>)
 8004dde:	4c0c      	ldr	r4, [pc, #48]	; (8004e10 <__libc_init_array+0x44>)
 8004de0:	f000 f818 	bl	8004e14 <_init>
 8004de4:	1b64      	subs	r4, r4, r5
 8004de6:	10a4      	asrs	r4, r4, #2
 8004de8:	2600      	movs	r6, #0
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08004e54 	.word	0x08004e54
 8004e08:	08004e54 	.word	0x08004e54
 8004e0c:	08004e54 	.word	0x08004e54
 8004e10:	08004e58 	.word	0x08004e58

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
