
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e8  080042e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010ac4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027d8  00000000  00000000  00030b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  00033320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b18  00000000  00000000  00034170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023ce0  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012050  00000000  00000000  00058968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d98a6  00000000  00000000  0006a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b14  00000000  00000000  00144260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00147d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004284 	.word	0x08004284

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004284 	.word	0x08004284

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <MX_CAN1_Init+0xa0>)
 80004ee:	4a27      	ldr	r2, [pc, #156]	; (800058c <MX_CAN1_Init+0xa4>)
 80004f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <MX_CAN1_Init+0xa0>)
 80004f4:	2203      	movs	r2, #3
 80004f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <MX_CAN1_Init+0xa0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000506:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800050a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_CAN1_Init+0xa0>)
 800050e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000512:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800051a:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_CAN1_Init+0xa0>)
 800051c:	2201      	movs	r2, #1
 800051e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000522:	2200      	movs	r2, #0
 8000524:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_CAN1_Init+0xa0>)
 800052e:	2200      	movs	r2, #0
 8000530:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_CAN1_Init+0xa0>)
 8000534:	2200      	movs	r2, #0
 8000536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000538:	4813      	ldr	r0, [pc, #76]	; (8000588 <MX_CAN1_Init+0xa0>)
 800053a:	f000 fe49 	bl	80011d0 <HAL_CAN_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000544:	f000 fb08 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_CAN1_Init+0xa8>)
 800054a:	2201      	movs	r2, #1
 800054c:	621a      	str	r2, [r3, #32]
  canfilter1.FilterBank = 0;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  canfilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  canfilter1.FilterIdHigh = 0x0000;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_CAN1_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_CAN1_Init+0xa8>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_CAN1_Init+0xa8>)
 800057a:	2201      	movs	r2, #1
 800057c:	61da      	str	r2, [r3, #28]
  canfilter1.SlaveStartFilterBank = 14;
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <MX_CAN1_Init+0xa8>)
 8000580:	220e      	movs	r2, #14
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END CAN1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000028 	.word	0x20000028
 800058c:	40006400 	.word	0x40006400
 8000590:	20000050 	.word	0x20000050

08000594 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <HAL_CAN_MspInit+0xa4>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d13b      	bne.n	800062e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a1f      	ldr	r2, [pc, #124]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_CAN_MspInit+0xa8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0308 	and.w	r3, r3, #8
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ee:	2303      	movs	r3, #3
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005fe:	2309      	movs	r3, #9
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <HAL_CAN_MspInit+0xac>)
 800060a:	f001 fe01 	bl	8002210 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2013      	movs	r0, #19
 8000614:	f001 fae8 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000618:	2013      	movs	r0, #19
 800061a:	f001 fb01 	bl	8001c20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2014      	movs	r0, #20
 8000624:	f001 fae0 	bl	8001be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f001 faf9 	bl	8001c20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_DMA_Init+0x3c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <MX_DMA_Init+0x3c>)
 8000654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_DMA_Init+0x3c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	2045      	movs	r0, #69	; 0x45
 800066c:	f001 fabc 	bl	8001be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000670:	2045      	movs	r0, #69	; 0x45
 8000672:	f001 fad5 	bl	8001c20 <HAL_NVIC_EnableIRQ>

}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b46      	ldr	r3, [pc, #280]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <MX_GPIO_Init+0x140>)
 80006f8:	f043 0310 	orr.w	r3, r3, #16
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_GPIO_Init+0x140>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_GPIO_Init+0x140>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <MX_GPIO_Init+0x140>)
 8000714:	f043 0320 	orr.w	r3, r3, #32
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0x140>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0320 	and.w	r3, r3, #32
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <MX_GPIO_Init+0x144>)
 800072e:	f001 ff1b 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <MX_GPIO_Init+0x148>)
 800073a:	f001 ff15 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	213c      	movs	r1, #60	; 0x3c
 8000742:	4823      	ldr	r0, [pc, #140]	; (80007d0 <MX_GPIO_Init+0x14c>)
 8000744:	f001 ff10 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 8000748:	233c      	movs	r3, #60	; 0x3c
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <MX_GPIO_Init+0x14c>)
 8000760:	f001 fd56 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <MX_GPIO_Init+0x150>)
 800077a:	f001 fd49 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800077e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0x144>)
 8000798:	f001 fd3a 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800079c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0x148>)
 80007b6:	f001 fd2b 	bl	8002210 <HAL_GPIO_Init>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40021400 	.word	0x40021400
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40021c00 	.word	0x40021c00
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007dc:	b09b      	sub	sp, #108	; 0x6c
 80007de:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fc90 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f8f0 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff4c 	bl	8000684 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ec:	f7ff ff2a 	bl	8000644 <MX_DMA_Init>
  MX_CAN1_Init();
 80007f0:	f7ff fe7a 	bl	80004e8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80007f4:	f000 fbea 	bl	8000fcc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007f8:	f000 fabe 	bl	8000d78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //UART setup
  unsigned char runMotorHeader = 0x01;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  unsigned char dribblerHeader = 0x02;
 8000802:	2302      	movs	r3, #2
 8000804:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint32_t uart_rx_buffer_size = 9;  //set to the size we want to limit receive messages to
 8000808:	2309      	movs	r3, #9
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t uart_tx_buffer_size = 33;  //set to the size we want to limit send messages to
 800080c:	2321      	movs	r3, #33	; 0x21
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t uart_rx_buffer[uart_rx_buffer_size]; //buffer that stores in an array of characters user inputs, aka a string
 8000810:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000812:	460b      	mov	r3, r1
 8000814:	3b01      	subs	r3, #1
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
 8000818:	2300      	movs	r3, #0
 800081a:	6039      	str	r1, [r7, #0]
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	00c3      	lsls	r3, r0, #3
 800082a:	6838      	ldr	r0, [r7, #0]
 800082c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000830:	6838      	ldr	r0, [r7, #0]
 8000832:	00c2      	lsls	r2, r0, #3
 8000834:	2300      	movs	r3, #0
 8000836:	468a      	mov	sl, r1
 8000838:	469b      	mov	fp, r3
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000846:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800084a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800084e:	1dcb      	adds	r3, r1, #7
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	ebad 0d03 	sub.w	sp, sp, r3
 8000858:	ab04      	add	r3, sp, #16
 800085a:	3300      	adds	r3, #0
 800085c:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t uart_tx_buffer[uart_tx_buffer_size];
 800085e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000860:	460b      	mov	r3, r1
 8000862:	3b01      	subs	r3, #1
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000866:	2300      	movs	r3, #0
 8000868:	4688      	mov	r8, r1
 800086a:	4699      	mov	r9, r3
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000878:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800087c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000880:	2300      	movs	r3, #0
 8000882:	460c      	mov	r4, r1
 8000884:	461d      	mov	r5, r3
 8000886:	f04f 0200 	mov.w	r2, #0
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	00eb      	lsls	r3, r5, #3
 8000890:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000894:	00e2      	lsls	r2, r4, #3
 8000896:	1dcb      	adds	r3, r1, #7
 8000898:	08db      	lsrs	r3, r3, #3
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	ebad 0d03 	sub.w	sp, sp, r3
 80008a0:	ab04      	add	r3, sp, #16
 80008a2:	3300      	adds	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t headers[] = {runMotorHeader, dribblerHeader};
 80008a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80008ae:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80008b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  int ms_to_listen = 4000;  //set the number of ms we keep the uart line in receive mode for
 80008b6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 80008bc:	2104      	movs	r1, #4
 80008be:	483c      	ldr	r0, [pc, #240]	; (80009b0 <main+0x1d8>)
 80008c0:	f001 fe6b 	bl	800259a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 80008c4:	2108      	movs	r1, #8
 80008c6:	483a      	ldr	r0, [pc, #232]	; (80009b0 <main+0x1d8>)
 80008c8:	f001 fe67 	bl	800259a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 80008cc:	2110      	movs	r1, #16
 80008ce:	4838      	ldr	r0, [pc, #224]	; (80009b0 <main+0x1d8>)
 80008d0:	f001 fe63 	bl	800259a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 80008d4:	2120      	movs	r1, #32
 80008d6:	4836      	ldr	r0, [pc, #216]	; (80009b0 <main+0x1d8>)
 80008d8:	f001 fe5f 	bl	800259a <HAL_GPIO_TogglePin>

  //CAN setup
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80008dc:	4835      	ldr	r0, [pc, #212]	; (80009b4 <main+0x1dc>)
 80008de:	f000 fd72 	bl	80013c6 <HAL_CAN_Start>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <main+0x114>
  {
	  Error_Handler();
 80008e8:	f000 f936 	bl	8000b58 <Error_Handler>
  }
  canTxHeader.DLC = 8;
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <main+0x1e0>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <main+0x1e0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <main+0x1e0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <main+0x1e0>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <main+0x1e0>)
 8000908:	2200      	movs	r2, #0
 800090a:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800090c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000910:	482a      	ldr	r0, [pc, #168]	; (80009bc <main+0x1e4>)
 8000912:	f001 fe42 	bl	800259a <HAL_GPIO_TogglePin>
	HAL_UART_Receive(&huart2, uart_rx_buffer, uart_rx_buffer_size, ms_to_listen);
 8000916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000918:	b29a      	uxth	r2, r3
 800091a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800091e:	4828      	ldr	r0, [pc, #160]	; (80009c0 <main+0x1e8>)
 8000920:	f003 f8ff 	bl	8003b22 <HAL_UART_Receive>
	if (uart_rx_buffer[0] == headers[0]){
 8000924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800092c:	429a      	cmp	r2, r3
 800092e:	d12c      	bne.n	800098a <main+0x1b2>
		runMotors(uart_rx_buffer[1], uart_rx_buffer[2], uart_rx_buffer[3], uart_rx_buffer[4], uart_rx_buffer[5], uart_rx_buffer[6], uart_rx_buffer[7], uart_rx_buffer[8]);
 8000930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000932:	785c      	ldrb	r4, [r3, #1]
 8000934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000936:	789d      	ldrb	r5, [r3, #2]
 8000938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800093a:	78de      	ldrb	r6, [r3, #3]
 800093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800093e:	f893 c004 	ldrb.w	ip, [r3, #4]
 8000942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000948:	7992      	ldrb	r2, [r2, #6]
 800094a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800094c:	79c9      	ldrb	r1, [r1, #7]
 800094e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000950:	7a00      	ldrb	r0, [r0, #8]
 8000952:	9003      	str	r0, [sp, #12]
 8000954:	9102      	str	r1, [sp, #8]
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4663      	mov	r3, ip
 800095c:	4632      	mov	r2, r6
 800095e:	4629      	mov	r1, r5
 8000960:	4620      	mov	r0, r4
 8000962:	f000 f89b 	bl	8000a9c <runMotors>
		uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <main+0x1ec>)
 8000968:	f107 040c 	add.w	r4, r7, #12
 800096c:	461d      	mov	r5, r3
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	2221      	movs	r2, #33	; 0x21
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <main+0x1e8>)
 8000986:	f003 f83a 	bl	80039fe <HAL_UART_Transmit>
	}
	else {
	}

	for (int i = 0; i < uart_rx_buffer_size; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	657b      	str	r3, [r7, #84]	; 0x54
 800098e:	e007      	b.n	80009a0 <main+0x1c8>
		uart_rx_buffer[i] = 0;
 8000990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000994:	4413      	add	r3, r2
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < uart_rx_buffer_size; i++) {
 800099a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800099c:	3301      	adds	r3, #1
 800099e:	657b      	str	r3, [r7, #84]	; 0x54
 80009a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f3      	bhi.n	8000990 <main+0x1b8>
	}
	HAL_Delay(100);
 80009a8:	2064      	movs	r0, #100	; 0x64
 80009aa:	f000 fbed 	bl	8001188 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80009ae:	e7ad      	b.n	800090c <main+0x134>
 80009b0:	40021c00 	.word	0x40021c00
 80009b4:	20000028 	.word	0x20000028
 80009b8:	20000078 	.word	0x20000078
 80009bc:	40021400 	.word	0x40021400
 80009c0:	2000018c 	.word	0x2000018c
 80009c4:	0800429c 	.word	0x0800429c

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fc28 	bl	800422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <SystemClock_Config+0xcc>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a3c:	23a8      	movs	r3, #168	; 0xa8
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fdbf 	bl	80025d0 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a58:	f000 f87e 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2105      	movs	r1, #5
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f820 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a86:	f000 f867 	bl	8000b58 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <runMotors>:
	    HAL_Delay(0.5);
	    i++;
	}
}

void runMotors(unsigned char motorOneHigh, unsigned char motorOneLow, unsigned char motorTwoHigh, unsigned char motorTwoLow, unsigned char motorThreeHigh, unsigned char motorThreeLow, unsigned char motorFourHigh, unsigned char motorFourLow){          //speed can be 16 bits, split into high and low bytes
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	717b      	strb	r3, [r7, #5]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	713b      	strb	r3, [r7, #4]
	CAN_TxData[0] = motorOneHigh;  //high byte for speed, shifted 8 because only buffer is only 8 bits
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <runMotors+0x88>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	7013      	strb	r3, [r2, #0]
	CAN_TxData[1] = motorOneLow;       //low bytes for speed
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <runMotors+0x88>)
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	7053      	strb	r3, [r2, #1]
	CAN_TxData[2] = motorTwoHigh;
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <runMotors+0x88>)
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	7093      	strb	r3, [r2, #2]
	CAN_TxData[3] = motorTwoLow;
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <runMotors+0x88>)
 8000ace:	793b      	ldrb	r3, [r7, #4]
 8000ad0:	70d3      	strb	r3, [r2, #3]
	CAN_TxData[4] = motorThreeHigh;
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <runMotors+0x88>)
 8000ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad8:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = motorThreeLow;
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <runMotors+0x88>)
 8000adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ae0:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = motorFourHigh;
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <runMotors+0x88>)
 8000ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ae8:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = motorFourLow;
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <runMotors+0x88>)
 8000aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000af0:	71d3      	strb	r3, [r2, #7]

	int i = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
	while(i < 1000){
 8000af6:	e00b      	b.n	8000b10 <runMotors+0x74>
		HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <runMotors+0x8c>)
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <runMotors+0x88>)
 8000afc:	490b      	ldr	r1, [pc, #44]	; (8000b2c <runMotors+0x90>)
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <runMotors+0x94>)
 8000b00:	f000 fca5 	bl	800144e <HAL_CAN_AddTxMessage>
	    HAL_Delay(0.5);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 fb3f 	bl	8001188 <HAL_Delay>
	    i++;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
	while(i < 1000){
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b16:	dbef      	blt.n	8000af8 <runMotors+0x5c>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000094 	.word	0x20000094
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	20000078 	.word	0x20000078
 8000b30:	20000028 	.word	0x20000028

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 faff 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <HAL_InitTick+0xe4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <HAL_InitTick+0xe4>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <HAL_InitTick+0xe4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 0210 	add.w	r2, r7, #16
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 f948 	bl	8002e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bfa:	f002 f919 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8000bfe:	6378      	str	r0, [r7, #52]	; 0x34
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c02:	f002 f915 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_InitTick+0xe8>)
 8000c10:	fba2 2303 	umull	r2, r3, r2, r3
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	3b01      	subs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_InitTick+0xf0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c42:	f002 f94f 	bl	8002ee4 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <HAL_InitTick+0xec>)
 8000c56:	f002 f99f 	bl	8002f98 <HAL_TIM_Base_Start_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d111      	bne.n	8000c8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c68:	2036      	movs	r0, #54	; 0x36
 8000c6a:	f000 ffd9 	bl	8001c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d808      	bhi.n	8000c86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2036      	movs	r0, #54	; 0x36
 8000c7a:	f000 ffb5 	bl	8001be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0xf4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e002      	b.n	8000c8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	2000009c 	.word	0x2000009c
 8000ca4:	40001000 	.word	0x40001000
 8000ca8:	20000004 	.word	0x20000004

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <CAN1_TX_IRQHandler+0x10>)
 8000d0a:	f000 fc7b 	bl	8001604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000028 	.word	0x20000028

08000d18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <CAN1_RX0_IRQHandler+0x10>)
 8000d1e:	f000 fc71 	bl	8001604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000028 	.word	0x20000028

08000d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM6_DAC_IRQHandler+0x10>)
 8000d32:	f002 f9f0 	bl	8003116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000009c 	.word	0x2000009c

08000d40 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA2_Stream6_IRQHandler+0x10>)
 8000d46:	f001 f827 	bl	8001d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000012c 	.word	0x2000012c

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d94:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000d96:	4a37      	ldr	r2, [pc, #220]	; (8000e74 <MX_TIM1_Init+0xfc>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000da8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dc0:	482b      	ldr	r0, [pc, #172]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000dc2:	f002 f959 	bl	8003078 <HAL_TIM_IC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f7ff fec4 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4824      	ldr	r0, [pc, #144]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000de0:	f002 fd30 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dea:	f7ff feb5 	bl	8000b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000df2:	2302      	movs	r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000e06:	f002 fa8e 	bl	8003326 <HAL_TIM_IC_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000e10:	f7ff fea2 	bl	8000b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e14:	230a      	movs	r3, #10
 8000e16:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000e24:	f002 fa7f 	bl	8003326 <HAL_TIM_IC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e2e:	f7ff fe93 	bl	8000b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2208      	movs	r2, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000e3e:	f002 fa72 	bl	8003326 <HAL_TIM_IC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000e48:	f7ff fe86 	bl	8000b58 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	220c      	movs	r2, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM1_Init+0xf8>)
 8000e58:	f002 fa65 	bl	8003326 <HAL_TIM_IC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000e62:	f7ff fe79 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000e4 	.word	0x200000e4
 8000e74:	40010000 	.word	0x40010000

08000e78 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a47      	ldr	r2, [pc, #284]	; (8000fb4 <HAL_TIM_IC_MspInit+0x13c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	f040 8088 	bne.w	8000fac <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8000eac:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a3d      	ldr	r2, [pc, #244]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_TIM_IC_MspInit+0x140>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	482b      	ldr	r0, [pc, #172]	; (8000fbc <HAL_TIM_IC_MspInit+0x144>)
 8000f0e:	f001 f97f 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <HAL_TIM_IC_MspInit+0x148>)
 8000f30:	f001 f96e 	bl	8002210 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_TIM_IC_MspInit+0x150>)
 8000f38:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f7a:	f000 fe5f 	bl	8001c3c <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 8000f84:	f7ff fde8 	bl	8000b58 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_TIM_IC_MspInit+0x14c>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	2000012c 	.word	0x2000012c
 8000fc8:	400264a0 	.word	0x400264a0

08000fcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART2_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8001004:	f002 fcae 	bl	8003964 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f7ff fda3 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000018c 	.word	0x2000018c
 800101c:	40004400 	.word	0x40004400

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0x84>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12b      	bne.n	800109a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_UART_MspInit+0x88>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_MspInit+0x8c>)
 8001096:	f001 f8bb 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010da:	f7ff fe3b 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f003 f8ad 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fb79 	bl	80007d8 <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f4:	080042f0 	.word	0x080042f0
  ldr r2, =_sbss
 80010f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010fc:	200001d4 	.word	0x200001d4

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 fd50 	bl	8001bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fd3e 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fd14 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	200001d0 	.word	0x200001d0

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200001d0 	.word	0x200001d0

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0ed      	b.n	80013be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f9d0 	bl	8000594 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff ffb4 	bl	8001170 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120a:	e012      	b.n	8001232 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800120c:	f7ff ffb0 	bl	8001170 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d90b      	bls.n	8001232 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0c5      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0e5      	beq.n	800120c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0202 	bic.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff ff8e 	bl	8001170 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001256:	e012      	b.n	800127e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001258:	f7ff ff8a 	bl	8001170 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90b      	bls.n	800127e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e09f      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e5      	bne.n	8001258 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e5b      	ldrb	r3, [r3, #25]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e9b      	ldrb	r3, [r3, #26]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0220 	bic.w	r2, r2, #32
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7edb      	ldrb	r3, [r3, #27]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0210 	orr.w	r2, r2, #16
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0208 	orr.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0208 	bic.w	r2, r2, #8
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7f5b      	ldrb	r3, [r3, #29]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	ea42 0103 	orr.w	r1, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12e      	bne.n	8001438 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2202      	movs	r2, #2
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013f2:	f7ff febd 	bl	8001170 <HAL_GetTick>
 80013f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013f8:	e012      	b.n	8001420 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013fa:	f7ff feb9 	bl	8001170 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b0a      	cmp	r3, #10
 8001406:	d90b      	bls.n	8001420 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2205      	movs	r2, #5
 8001418:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e012      	b.n	8001446 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e5      	bne.n	80013fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e006      	b.n	8001446 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800144e:	b480      	push	{r7}
 8001450:	b089      	sub	sp, #36	; 0x24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <HAL_CAN_AddTxMessage+0x2c>
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b02      	cmp	r3, #2
 8001476:	f040 80b8 	bne.w	80015ea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10a      	bne.n	800149a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a0 	beq.w	80015da <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	0e1b      	lsrs	r3, r3, #24
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d907      	bls.n	80014ba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e09e      	b.n	80015f8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10d      	bne.n	80014e8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014d6:	68f9      	ldr	r1, [r7, #12]
 80014d8:	6809      	ldr	r1, [r1, #0]
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3318      	adds	r3, #24
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e00f      	b.n	8001508 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3318      	adds	r3, #24
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	440b      	add	r3, r1
 8001506:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3318      	adds	r3, #24
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	7d1b      	ldrb	r3, [r3, #20]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d111      	bne.n	8001548 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3318      	adds	r3, #24
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	6811      	ldr	r1, [r2, #0]
 8001538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	3304      	adds	r3, #4
 8001546:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3307      	adds	r3, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	061a      	lsls	r2, r3, #24
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3306      	adds	r3, #6
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3305      	adds	r3, #5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	4313      	orrs	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	3204      	adds	r2, #4
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	4610      	mov	r0, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	6811      	ldr	r1, [r2, #0]
 8001570:	ea43 0200 	orr.w	r2, r3, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800157e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3303      	adds	r3, #3
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	061a      	lsls	r2, r3, #24
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3302      	adds	r3, #2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	041b      	lsls	r3, r3, #16
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3301      	adds	r3, #1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	4313      	orrs	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4610      	mov	r0, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	ea43 0200 	orr.w	r2, r3, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3318      	adds	r3, #24
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	6811      	ldr	r1, [r2, #0]
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3318      	adds	r3, #24
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	440b      	add	r3, r1
 80015d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e00e      	b.n	80015f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e006      	b.n	80015f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
  }
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d07c      	beq.n	8001744 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f983 	bl	8001972 <HAL_CAN_TxMailbox0CompleteCallback>
 800166c:	e016      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	e00c      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	e002      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f989 	bl	80019ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d024      	beq.n	80016f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f963 	bl	8001986 <HAL_CAN_TxMailbox1CompleteCallback>
 80016c0:	e016      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	e00c      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	e002      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f969 	bl	80019c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f943 	bl	800199a <HAL_CAN_TxMailbox2CompleteCallback>
 8001714:	e016      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e00c      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e002      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f949 	bl	80019d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2210      	movs	r2, #16
 8001766:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f93a 	bl	80019fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d009      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f921 	bl	80019ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f91c 	bl	8001a26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f903 	bl	8001a12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2210      	movs	r2, #16
 8001826:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f906 	bl	8001a3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8ff 	bl	8001a4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d07b      	beq.n	8001952 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d072      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d043      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d03e      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018d2:	2b60      	cmp	r3, #96	; 0x60
 80018d4:	d02b      	beq.n	800192e <HAL_CAN_IRQHandler+0x32a>
 80018d6:	2b60      	cmp	r3, #96	; 0x60
 80018d8:	d82e      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018da:	2b50      	cmp	r3, #80	; 0x50
 80018dc:	d022      	beq.n	8001924 <HAL_CAN_IRQHandler+0x320>
 80018de:	2b50      	cmp	r3, #80	; 0x50
 80018e0:	d82a      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d019      	beq.n	800191a <HAL_CAN_IRQHandler+0x316>
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d826      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018ea:	2b30      	cmp	r3, #48	; 0x30
 80018ec:	d010      	beq.n	8001910 <HAL_CAN_IRQHandler+0x30c>
 80018ee:	2b30      	cmp	r3, #48	; 0x30
 80018f0:	d822      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d002      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2f8>
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d005      	beq.n	8001906 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018fa:	e01d      	b.n	8001938 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001904:	e019      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190e:	e014      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001918:	e00f      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001922:	e00a      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192c:	e005      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001936:	e000      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            break;
 8001938:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001948:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2204      	movs	r2, #4
 8001950:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f87c 	bl	8001a62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff4c 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfa:	f7ff ff61 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001bfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7ff ffb1 	bl	8001b6c <NVIC_EncodePriority>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff80 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff54 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fa92 	bl	8001170 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e099      	b.n	8001d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e00f      	b.n	8001c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fa79 	bl	8001170 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d908      	bls.n	8001c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e078      	b.n	8001d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e8      	bne.n	8001c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_DMA_Init+0x158>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0307 	bic.w	r3, r3, #7
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d117      	bne.n	8001d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f9e9 	bl	8002118 <DMA_CheckFifoParam>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f9a0 	bl	80020ac <DMA_CalcBaseAndBitshift>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	223f      	movs	r2, #63	; 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f010803f 	.word	0xf010803f

08001d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da4:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_DMA_IRQHandler+0x248>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a8e      	ldr	r2, [pc, #568]	; (8001fe4 <HAL_DMA_IRQHandler+0x24c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2208      	movs	r2, #8
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d012      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2210      	movs	r2, #16
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d043      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03c      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2210      	movs	r2, #16
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d018      	beq.n	8001eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d024      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e01f      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e016      	b.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8087 	beq.w	8002038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2220      	movs	r2, #32
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d136      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0216 	bic.w	r2, r2, #22
 8001f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_DMA_IRQHandler+0x1da>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	223f      	movs	r2, #63	; 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07e      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
        }
        return;
 8001fae:	e079      	b.n	80020a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d031      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
 8001fdc:	e02c      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e01e      	b.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0210 	bic.w	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d022      	beq.n	8002092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d307      	bcc.n	8002080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f2      	bne.n	8002064 <HAL_DMA_IRQHandler+0x2cc>
 800207e:	e000      	b.n	8002082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a4:	bf00      	nop
    }
  }
}
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3b10      	subs	r3, #16
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <DMA_CalcBaseAndBitshift+0x64>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020c6:	4a13      	ldr	r2, [pc, #76]	; (8002114 <DMA_CalcBaseAndBitshift+0x68>)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d909      	bls.n	80020ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	1d1a      	adds	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58
 80020ec:	e007      	b.n	80020fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	aaaaaaab 	.word	0xaaaaaaab
 8002114:	080042d8 	.word	0x080042d8

08002118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11f      	bne.n	8002172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d856      	bhi.n	80021e6 <DMA_CheckFifoParam+0xce>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <DMA_CheckFifoParam+0x28>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	08002163 	.word	0x08002163
 8002148:	08002151 	.word	0x08002151
 800214c:	080021e7 	.word	0x080021e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d046      	beq.n	80021ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002160:	e043      	b.n	80021ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800216a:	d140      	bne.n	80021ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002170:	e03d      	b.n	80021ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	d121      	bne.n	80021c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d837      	bhi.n	80021f2 <DMA_CheckFifoParam+0xda>
 8002182:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <DMA_CheckFifoParam+0x70>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002199 	.word	0x08002199
 800218c:	0800219f 	.word	0x0800219f
 8002190:	08002199 	.word	0x08002199
 8002194:	080021b1 	.word	0x080021b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      break;
 800219c:	e030      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d025      	beq.n	80021f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ae:	e022      	b.n	80021f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021be:	e01c      	b.n	80021fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d903      	bls.n	80021ce <DMA_CheckFifoParam+0xb6>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d003      	beq.n	80021d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021cc:	e018      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      break;
 80021d2:	e015      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e00b      	b.n	80021fe <DMA_CheckFifoParam+0xe6>
      break;
 80021e6:	bf00      	nop
 80021e8:	e00a      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e008      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e006      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021f2:	bf00      	nop
 80021f4:	e004      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
 80021f8:	e002      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;   
 80021fa:	bf00      	nop
 80021fc:	e000      	b.n	8002200 <DMA_CheckFifoParam+0xe8>
      break;
 80021fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e177      	b.n	800251c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8166 	bne.w	8002516 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d005      	beq.n	8002262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	2b02      	cmp	r3, #2
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d017      	beq.n	8002300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d123      	bne.n	8002354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	08da      	lsrs	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3208      	adds	r2, #8
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80c0 	beq.w	8002516 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_GPIO_Init+0x324>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_GPIO_Init+0x324>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_GPIO_Init+0x324>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b2:	4a61      	ldr	r2, [pc, #388]	; (8002538 <HAL_GPIO_Init+0x328>)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a58      	ldr	r2, [pc, #352]	; (800253c <HAL_GPIO_Init+0x32c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d037      	beq.n	800244e <HAL_GPIO_Init+0x23e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_GPIO_Init+0x330>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_GPIO_Init+0x23a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a56      	ldr	r2, [pc, #344]	; (8002544 <HAL_GPIO_Init+0x334>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x236>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a55      	ldr	r2, [pc, #340]	; (8002548 <HAL_GPIO_Init+0x338>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x232>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_GPIO_Init+0x33c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_GPIO_Init+0x340>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x22a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_GPIO_Init+0x344>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_GPIO_Init+0x348>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a50      	ldr	r2, [pc, #320]	; (800255c <HAL_GPIO_Init+0x34c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_GPIO_Init+0x350>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x21a>
 8002426:	2309      	movs	r3, #9
 8002428:	e012      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800242a:	230a      	movs	r3, #10
 800242c:	e010      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800242e:	2308      	movs	r3, #8
 8002430:	e00e      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002432:	2307      	movs	r3, #7
 8002434:	e00c      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002436:	2306      	movs	r3, #6
 8002438:	e00a      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800243a:	2305      	movs	r3, #5
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800243e:	2304      	movs	r3, #4
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x240>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x240>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x328>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_GPIO_Init+0x354>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a34      	ldr	r2, [pc, #208]	; (8002564 <HAL_GPIO_Init+0x354>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_GPIO_Init+0x354>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <HAL_GPIO_Init+0x354>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_GPIO_Init+0x354>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_GPIO_Init+0x354>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_GPIO_Init+0x354>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_GPIO_Init+0x354>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f ae84 	bls.w	800222c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40021c00 	.word	0x40021c00
 800255c:	40022000 	.word	0x40022000
 8002560:	40022400 	.word	0x40022400
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ac:	887a      	ldrh	r2, [r7, #2]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	041a      	lsls	r2, r3, #16
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	400b      	ands	r3, r1
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	619a      	str	r2, [r3, #24]
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e267      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d075      	beq.n	80026da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d00c      	beq.n	8002614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002602:	2b08      	cmp	r3, #8
 8002604:	d112      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002612:	d10b      	bne.n	800262c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05b      	beq.n	80026d8 <HAL_RCC_OscConfig+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d157      	bne.n	80026d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e242      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x74>
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a75      	ldr	r2, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e01d      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
 800264e:	4b70      	ldr	r3, [pc, #448]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6f      	ldr	r2, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0xb0>
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fd72 	bl	8001170 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fd6e 	bl	8001170 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e207      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0xc0>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fd5e 	bl	8001170 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fd5a 	bl	8001170 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1f3      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0xe8>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d11c      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b44      	ldr	r3, [pc, #272]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1c7      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4937      	ldr	r1, [pc, #220]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	e03a      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x244>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fd13 	bl	8001170 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274e:	f7fe fd0f 	bl	8001170 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1a8      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4925      	ldr	r1, [pc, #148]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x244>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fcf2 	bl	8001170 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe fcee 	bl	8001170 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e187      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d036      	beq.n	8002828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_RCC_OscConfig+0x248>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fcd2 	bl	8001170 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d0:	f7fe fcce 	bl	8001170 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e167      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_OscConfig+0x240>)
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x200>
 80027ee:	e01b      	b.n	8002828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_OscConfig+0x248>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fcbb 	bl	8001170 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	e00e      	b.n	800281c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fe:	f7fe fcb7 	bl	8001170 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d907      	bls.n	800281c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e150      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002810:	40023800 	.word	0x40023800
 8002814:	42470000 	.word	0x42470000
 8002818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ea      	bne.n	80027fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8097 	beq.w	8002964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b77      	ldr	r3, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a73      	ldr	r2, [pc, #460]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fc77 	bl	8001170 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fc73 	bl	8001170 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e10c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x474>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x2ea>
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a63      	ldr	r2, [pc, #396]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0x324>
 80028dc:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fc38 	bl	8001170 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe fc34 	bl	8001170 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e0cb      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ee      	beq.n	8002904 <HAL_RCC_OscConfig+0x334>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe fc22 	bl	8001170 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe fc1e 	bl	8001170 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0b5      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ee      	bne.n	8002930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a1 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d05c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d141      	bne.n	8002a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fbf2 	bl	8001170 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fbee 	bl	8001170 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e087      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	491b      	ldr	r1, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fbc7 	bl	8001170 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe fbc3 	bl	8001170 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e05c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x416>
 8002a04:	e054      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_OscConfig+0x478>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fbb0 	bl	8001170 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fbac 	bl	8001170 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e045      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_OscConfig+0x470>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x444>
 8002a32:	e03d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e038      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x4ec>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d028      	beq.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d121      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d11a      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cc      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d90c      	bls.n	8002afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	494d      	ldr	r1, [pc, #308]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d044      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d119      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e067      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4934      	ldr	r1, [pc, #208]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fade 	bl	8001170 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fada 	bl	8001170 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e04f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d20c      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4916      	ldr	r1, [pc, #88]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c46:	f000 f821 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	490a      	ldr	r1, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	5ccb      	ldrb	r3, [r1, r3]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd ffa4 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080042c0 	.word	0x080042c0
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b090      	sub	sp, #64	; 0x40
 8002c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d00d      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x40>
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	f200 80a1 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cbe:	e09b      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cc4:	e09b      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cca:	e098      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd6:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	627a      	str	r2, [r7, #36]	; 0x24
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf8:	fb03 f201 	mul.w	r2, r3, r1
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	4a43      	ldr	r2, [pc, #268]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d06:	fba0 1202 	umull	r1, r2, r0, r2
 8002d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d12:	4413      	add	r3, r2
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	61fa      	str	r2, [r7, #28]
 8002d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d26:	f7fd fa61 	bl	80001ec <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d32:	e053      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	617a      	str	r2, [r7, #20]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d46:	f04f 0b00 	mov.w	fp, #0
 8002d4a:	4652      	mov	r2, sl
 8002d4c:	465b      	mov	r3, fp
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	ebb2 080a 	subs.w	r8, r2, sl
 8002d66:	eb63 090b 	sbc.w	r9, r3, fp
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d82:	eb63 0509 	sbc.w	r5, r3, r9
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	00eb      	lsls	r3, r5, #3
 8002d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d94:	00e2      	lsls	r2, r4, #3
 8002d96:	4614      	mov	r4, r2
 8002d98:	461d      	mov	r5, r3
 8002d9a:	eb14 030a 	adds.w	r3, r4, sl
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	eb45 030b 	adc.w	r3, r5, fp
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd0:	f7fd fa0c 	bl	80001ec <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4613      	mov	r3, r2
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3740      	adds	r7, #64	; 0x40
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	00b71b00 	.word	0x00b71b00

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e34:	f7ff fff0 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0a9b      	lsrs	r3, r3, #10
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	080042d0 	.word	0x080042d0

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffdc 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	080042d0 	.word	0x080042d0

08002e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCC_GetClockConfig+0x60>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 020f 	and.w	r2, r3, #15
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40023c00 	.word	0x40023c00

08002ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e041      	b.n	8002f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f839 	bl	8002f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 fac4 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d001      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e04e      	b.n	800304e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_TIM_Base_Start_IT+0xc4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d01d      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_TIM_Base_Start_IT+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_TIM_Base_Start_IT+0xd8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x80>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_TIM_Base_Start_IT+0xdc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d010      	beq.n	800304c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303a:	e007      	b.n	800304c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40010400 	.word	0x40010400
 8003070:	40014000 	.word	0x40014000
 8003074:	40001800 	.word	0x40001800

08003078 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd feea 	bl	8000e78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 f9fa 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d122      	bne.n	8003172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d11b      	bne.n	8003172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0202 	mvn.w	r2, #2
 8003142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f98a 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 800315e:	e005      	b.n	800316c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f97c 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f98d 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d122      	bne.n	80031c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d11b      	bne.n	80031c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0204 	mvn.w	r2, #4
 8003196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f960 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 80031b2:	e005      	b.n	80031c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f952 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f963 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d122      	bne.n	800321a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11b      	bne.n	800321a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f06f 0208 	mvn.w	r2, #8
 80031ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2204      	movs	r2, #4
 80031f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f936 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 8003206:	e005      	b.n	8003214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f928 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f939 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b10      	cmp	r3, #16
 8003226:	d122      	bne.n	800326e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d11b      	bne.n	800326e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0210 	mvn.w	r2, #16
 800323e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2208      	movs	r2, #8
 8003244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f90c 	bl	8003472 <HAL_TIM_IC_CaptureCallback>
 800325a:	e005      	b.n	8003268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8fe 	bl	800345e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f90f 	bl	8003486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10e      	bne.n	800329a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f06f 0201 	mvn.w	r2, #1
 8003292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fc4d 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d10e      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b80      	cmp	r3, #128	; 0x80
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fb45 	bl	8003950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d10e      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8d4 	bl	800349a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d10e      	bne.n	800331e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d107      	bne.n	800331e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f06f 0220 	mvn.w	r2, #32
 8003316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb0f 	bl	800393c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003340:	2302      	movs	r3, #2
 8003342:	e088      	b.n	8003456 <HAL_TIM_IC_ConfigChannel+0x130>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11b      	bne.n	800338a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f000 f945 	bl	80035f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 020c 	bic.w	r2, r2, #12
 8003374:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6999      	ldr	r1, [r3, #24]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
 8003388:	e060      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11c      	bne.n	80033ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f000 f99a 	bl	80036d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	021a      	lsls	r2, r3, #8
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	619a      	str	r2, [r3, #24]
 80033c8:	e040      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f000 f9b7 	bl	8003752 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 020c 	bic.w	r2, r2, #12
 80033f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69d9      	ldr	r1, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	61da      	str	r2, [r3, #28]
 8003406:	e021      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d11c      	bne.n	8003448 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f000 f9d4 	bl	80037ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003430:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	021a      	lsls	r2, r3, #8
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	61da      	str	r2, [r3, #28]
 8003446:	e001      	b.n	800344c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d00f      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02b      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d027      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d023      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01f      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01b      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d017      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <TIM_Base_SetConfig+0x128>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <TIM_Base_SetConfig+0x12c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00f      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <TIM_Base_SetConfig+0x130>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <TIM_Base_SetConfig+0x134>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <TIM_Base_SetConfig+0x138>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <TIM_Base_SetConfig+0x13c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800
 80035e4:	40001800 	.word	0x40001800
 80035e8:	40001c00 	.word	0x40001c00
 80035ec:	40002000 	.word	0x40002000

080035f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <TIM_TI1_SetConfig+0xcc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01b      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d017      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <TIM_TI1_SetConfig+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <TIM_TI1_SetConfig+0xd4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <TIM_TI1_SetConfig+0xd8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <TIM_TI1_SetConfig+0xdc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <TIM_TI1_SetConfig+0xe0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_TI1_SetConfig+0x66>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <TIM_TI1_SetConfig+0xe4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <TIM_TI1_SetConfig+0x6a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <TIM_TI1_SetConfig+0x6c>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e003      	b.n	800367a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	b2db      	uxtb	r3, r3
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f023 030a 	bic.w	r3, r3, #10
 8003694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f003 030a 	and.w	r3, r3, #10
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40010400 	.word	0x40010400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40001800 	.word	0x40001800

080036d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0210 	bic.w	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	031b      	lsls	r3, r3, #12
 800371c:	b29b      	uxth	r3, r3
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	b2db      	uxtb	r3, r3
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003808:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	031b      	lsls	r3, r3, #12
 800380e:	b29b      	uxth	r3, r3
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800381c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e05a      	b.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d01d      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10c      	bne.n	8003900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40001800 	.word	0x40001800

0800393c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e03f      	b.n	80039f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fb48 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	; 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f9cb 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b08a      	sub	sp, #40	; 0x28
 8003a02:	af02      	add	r7, sp, #8
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d17c      	bne.n	8003b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_Transmit+0x2c>
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e075      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x3e>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e06e      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a52:	f7fd fb8d 	bl	8001170 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x82>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a90:	e02a      	b.n	8003ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f8e2 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e036      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e007      	b.n	8003ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cf      	bne.n	8003a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f8b2 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08a      	sub	sp, #40	; 0x28
 8003b26:	af02      	add	r7, sp, #8
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	f040 808c 	bne.w	8003c5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Receive+0x2e>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e084      	b.n	8003c5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive+0x40>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e07d      	b.n	8003c5e <HAL_UART_Receive+0x13c>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2222      	movs	r2, #34	; 0x22
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd faf7 	bl	8001170 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b98:	d108      	bne.n	8003bac <HAL_UART_Receive+0x8a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bbc:	e043      	b.n	8003c46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f84c 	bl	8003c66 <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e042      	b.n	8003c5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e01f      	b.n	8003c38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d007      	beq.n	8003c12 <HAL_UART_Receive+0xf0>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_UART_Receive+0xfe>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e008      	b.n	8003c32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b6      	bne.n	8003bbe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b090      	sub	sp, #64	; 0x40
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	e050      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d04c      	beq.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c86:	f7fd fa73 	bl	8001170 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d241      	bcs.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cb6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cea:	623a      	str	r2, [r7, #32]
 8003cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e00f      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d09f      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3740      	adds	r7, #64	; 0x40
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	; 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	; (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7ff f838 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7ff f81f 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e88:	f7fc f9b0 	bl	80001ec <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f1e:	f7fc f965 	bl	80001ec <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	; 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	; 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fda:	f7fc f907 	bl	80001ec <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	; 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e106      	b.n	800421c <UART_SetConfig+0x4d8>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800409c:	f7fc f8a6 	bl	80001ec <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	; 0x78
 800411a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800413a:	f7fc f857 	bl	80001ec <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b38      	ldr	r3, [pc, #224]	; (8004228 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	; 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	; 0x32
 8004158:	4a33      	ldr	r2, [pc, #204]	; (8004228 <UART_SetConfig+0x4e4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	673b      	str	r3, [r7, #112]	; 0x70
 800416e:	677a      	str	r2, [r7, #116]	; 0x74
 8004170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	415b      	adcs	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b6:	464b      	mov	r3, r9
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ca:	667a      	str	r2, [r7, #100]	; 0x64
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041ea:	f7fb ffff 	bl	80001ec <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	; 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	; 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <memset>:
 800422c:	4402      	add	r2, r0
 800422e:	4603      	mov	r3, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	d100      	bne.n	8004236 <memset+0xa>
 8004234:	4770      	bx	lr
 8004236:	f803 1b01 	strb.w	r1, [r3], #1
 800423a:	e7f9      	b.n	8004230 <memset+0x4>

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4d0d      	ldr	r5, [pc, #52]	; (8004274 <__libc_init_array+0x38>)
 8004240:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004242:	1b64      	subs	r4, r4, r5
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	2600      	movs	r6, #0
 8004248:	42a6      	cmp	r6, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	4d0b      	ldr	r5, [pc, #44]	; (800427c <__libc_init_array+0x40>)
 800424e:	4c0c      	ldr	r4, [pc, #48]	; (8004280 <__libc_init_array+0x44>)
 8004250:	f000 f818 	bl	8004284 <_init>
 8004254:	1b64      	subs	r4, r4, r5
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	2600      	movs	r6, #0
 800425a:	42a6      	cmp	r6, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	f855 3b04 	ldr.w	r3, [r5], #4
 8004264:	4798      	blx	r3
 8004266:	3601      	adds	r6, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	f855 3b04 	ldr.w	r3, [r5], #4
 800426e:	4798      	blx	r3
 8004270:	3601      	adds	r6, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	080042e8 	.word	0x080042e8
 8004278:	080042e8 	.word	0x080042e8
 800427c:	080042e8 	.word	0x080042e8
 8004280:	080042ec 	.word	0x080042ec

08004284 <_init>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

08004290 <_fini>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr
