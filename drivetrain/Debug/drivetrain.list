
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a94  08004a94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000003bc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011726  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002954  00000000  00000000  000317a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea0  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b53  00000000  00000000  00034fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023eea  00000000  00000000  00035af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012a8b  00000000  00000000  000599dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a6a  00000000  00000000  0006c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c14  00000000  00000000  00145ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00149ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004a54 	.word	0x08004a54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004a54 	.word	0x08004a54

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <pid_init>:
	int16_t  target,

	float 	kp,
	float 	ki,
	float 	kd)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b089      	sub	sp, #36	; 0x24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	61f8      	str	r0, [r7, #28]
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	ed87 0a05 	vstr	s0, [r7, #20]
 80004f8:	461a      	mov	r2, r3
 80004fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80004fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8000502:	edc7 1a01 	vstr	s3, [r7, #4]
 8000506:	4603      	mov	r3, r0
 8000508:	837b      	strh	r3, [r7, #26]
 800050a:	460b      	mov	r3, r1
 800050c:	833b      	strh	r3, [r7, #24]
 800050e:	4613      	mov	r3, r2
 8000510:	827b      	strh	r3, [r7, #18]

	pid->MaxOutput = maxout;
 8000512:	8b7b      	ldrh	r3, [r7, #26]
 8000514:	ee07 3a90 	vmov	s15, r3
 8000518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	pid->IntegralLimit = integral_limit;
 8000522:	8b3b      	ldrh	r3, [r7, #24]
 8000524:	ee07 3a90 	vmov	s15, r3
 8000528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	pid->DeadBand = deadband;
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	655a      	str	r2, [r3, #84]	; 0x54
	pid->target = target;
 8000538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	edc3 7a00 	vstr	s15, [r3]

	pid->kp = kp;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	609a      	str	r2, [r3, #8]
	pid->ki = ki;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	60da      	str	r2, [r3, #12]
	pid->kd = kd;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	611a      	str	r2, [r3, #16]

	pid->output = 0;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000564:	bf00      	nop
 8000566:	3724      	adds	r7, #36	; 0x24
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000576:	4a2b      	ldr	r2, [pc, #172]	; (8000624 <MX_CAN1_Init+0xb4>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <MX_CAN1_Init+0xb0>)
 800057c:	2203      	movs	r2, #3
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <MX_CAN1_Init+0xb0>)
 800058e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000596:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800059a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_CAN1_Init+0xb0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <MX_CAN1_Init+0xb0>)
 80005c2:	f000 ff71 	bl	80014a8 <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 fc1e 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterBank = 0;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005de:	2201      	movs	r2, #1
 80005e0:	61da      	str	r2, [r3, #28]
  canfilter1.FilterIdHigh = 0x0000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  canfilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_CAN1_Init+0xb8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_CAN1_Init+0xb8>)
 8000602:	2201      	movs	r2, #1
 8000604:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &canfilter1);
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <MX_CAN1_Init+0xb8>)
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CAN1_Init+0xb0>)
 800060a:	f001 f849 	bl	80016a0 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1); //start CAN
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000610:	f001 f926 	bl	8001860 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate CAN receive interrupt for encoder data
 8000614:	2102      	movs	r1, #2
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <MX_CAN1_Init+0xb0>)
 8000618:	f001 fb53 	bl	8001cc2 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000002c 	.word	0x2000002c
 8000624:	40006400 	.word	0x40006400
 8000628:	20000054 	.word	0x20000054

0800062c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d13b      	bne.n	80006c6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000686:	2303      	movs	r3, #3
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000696:	2309      	movs	r3, #9
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <HAL_CAN_MspInit+0xac>)
 80006a2:	f002 f92f 	bl	8002904 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	2013      	movs	r0, #19
 80006ac:	f001 fe16 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006b0:	2013      	movs	r0, #19
 80006b2:	f001 fe2f 	bl	8002314 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	2014      	movs	r0, #20
 80006bc:	f001 fe0e 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006c0:	2014      	movs	r0, #20
 80006c2:	f001 fe27 	bl	8002314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020c00 	.word	0x40020c00

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x3c>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	2045      	movs	r0, #69	; 0x45
 8000704:	f001 fdea 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000708:	2045      	movs	r0, #69	; 0x45
 800070a:	f001 fe03 	bl	8002314 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_GPIO_Init+0x140>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a48      	ldr	r2, [pc, #288]	; (800085c <MX_GPIO_Init+0x140>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <MX_GPIO_Init+0x140>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b42      	ldr	r3, [pc, #264]	; (800085c <MX_GPIO_Init+0x140>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a41      	ldr	r2, [pc, #260]	; (800085c <MX_GPIO_Init+0x140>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3f      	ldr	r3, [pc, #252]	; (800085c <MX_GPIO_Init+0x140>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b3b      	ldr	r3, [pc, #236]	; (800085c <MX_GPIO_Init+0x140>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a3a      	ldr	r2, [pc, #232]	; (800085c <MX_GPIO_Init+0x140>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <MX_GPIO_Init+0x140>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_GPIO_Init+0x140>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <MX_GPIO_Init+0x140>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <MX_GPIO_Init+0x140>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <MX_GPIO_Init+0x140>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <MX_GPIO_Init+0x140>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_GPIO_Init+0x140>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	4826      	ldr	r0, [pc, #152]	; (8000860 <MX_GPIO_Init+0x144>)
 80007c6:	f002 fa49 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d0:	4824      	ldr	r0, [pc, #144]	; (8000864 <MX_GPIO_Init+0x148>)
 80007d2:	f002 fa43 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	213c      	movs	r1, #60	; 0x3c
 80007da:	4823      	ldr	r0, [pc, #140]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007dc:	f002 fa3e 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 80007e0:	233c      	movs	r3, #60	; 0x3c
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_GPIO_Init+0x14c>)
 80007f8:	f002 f884 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <MX_GPIO_Init+0x150>)
 8000812:	f002 f877 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x144>)
 8000830:	f002 f868 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_GPIO_Init+0x148>)
 800084e:	f002 f859 	bl	8002904 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40021400 	.word	0x40021400
 8000864:	40021000 	.word	0x40021000
 8000868:	40021c00 	.word	0x40021c00
 800086c:	40020c00 	.word	0x40020c00

08000870 <HAL_UART_RxCpltCallback>:
  * @retval int
  */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (uart_rx_buffer[0] == headers[0]){
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <HAL_UART_RxCpltCallback+0xcc>)
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <HAL_UART_RxCpltCallback+0xd0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d151      	bne.n	8000928 <HAL_UART_RxCpltCallback+0xb8>
		for (int i = 0; i<8; i++){
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e00b      	b.n	80008a2 <HAL_UART_RxCpltCallback+0x32>
			motorCurrents[i] = uart_rx_buffer[i+1];
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	4a2b      	ldr	r2, [pc, #172]	; (800093c <HAL_UART_RxCpltCallback+0xcc>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	b219      	sxth	r1, r3
 8000894:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <HAL_UART_RxCpltCallback+0xd4>)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i<8; i++){
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	ddf0      	ble.n	800088a <HAL_UART_RxCpltCallback+0x1a>
		}
		uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 80008a8:	2301      	movs	r3, #1
 80008aa:	723b      	strb	r3, [r7, #8]
 80008ac:	2301      	movs	r3, #1
 80008ae:	727b      	strb	r3, [r7, #9]
 80008b0:	2301      	movs	r3, #1
 80008b2:	72bb      	strb	r3, [r7, #10]
 80008b4:	2301      	movs	r3, #1
 80008b6:	72fb      	strb	r3, [r7, #11]
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	733b      	strb	r3, [r7, #12]
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	737b      	strb	r3, [r7, #13]
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008d2:	885b      	ldrh	r3, [r3, #2]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	121b      	asrs	r3, r3, #8
 80008d8:	b21b      	sxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008e0:	885b      	ldrh	r3, [r3, #2]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008ea:	889b      	ldrh	r3, [r3, #4]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	121b      	asrs	r3, r3, #8
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	743b      	strb	r3, [r7, #16]
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	747b      	strb	r3, [r7, #17]
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 8000902:	88db      	ldrh	r3, [r3, #6]
 8000904:	b21b      	sxth	r3, r3
 8000906:	121b      	asrs	r3, r3, #8
 8000908:	b21b      	sxth	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	74bb      	strb	r3, [r7, #18]
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_RxCpltCallback+0xd8>)
 8000910:	88db      	ldrh	r3, [r3, #6]
 8000912:	b21b      	sxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 8000918:	f107 0108 	add.w	r1, r7, #8
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	220c      	movs	r2, #12
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <HAL_UART_RxCpltCallback+0xdc>)
 8000924:	f003 fbe5 	bl	80040f2 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
 8000928:	2209      	movs	r2, #9
 800092a:	4904      	ldr	r1, [pc, #16]	; (800093c <HAL_UART_RxCpltCallback+0xcc>)
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <HAL_UART_RxCpltCallback+0xdc>)
 800092e:	f003 fd14 	bl	800435a <HAL_UART_Receive_IT>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000288 	.word	0x20000288
 8000940:	20000000 	.word	0x20000000
 8000944:	200000e8 	.word	0x200000e8
 8000948:	200000d0 	.word	0x200000d0
 800094c:	20000384 	.word	0x20000384

08000950 <main>:


int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fd41 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f961 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f7ff fedd 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f7ff febb 	bl	80006dc <MX_DMA_Init>
  MX_CAN1_Init();
 8000966:	f7ff fe03 	bl	8000570 <MX_CAN1_Init>
  MX_TIM1_Init();
 800096a:	f000 fb69 	bl	8001040 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800096e:	f000 fc91 	bl	8001294 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 8000972:	2104      	movs	r1, #4
 8000974:	4864      	ldr	r0, [pc, #400]	; (8000b08 <main+0x1b8>)
 8000976:	f002 f98a 	bl	8002c8e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 800097a:	2108      	movs	r1, #8
 800097c:	4862      	ldr	r0, [pc, #392]	; (8000b08 <main+0x1b8>)
 800097e:	f002 f986 	bl	8002c8e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 8000982:	2110      	movs	r1, #16
 8000984:	4860      	ldr	r0, [pc, #384]	; (8000b08 <main+0x1b8>)
 8000986:	f002 f982 	bl	8002c8e <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 800098a:	2120      	movs	r1, #32
 800098c:	485e      	ldr	r0, [pc, #376]	; (8000b08 <main+0x1b8>)
 800098e:	f002 f97e 	bl	8002c8e <HAL_GPIO_TogglePin>

  //CAN setup
  canTxHeader.DLC = 8;
 8000992:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <main+0x1bc>)
 8000994:	2208      	movs	r2, #8
 8000996:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 8000998:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <main+0x1bc>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 800099e:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <main+0x1bc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 80009a4:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <main+0x1bc>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 80009ac:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <main+0x1bc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	751a      	strb	r2, [r3, #20]

  //PID Setup
  for (int i = 0; i < 4; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
 80009b6:	e007      	b.n	80009c8 <main+0x78>
        speed_data[i] = 100;
 80009b8:	4a55      	ldr	r2, [pc, #340]	; (8000b10 <main+0x1c0>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	2164      	movs	r1, #100	; 0x64
 80009be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++) {
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	3301      	adds	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	ddf4      	ble.n	80009b8 <main+0x68>
  }
  pid_init(&motor_pid[0],10000,5000,20,0,0.09,0.5,0);
 80009ce:	eddf 1a51 	vldr	s3, [pc, #324]	; 8000b14 <main+0x1c4>
 80009d2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80009d6:	eddf 0a50 	vldr	s1, [pc, #320]	; 8000b18 <main+0x1c8>
 80009da:	2300      	movs	r3, #0
 80009dc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80009e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80009e8:	484c      	ldr	r0, [pc, #304]	; (8000b1c <main+0x1cc>)
 80009ea:	f7ff fd7d 	bl	80004e8 <pid_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //runMotors(0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
  //uint8_t feedback[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);   //Uncomment to start the UART interrupt tests
  for (int i = 0; i < 4; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e010      	b.n	8000a16 <main+0xc6>
	  /*
	  if (i%2 == 0){
		  targetSpeeds[i] = -100;
	  }
	  else{*/
	  targetSpeeds[i] = 100;
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <main+0x1d0>)
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  motor_pid[i].output = 1000;
 80009fe:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <main+0x1cc>)
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	2164      	movs	r1, #100	; 0x64
 8000a04:	fb01 f303 	mul.w	r3, r1, r3
 8000a08:	4413      	add	r3, r2
 8000a0a:	3344      	adds	r3, #68	; 0x44
 8000a0c:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <main+0x1d4>)
 8000a0e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	3301      	adds	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	ddeb      	ble.n	80009f4 <main+0xa4>


	  //uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
	  //HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
	   //UART Receive code, uncomment this block and comment out other parts to test UART
	  HAL_UART_Receive(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE, 1000);
 8000a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a20:	2209      	movs	r2, #9
 8000a22:	4941      	ldr	r1, [pc, #260]	; (8000b28 <main+0x1d8>)
 8000a24:	4841      	ldr	r0, [pc, #260]	; (8000b2c <main+0x1dc>)
 8000a26:	f003 fbf6 	bl	8004216 <HAL_UART_Receive>
	  if (uart_rx_buffer[0] == headers[0]){
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <main+0x1d8>)
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <main+0x1e0>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d164      	bne.n	8000b00 <main+0x1b0>
		  int motorSpeed1 = (uart_rx_buffer[1] << 8) | uart_rx_buffer[2];
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <main+0x1d8>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <main+0x1d8>)
 8000a3e:	7892      	ldrb	r2, [r2, #2]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61fb      	str	r3, [r7, #28]
		  int motorSpeed2 = (uart_rx_buffer[3] << 8) | uart_rx_buffer[4];
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <main+0x1d8>)
 8000a46:	78db      	ldrb	r3, [r3, #3]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	4a37      	ldr	r2, [pc, #220]	; (8000b28 <main+0x1d8>)
 8000a4c:	7912      	ldrb	r2, [r2, #4]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
		  int motorSpeed3 = (uart_rx_buffer[5] << 8) | uart_rx_buffer[6];
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <main+0x1d8>)
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <main+0x1d8>)
 8000a5a:	7992      	ldrb	r2, [r2, #6]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	617b      	str	r3, [r7, #20]
		  int motorSpeed4 = (uart_rx_buffer[7] << 8) | uart_rx_buffer[8];
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <main+0x1d8>)
 8000a62:	79db      	ldrb	r3, [r3, #7]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <main+0x1d8>)
 8000a68:	7a12      	ldrb	r2, [r2, #8]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
		  setMotorSpeeds(motorSpeed1, motorSpeed2, motorSpeed3, motorSpeed4);
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	b218      	sxth	r0, r3
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	b219      	sxth	r1, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	f000 f939 	bl	8000cf4 <setMotorSpeeds>
		  uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 8000a82:	2301      	movs	r3, #1
 8000a84:	713b      	strb	r3, [r7, #4]
 8000a86:	2301      	movs	r3, #1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <main+0x1c0>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	121b      	asrs	r3, r3, #8
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	723b      	strb	r3, [r7, #8]
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <main+0x1c0>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	727b      	strb	r3, [r7, #9]
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <main+0x1c0>)
 8000aac:	885b      	ldrh	r3, [r3, #2]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	121b      	asrs	r3, r3, #8
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	72bb      	strb	r3, [r7, #10]
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <main+0x1c0>)
 8000aba:	885b      	ldrh	r3, [r3, #2]
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	72fb      	strb	r3, [r7, #11]
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <main+0x1c0>)
 8000ac4:	889b      	ldrh	r3, [r3, #4]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	121b      	asrs	r3, r3, #8
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	733b      	strb	r3, [r7, #12]
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <main+0x1c0>)
 8000ad2:	889b      	ldrh	r3, [r3, #4]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	737b      	strb	r3, [r7, #13]
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <main+0x1c0>)
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	121b      	asrs	r3, r3, #8
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	73bb      	strb	r3, [r7, #14]
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <main+0x1c0>)
 8000aea:	88db      	ldrh	r3, [r3, #6]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	73fb      	strb	r3, [r7, #15]
		  //runMotors(uart_rx_buffer[1], uart_rx_buffer[2], uart_rx_buffer[3], uart_rx_buffer[4], uart_rx_buffer[5], uart_rx_buffer[6], uart_rx_buffer[7], uart_rx_buffer[8]);
		  HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 8000af2:	1d39      	adds	r1, r7, #4
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	220c      	movs	r2, #12
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <main+0x1dc>)
 8000afc:	f003 faf9 	bl	80040f2 <HAL_UART_Transmit>
	  }
	  HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fcad 	bl	8001460 <HAL_Delay>
	  HAL_UART_Receive(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE, 1000);
 8000b06:	e789      	b.n	8000a1c <main+0xcc>
 8000b08:	40021c00 	.word	0x40021c00
 8000b0c:	2000007c 	.word	0x2000007c
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	00000000 	.word	0x00000000
 8000b18:	3db851ec 	.word	0x3db851ec
 8000b1c:	200000f8 	.word	0x200000f8
 8000b20:	200000f0 	.word	0x200000f0
 8000b24:	447a0000 	.word	0x447a0000
 8000b28:	20000288 	.word	0x20000288
 8000b2c:	20000384 	.word	0x20000384
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_CAN_RxFifo0MsgPendingCallback>:
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
    if(hcan == &hcan1) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d15a      	bne.n	8000bfa <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, CAN_RxData);
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000b46:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b4c:	f000 ffa7 	bl	8001a9e <HAL_CAN_GetRxMessage>

        if(canRxHeader.StdId == 0x201) motor_idx = 0;
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f240 2201 	movw	r2, #513	; 0x201
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d102      	bne.n	8000b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x202) motor_idx = 1;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f240 2202 	movw	r2, #514	; 0x202
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d102      	bne.n	8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 2;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f240 2203 	movw	r2, #515	; 0x203
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d102      	bne.n	8000b86 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x204) motor_idx = 3;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000b8e:	d102      	bne.n	8000b96 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000b92:	2203      	movs	r2, #3
 8000b94:	701a      	strb	r2, [r3, #0]

        angle_data[motor_idx] = (uint16_t)(CAN_RxData[0]<<8 | CAN_RxData[1]);
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b219      	sxth	r1, r3
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	b289      	uxth	r1, r1
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000bb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        speed_data[motor_idx] = (int16_t)(CAN_RxData[2]<<8 | CAN_RxData[3]); // originally rpm
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000bc2:	78db      	ldrb	r3, [r3, #3]
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4912      	ldr	r1, [pc, #72]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000bc8:	7809      	ldrb	r1, [r1, #0]
 8000bca:	b2c9      	uxtb	r1, r1
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000bd2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        torque_current_data[motor_idx] = (CAN_RxData[4]<<8 | CAN_RxData[5]);
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000bde:	7952      	ldrb	r2, [r2, #5]
 8000be0:	431a      	orrs	r2, r3
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	ee07 2a90 	vmov	s15, r2
 8000bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000002c 	.word	0x2000002c
 8000c08:	200000bc 	.word	0x200000bc
 8000c0c:	20000094 	.word	0x20000094
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	200000c8 	.word	0x200000c8
 8000c18:	200000d0 	.word	0x200000d0
 8000c1c:	200000d8 	.word	0x200000d8

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fee4 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000c90:	2306      	movs	r3, #6
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c94:	23a8      	movs	r3, #168	; 0xa8
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 f80d 	bl	8002cc4 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cb0:	f000 f8ac 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fa6e 	bl	80031b4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cde:	f000 f895 	bl	8000e0c <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <setMotorSpeeds>:
	CAN_TxData[7] = (motorSpeed);

	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
}

void setMotorSpeeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4){
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	4611      	mov	r1, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4623      	mov	r3, r4
 8000d04:	80fb      	strh	r3, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	80bb      	strh	r3, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	807b      	strh	r3, [r7, #2]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	803b      	strh	r3, [r7, #0]
	uint8_t h1 = ms1 >> 8;
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	121b      	asrs	r3, r3, #8
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	73fb      	strb	r3, [r7, #15]
	uint8_t l1 = ms1;
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	73bb      	strb	r3, [r7, #14]
	uint8_t h2 = ms2 >> 8;
 8000d20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d24:	121b      	asrs	r3, r3, #8
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	737b      	strb	r3, [r7, #13]
	uint8_t l2 = ms2;
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	733b      	strb	r3, [r7, #12]
	uint8_t h3 = ms3 >> 8;
 8000d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d32:	121b      	asrs	r3, r3, #8
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	72fb      	strb	r3, [r7, #11]
	uint8_t l3 = ms3;
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	72bb      	strb	r3, [r7, #10]
	uint8_t h4 = ms4 >> 8;
 8000d3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d40:	121b      	asrs	r3, r3, #8
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	727b      	strb	r3, [r7, #9]
	uint8_t l4 = ms4;
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	723b      	strb	r3, [r7, #8]
	runMotors(h1,l1,h2,l2,h3,l3,h4,l4);
 8000d4a:	7b3c      	ldrb	r4, [r7, #12]
 8000d4c:	7b7a      	ldrb	r2, [r7, #13]
 8000d4e:	7bb9      	ldrb	r1, [r7, #14]
 8000d50:	7bf8      	ldrb	r0, [r7, #15]
 8000d52:	7a3b      	ldrb	r3, [r7, #8]
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	7a7b      	ldrb	r3, [r7, #9]
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4623      	mov	r3, r4
 8000d64:	f000 f804 	bl	8000d70 <runMotors>
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <runMotors>:

void runMotors(unsigned char motorOneHigh, unsigned char motorOneLow, unsigned char motorTwoHigh, unsigned char motorTwoLow, unsigned char motorThreeHigh, unsigned char motorThreeLow, unsigned char motorFourHigh, unsigned char motorFourLow){          //speed can be 16 bits, split into high and low bytes
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	4603      	mov	r3, r0
 8000d84:	71bb      	strb	r3, [r7, #6]
 8000d86:	460b      	mov	r3, r1
 8000d88:	717b      	strb	r3, [r7, #5]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	713b      	strb	r3, [r7, #4]
	CAN_TxData[0] = motorOneHigh;  //high byte for speed, shifted 8 because only buffer is only 8 bits
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <runMotors+0x68>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	7013      	strb	r3, [r2, #0]
	CAN_TxData[1] = motorOneLow;       //low bytes for speed
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <runMotors+0x68>)
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	7053      	strb	r3, [r2, #1]
	CAN_TxData[2] = motorTwoHigh;
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <runMotors+0x68>)
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	7093      	strb	r3, [r2, #2]
	CAN_TxData[3] = motorTwoLow;
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <runMotors+0x68>)
 8000da2:	793b      	ldrb	r3, [r7, #4]
 8000da4:	70d3      	strb	r3, [r2, #3]
	CAN_TxData[4] = motorThreeHigh;
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <runMotors+0x68>)
 8000da8:	7e3b      	ldrb	r3, [r7, #24]
 8000daa:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = motorThreeLow;
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <runMotors+0x68>)
 8000dae:	7f3b      	ldrb	r3, [r7, #28]
 8000db0:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = motorFourHigh;
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <runMotors+0x68>)
 8000db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000db8:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = motorFourLow;
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <runMotors+0x68>)
 8000dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dc0:	71d3      	strb	r3, [r2, #7]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <runMotors+0x6c>)
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <runMotors+0x68>)
 8000dc6:	4906      	ldr	r1, [pc, #24]	; (8000de0 <runMotors+0x70>)
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <runMotors+0x74>)
 8000dca:	f000 fd8d 	bl	80018e8 <HAL_CAN_AddTxMessage>
	while(i < 100000){
		HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
	    HAL_Delay(0.5);
	    i++;
	}*/
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	200000b0 	.word	0x200000b0
 8000de0:	2000007c 	.word	0x2000007c
 8000de4:	2000002c 	.word	0x2000002c

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfa:	f000 fb11 	bl	8001420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40001000 	.word	0x40001000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <HAL_InitTick+0xe4>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <HAL_InitTick+0xe4>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_InitTick+0xe4>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e94:	f107 0210 	add.w	r2, r7, #16
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fb68 	bl	8003574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eae:	f002 fb39 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8000eb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000eb4:	e004      	b.n	8000ec0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb6:	f002 fb35 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec2:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <HAL_InitTick+0xe8>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	0c9b      	lsrs	r3, r3, #18
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_InitTick+0xec>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <HAL_InitTick+0xf0>)
 8000ed2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_InitTick+0xec>)
 8000ed6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_InitTick+0xec>)
 8000ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_InitTick+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_InitTick+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_InitTick+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <HAL_InitTick+0xec>)
 8000ef6:	f002 fb6f 	bl	80035d8 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11b      	bne.n	8000f40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f08:	4812      	ldr	r0, [pc, #72]	; (8000f54 <HAL_InitTick+0xec>)
 8000f0a:	f002 fbbf 	bl	800368c <HAL_TIM_Base_Start_IT>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d111      	bne.n	8000f40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f1c:	2036      	movs	r0, #54	; 0x36
 8000f1e:	f001 f9f9 	bl	8002314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d808      	bhi.n	8000f3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f001 f9d5 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_InitTick+0xf4>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e002      	b.n	8000f40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	431bde83 	.word	0x431bde83
 8000f54:	20000294 	.word	0x20000294
 8000f58:	40001000 	.word	0x40001000
 8000f5c:	20000008 	.word	0x20000008

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <CAN1_TX_IRQHandler+0x10>)
 8000fbe:	f000 fea6 	bl	8001d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000002c 	.word	0x2000002c

08000fcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <CAN1_RX0_IRQHandler+0x10>)
 8000fd2:	f000 fe9c 	bl	8001d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000002c 	.word	0x2000002c

08000fe0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART2_IRQHandler+0x10>)
 8000fe6:	f7ff fc43 	bl	8000870 <HAL_UART_RxCpltCallback>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000384 	.word	0x20000384

08000ff4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <TIM6_DAC_IRQHandler+0x10>)
 8000ffa:	f002 fc06 	bl	800380a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000294 	.word	0x20000294

08001008 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA2_Stream6_IRQHandler+0x10>)
 800100e:	f001 fa3d 	bl	800248c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000324 	.word	0x20000324

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_TIM1_Init+0xf8>)
 800105e:	4a37      	ldr	r2, [pc, #220]	; (800113c <MX_TIM1_Init+0xfc>)
 8001060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001064:	2209      	movs	r2, #9
 8001066:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_TIM1_Init+0xf8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001070:	f242 720f 	movw	r2, #9999	; 0x270f
 8001074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_TIM1_Init+0xf8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <MX_TIM1_Init+0xf8>)
 800108a:	f002 fb6f 	bl	800376c <HAL_TIM_IC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001094:	f7ff feba 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4824      	ldr	r0, [pc, #144]	; (8001138 <MX_TIM1_Init+0xf8>)
 80010a8:	f002 ff46 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010b2:	f7ff feab 	bl	8000e0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	481a      	ldr	r0, [pc, #104]	; (8001138 <MX_TIM1_Init+0xf8>)
 80010ce:	f002 fca4 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80010d8:	f7ff fe98 	bl	8000e0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010dc:	230a      	movs	r3, #10
 80010de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e0:	2301      	movs	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	2204      	movs	r2, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM1_Init+0xf8>)
 80010ec:	f002 fc95 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80010f6:	f7ff fe89 	bl	8000e0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001106:	f002 fc88 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001110:	f7ff fe7c 	bl	8000e0c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001114:	2302      	movs	r3, #2
 8001116:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	220c      	movs	r2, #12
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_TIM1_Init+0xf8>)
 8001120:	f002 fc7b 	bl	8003a1a <HAL_TIM_IC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800112a:	f7ff fe6f 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200002dc 	.word	0x200002dc
 800113c:	40010000 	.word	0x40010000

08001140 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a47      	ldr	r2, [pc, #284]	; (800127c <HAL_TIM_IC_MspInit+0x13c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 8088 	bne.w	8001274 <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	4b45      	ldr	r3, [pc, #276]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6453      	str	r3, [r2, #68]	; 0x44
 8001174:	4b42      	ldr	r3, [pc, #264]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a3d      	ldr	r2, [pc, #244]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a36      	ldr	r2, [pc, #216]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <HAL_TIM_IC_MspInit+0x140>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	482b      	ldr	r0, [pc, #172]	; (8001284 <HAL_TIM_IC_MspInit+0x144>)
 80011d6:	f001 fb95 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4824      	ldr	r0, [pc, #144]	; (8001288 <HAL_TIM_IC_MspInit+0x148>)
 80011f8:	f001 fb84 	bl	8002904 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_TIM_IC_MspInit+0x150>)
 8001200:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 800121e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001222:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001242:	f001 f875 	bl	8002330 <HAL_DMA_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 800124c:	f7ff fdde 	bl	8000e0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
 8001256:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_TIM_IC_MspInit+0x14c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40010000 	.word	0x40010000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000
 8001288:	40021000 	.word	0x40021000
 800128c:	20000324 	.word	0x20000324
 8001290:	400264a0 	.word	0x400264a0

08001294 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART2_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012cc:	f002 fec4 	bl	8004058 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d6:	f7ff fd99 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000384 	.word	0x20000384
 80012e4:	40004400 	.word	0x40004400

080012e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_UART_MspInit+0x94>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d133      	bne.n	8001372 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_UART_MspInit+0x98>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_UART_MspInit+0x98>)
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_MspInit+0x98>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_UART_MspInit+0x98>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_UART_MspInit+0x98>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_UART_MspInit+0x98>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_UART_MspInit+0x9c>)
 800135e:	f001 fad1 	bl	8002904 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
      HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2026      	movs	r0, #38	; 0x26
 8001368:	f000 ffb8 	bl	80022dc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 800136c:	2026      	movs	r0, #38	; 0x26
 800136e:	f000 ffd1 	bl	8002314 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40004400 	.word	0x40004400
 8001380:	40023800 	.word	0x40023800
 8001384:	40020c00 	.word	0x40020c00

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a4:	4c0b      	ldr	r4, [pc, #44]	; (80013d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b2:	f7ff fe33 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f003 fb29 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff fac9 	bl	8000950 <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013cc:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 80013d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013d4:	200003cc 	.word	0x200003cc

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_Init+0x40>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x40>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x40>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 ff5e 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f7ff fd2c 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fd02 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2000000c 	.word	0x2000000c
 8001444:	200003c8 	.word	0x200003c8

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200003c8 	.word	0x200003c8

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000000c 	.word	0x2000000c

080014a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0ed      	b.n	8001696 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f8b0 	bl	800062c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014dc:	f7ff ffb4 	bl	8001448 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e2:	e012      	b.n	800150a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e4:	f7ff ffb0 	bl	8001448 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b0a      	cmp	r3, #10
 80014f0:	d90b      	bls.n	800150a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2205      	movs	r2, #5
 8001502:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0c5      	b.n	8001696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0e5      	beq.n	80014e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0202 	bic.w	r2, r2, #2
 8001526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001528:	f7ff ff8e 	bl	8001448 <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800152e:	e012      	b.n	8001556 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001530:	f7ff ff8a 	bl	8001448 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b0a      	cmp	r3, #10
 800153c:	d90b      	bls.n	8001556 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2205      	movs	r2, #5
 800154e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e09f      	b.n	8001696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e1b      	ldrb	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7e5b      	ldrb	r3, [r3, #25]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7e9b      	ldrb	r3, [r3, #26]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0220 	orr.w	r2, r2, #32
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e007      	b.n	80015e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0220 	bic.w	r2, r2, #32
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7edb      	ldrb	r3, [r3, #27]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0210 	bic.w	r2, r2, #16
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e007      	b.n	800160c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0210 	orr.w	r2, r2, #16
 800160a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7f1b      	ldrb	r3, [r3, #28]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0208 	orr.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7f5b      	ldrb	r3, [r3, #29]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0204 	orr.w	r2, r2, #4
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0204 	bic.w	r2, r2, #4
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	ea42 0103 	orr.w	r1, r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d003      	beq.n	80016c6 <HAL_CAN_ConfigFilter+0x26>
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	f040 80be 	bne.w	8001842 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_CAN_ConfigFilter+0x1bc>)
 80016c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2201      	movs	r2, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d123      	bne.n	8001770 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800174a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3248      	adds	r2, #72	; 0x48
 8001750:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001764:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	3348      	adds	r3, #72	; 0x48
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d122      	bne.n	80017be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001798:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3248      	adds	r2, #72	; 0x48
 800179e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b4:	6979      	ldr	r1, [r7, #20]
 80017b6:	3348      	adds	r3, #72	; 0x48
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017d8:	e007      	b.n	80017ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001804:	e007      	b.n	8001816 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	431a      	orrs	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	431a      	orrs	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001834:	f023 0201 	bic.w	r2, r3, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e006      	b.n	8001850 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
  }
}
 8001850:	4618      	mov	r0, r3
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40006400 	.word	0x40006400

08001860 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d12e      	bne.n	80018d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fddc 	bl	8001448 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001892:	e012      	b.n	80018ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001894:	f7ff fdd8 	bl	8001448 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90b      	bls.n	80018ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2205      	movs	r2, #5
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e012      	b.n	80018e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e5      	bne.n	8001894 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e006      	b.n	80018e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d003      	beq.n	8001914 <HAL_CAN_AddTxMessage+0x2c>
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	2b02      	cmp	r3, #2
 8001910:	f040 80b8 	bne.w	8001a84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a0 	beq.w	8001a74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	0e1b      	lsrs	r3, r3, #24
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d907      	bls.n	8001954 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e09e      	b.n	8001a92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001954:	2201      	movs	r2, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	409a      	lsls	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	6809      	ldr	r1, [r1, #0]
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3318      	adds	r3, #24
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	440b      	add	r3, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e00f      	b.n	80019a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800198c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001992:	68f9      	ldr	r1, [r7, #12]
 8001994:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001996:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3318      	adds	r3, #24
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	440b      	add	r3, r1
 80019a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3318      	adds	r3, #24
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	440b      	add	r3, r1
 80019b2:	3304      	adds	r3, #4
 80019b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	7d1b      	ldrb	r3, [r3, #20]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d111      	bne.n	80019e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3318      	adds	r3, #24
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	3304      	adds	r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6811      	ldr	r1, [r2, #0]
 80019d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3318      	adds	r3, #24
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	440b      	add	r3, r1
 80019de:	3304      	adds	r3, #4
 80019e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3307      	adds	r3, #7
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3306      	adds	r3, #6
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3305      	adds	r3, #5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4313      	orrs	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3204      	adds	r2, #4
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	4610      	mov	r0, r2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	ea43 0200 	orr.w	r2, r3, r0
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	061a      	lsls	r2, r3, #24
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3302      	adds	r3, #2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	4313      	orrs	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	6811      	ldr	r1, [r2, #0]
 8001a40:	ea43 0200 	orr.w	r2, r3, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3318      	adds	r3, #24
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3318      	adds	r3, #24
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	440b      	add	r3, r1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e00e      	b.n	8001a92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e006      	b.n	8001a92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d003      	beq.n	8001ac2 <HAL_CAN_GetRxMessage+0x24>
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	f040 80f3 	bne.w	8001ca8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0e7      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0d8      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	331b      	adds	r3, #27
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0204 	and.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	331b      	adds	r3, #27
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0d5b      	lsrs	r3, r3, #21
 8001b32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	331b      	adds	r3, #27
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	331b      	adds	r3, #27
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0202 	and.w	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	331b      	adds	r3, #27
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	331b      	adds	r3, #27
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0a1a      	lsrs	r2, r3, #8
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0c1a      	lsrs	r2, r3, #16
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e1a      	lsrs	r2, r3, #24
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3303      	adds	r3, #3
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0a1a      	lsrs	r2, r3, #8
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3305      	adds	r3, #5
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1a      	lsrs	r2, r3, #16
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e1a      	lsrs	r2, r3, #24
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3307      	adds	r3, #7
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e006      	b.n	8001cb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d002      	beq.n	8001ce0 <HAL_CAN_ActivateNotification+0x1e>
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d109      	bne.n	8001cf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6959      	ldr	r1, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e006      	b.n	8001d02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b08a      	sub	sp, #40	; 0x28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07c      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d023      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f983 	bl	800207c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d76:	e016      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e00c      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e002      	b.n	8001da6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f989 	bl	80020b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f963 	bl	8002090 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dca:	e016      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e00c      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e002      	b.n	8001dfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f969 	bl	80020cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f943 	bl	80020a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e1e:	e016      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00c      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e002      	b.n	8001e4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f949 	bl	80020e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f930 	bl	80020f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe fe41 	bl	8000b34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00c      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f912 	bl	800211c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8f9 	bl	8002108 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8fc 	bl	8002130 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8f5 	bl	8002144 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d07b      	beq.n	800205c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d072      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d043      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03e      	beq.n	8002054 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fdc:	2b60      	cmp	r3, #96	; 0x60
 8001fde:	d02b      	beq.n	8002038 <HAL_CAN_IRQHandler+0x32a>
 8001fe0:	2b60      	cmp	r3, #96	; 0x60
 8001fe2:	d82e      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001fe4:	2b50      	cmp	r3, #80	; 0x50
 8001fe6:	d022      	beq.n	800202e <HAL_CAN_IRQHandler+0x320>
 8001fe8:	2b50      	cmp	r3, #80	; 0x50
 8001fea:	d82a      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d019      	beq.n	8002024 <HAL_CAN_IRQHandler+0x316>
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d826      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001ff4:	2b30      	cmp	r3, #48	; 0x30
 8001ff6:	d010      	beq.n	800201a <HAL_CAN_IRQHandler+0x30c>
 8001ff8:	2b30      	cmp	r3, #48	; 0x30
 8001ffa:	d822      	bhi.n	8002042 <HAL_CAN_IRQHandler+0x334>
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d002      	beq.n	8002006 <HAL_CAN_IRQHandler+0x2f8>
 8002000:	2b20      	cmp	r3, #32
 8002002:	d005      	beq.n	8002010 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002004:	e01d      	b.n	8002042 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800200e:	e019      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002018:	e014      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002022:	e00f      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800202c:	e00a      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002036:	e005      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002040:	e000      	b.n	8002044 <HAL_CAN_IRQHandler+0x336>
            break;
 8002042:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002052:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f872 	bl	8002158 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ee:	f7ff ff61 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff ffb1 	bl	8002260 <NVIC_EncodePriority>
 80022fe:	4602      	mov	r2, r0
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff80 	bl	800220c <__NVIC_SetPriority>
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff54 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff f884 	bl	8001448 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e099      	b.n	8002480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236c:	e00f      	b.n	800238e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236e:	f7ff f86b 	bl	8001448 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d908      	bls.n	800238e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e078      	b.n	8002480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e8      	bne.n	800236e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_DMA_Init+0x158>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0307 	bic.w	r3, r3, #7
 800240e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b04      	cmp	r3, #4
 8002420:	d117      	bne.n	8002452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f9e9 	bl	800280c <DMA_CheckFifoParam>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800244e:	2301      	movs	r3, #1
 8002450:	e016      	b.n	8002480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9a0 	bl	80027a0 <DMA_CalcBaseAndBitshift>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	223f      	movs	r2, #63	; 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	f010803f 	.word	0xf010803f

0800248c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002498:	4b8e      	ldr	r3, [pc, #568]	; (80026d4 <HAL_DMA_IRQHandler+0x248>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a8e      	ldr	r2, [pc, #568]	; (80026d8 <HAL_DMA_IRQHandler+0x24c>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0a9b      	lsrs	r3, r3, #10
 80024a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2208      	movs	r2, #8
 80024b8:	409a      	lsls	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01a      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2208      	movs	r2, #8
 80024e6:	409a      	lsls	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	2201      	movs	r2, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f043 0202 	orr.w	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2204      	movs	r2, #4
 8002534:	409a      	lsls	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2204      	movs	r2, #4
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2210      	movs	r2, #16
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d043      	beq.n	80025fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03c      	beq.n	80025fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2210      	movs	r2, #16
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d018      	beq.n	80025ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d108      	bne.n	80025bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d024      	beq.n	80025fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
 80025ba:	e01f      	b.n	80025fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
 80025cc:	e016      	b.n	80025fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0208 	bic.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	2220      	movs	r2, #32
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 808f 	beq.w	800272c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8087 	beq.w	800272c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2220      	movs	r2, #32
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b05      	cmp	r3, #5
 8002634:	d136      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0216 	bic.w	r2, r2, #22
 8002644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_DMA_IRQHandler+0x1da>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0208 	bic.w	r2, r2, #8
 8002674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	223f      	movs	r2, #63	; 0x3f
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	2b00      	cmp	r3, #0
 8002698:	d07e      	beq.n	8002798 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
        }
        return;
 80026a2:	e079      	b.n	8002798 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01d      	beq.n	80026ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10d      	bne.n	80026dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d031      	beq.n	800272c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	e02c      	b.n	800272c <HAL_DMA_IRQHandler+0x2a0>
 80026d2:	bf00      	nop
 80026d4:	20000004 	.word	0x20000004
 80026d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e01e      	b.n	800272c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	2b00      	cmp	r3, #0
 8002732:	d032      	beq.n	800279a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d022      	beq.n	8002786 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2205      	movs	r2, #5
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3301      	adds	r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	d307      	bcc.n	8002774 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f2      	bne.n	8002758 <HAL_DMA_IRQHandler+0x2cc>
 8002772:	e000      	b.n	8002776 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002774:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	e000      	b.n	800279a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002798:	bf00      	nop
    }
  }
}
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3b10      	subs	r3, #16
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <DMA_CalcBaseAndBitshift+0x64>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <DMA_CalcBaseAndBitshift+0x68>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d909      	bls.n	80027e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	1d1a      	adds	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
 80027e0:	e007      	b.n	80027f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ea:	f023 0303 	bic.w	r3, r3, #3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	aaaaaaab 	.word	0xaaaaaaab
 8002808:	08004a84 	.word	0x08004a84

0800280c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d11f      	bne.n	8002866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d856      	bhi.n	80028da <DMA_CheckFifoParam+0xce>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <DMA_CheckFifoParam+0x28>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	08002857 	.word	0x08002857
 800283c:	08002845 	.word	0x08002845
 8002840:	080028db 	.word	0x080028db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d046      	beq.n	80028de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e043      	b.n	80028de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285e:	d140      	bne.n	80028e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002864:	e03d      	b.n	80028e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286e:	d121      	bne.n	80028b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d837      	bhi.n	80028e6 <DMA_CheckFifoParam+0xda>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x70>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002893 	.word	0x08002893
 8002884:	0800288d 	.word	0x0800288d
 8002888:	080028a5 	.word	0x080028a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e030      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d025      	beq.n	80028ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a2:	e022      	b.n	80028ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ac:	d11f      	bne.n	80028ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028b2:	e01c      	b.n	80028ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d903      	bls.n	80028c2 <DMA_CheckFifoParam+0xb6>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d003      	beq.n	80028c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c0:	e018      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e015      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e00b      	b.n	80028f2 <DMA_CheckFifoParam+0xe6>
      break;
 80028da:	bf00      	nop
 80028dc:	e00a      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e008      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e006      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e004      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <DMA_CheckFifoParam+0xe8>
      break;
 80028f2:	bf00      	nop
    }
  } 
  
  return status; 
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e177      	b.n	8002c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8166 	bne.w	8002c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	2b02      	cmp	r3, #2
 8002954:	d130      	bne.n	80029b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0201 	and.w	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d017      	beq.n	80029f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d123      	bne.n	8002a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	08da      	lsrs	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3208      	adds	r2, #8
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	08da      	lsrs	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80c0 	beq.w	8002c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_GPIO_Init+0x324>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_GPIO_Init+0x324>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_GPIO_Init+0x324>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <HAL_GPIO_Init+0x328>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_GPIO_Init+0x32c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d037      	beq.n	8002b42 <HAL_GPIO_Init+0x23e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_GPIO_Init+0x23a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a56      	ldr	r2, [pc, #344]	; (8002c38 <HAL_GPIO_Init+0x334>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02b      	beq.n	8002b3a <HAL_GPIO_Init+0x236>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a55      	ldr	r2, [pc, #340]	; (8002c3c <HAL_GPIO_Init+0x338>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d025      	beq.n	8002b36 <HAL_GPIO_Init+0x232>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_GPIO_Init+0x33c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <HAL_GPIO_Init+0x22e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a53      	ldr	r2, [pc, #332]	; (8002c44 <HAL_GPIO_Init+0x340>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d019      	beq.n	8002b2e <HAL_GPIO_Init+0x22a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_GPIO_Init+0x344>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0x226>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a51      	ldr	r2, [pc, #324]	; (8002c4c <HAL_GPIO_Init+0x348>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00d      	beq.n	8002b26 <HAL_GPIO_Init+0x222>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <HAL_GPIO_Init+0x34c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <HAL_GPIO_Init+0x21e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x350>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_GPIO_Init+0x21a>
 8002b1a:	2309      	movs	r3, #9
 8002b1c:	e012      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b1e:	230a      	movs	r3, #10
 8002b20:	e010      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b22:	2308      	movs	r3, #8
 8002b24:	e00e      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e00c      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	e00a      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b2e:	2305      	movs	r3, #5
 8002b30:	e008      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x240>
 8002b42:	2300      	movs	r3, #0
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_GPIO_Init+0x328>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b86:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b8c:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb0:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_GPIO_Init+0x354>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	f67f ae84 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40021400 	.word	0x40021400
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40021c00 	.word	0x40021c00
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40022400 	.word	0x40022400
 8002c58:	40013c00 	.word	0x40013c00

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c78:	e003      	b.n	8002c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	619a      	str	r2, [r3, #24]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	400b      	ands	r3, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e267      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d075      	beq.n	8002dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d112      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e242      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x74>
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x98>
 8002d42:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6f      	ldr	r2, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6c      	ldr	r2, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	4b69      	ldr	r3, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a68      	ldr	r2, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb64 	bl	8001448 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb60 	bl	8001448 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e207      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xc0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fb50 	bl	8001448 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fb4c 	bl	8001448 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1f3      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0xe8>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c7      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fb05 	bl	8001448 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fb01 	bl	8001448 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a8      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x244>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fae4 	bl	8001448 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e84:	f7fe fae0 	bl	8001448 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e187      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d036      	beq.n	8002f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fac4 	bl	8001448 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe fac0 	bl	8001448 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e167      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x200>
 8002ee2:	e01b      	b.n	8002f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x248>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe faad 	bl	8001448 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe faa9 	bl	8001448 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d907      	bls.n	8002f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e150      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f10:	4b88      	ldr	r3, [pc, #544]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ea      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8097 	beq.w	8003058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2e:	4b81      	ldr	r3, [pc, #516]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b7a      	ldr	r3, [pc, #488]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	4b77      	ldr	r3, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f66:	4b74      	ldr	r3, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a73      	ldr	r2, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f72:	f7fe fa69 	bl	8001448 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7a:	f7fe fa65 	bl	8001448 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e10c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x474>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x2ea>
 8002fa0:	4b64      	ldr	r3, [pc, #400]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
 8002fac:	e01c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x30c>
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x324>
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fa2a 	bl	8001448 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	e00a      	b.n	800300e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fa26 	bl	8001448 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f241 3288 	movw	r2, #5000	; 0x1388
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0cb      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	4b49      	ldr	r3, [pc, #292]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ee      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x334>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fa14 	bl	8001448 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fa10 	bl	8001448 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0b5      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ee      	bne.n	8003024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a1 	beq.w	80031a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b08      	cmp	r3, #8
 800306c:	d05c      	beq.n	8003128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d141      	bne.n	80030fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_OscConfig+0x478>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe f9e4 	bl	8001448 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f9e0 	bl	8001448 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e087      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	491b      	ldr	r1, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe f9b9 	bl	8001448 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe f9b5 	bl	8001448 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e05c      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x416>
 80030f8:	e054      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x478>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f9a2 	bl	8001448 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f99e 	bl	8001448 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e045      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x470>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x444>
 8003126:	e03d      	b.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e038      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4ec>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d028      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d121      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d11a      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	3b01      	subs	r3, #1
 800318a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cc      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d90c      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800322a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d044      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e067      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4934      	ldr	r1, [pc, #208]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe f8d0 	bl	8001448 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe f8cc 	bl	8001448 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d20c      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f821 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fd84 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023c00 	.word	0x40023c00
 8003370:	40023800 	.word	0x40023800
 8003374:	08004a6c 	.word	0x08004a6c
 8003378:	20000004 	.word	0x20000004
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b090      	sub	sp, #64	; 0x40
 8003386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
 800338c:	2300      	movs	r3, #0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003390:	2300      	movs	r3, #0
 8003392:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d00d      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x40>
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	f200 80a1 	bhi.w	80034ec <HAL_RCC_GetSysClockFreq+0x16c>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x3a>
 80033b2:	e09b      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033b8:	e09b      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033be:	e098      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ca:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	627a      	str	r2, [r7, #36]	; 0x24
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e8:	2100      	movs	r1, #0
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033ec:	fb03 f201 	mul.w	r2, r3, r1
 80033f0:	2300      	movs	r3, #0
 80033f2:	fb00 f303 	mul.w	r3, r0, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_RCC_GetSysClockFreq+0x188>)
 80033fa:	fba0 1202 	umull	r1, r2, r0, r2
 80033fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003400:	460a      	mov	r2, r1
 8003402:	62ba      	str	r2, [r7, #40]	; 0x28
 8003404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003406:	4413      	add	r3, r2
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	2200      	movs	r2, #0
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	61fa      	str	r2, [r7, #28]
 8003412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800341a:	f7fc fee7 	bl	80001ec <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4613      	mov	r3, r2
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003426:	e053      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	2200      	movs	r2, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	617a      	str	r2, [r7, #20]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800343a:	f04f 0b00 	mov.w	fp, #0
 800343e:	4652      	mov	r2, sl
 8003440:	465b      	mov	r3, fp
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ebb2 080a 	subs.w	r8, r2, sl
 800345a:	eb63 090b 	sbc.w	r9, r3, fp
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800346a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800346e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003472:	ebb2 0408 	subs.w	r4, r2, r8
 8003476:	eb63 0509 	sbc.w	r5, r3, r9
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	00eb      	lsls	r3, r5, #3
 8003484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003488:	00e2      	lsls	r2, r4, #3
 800348a:	4614      	mov	r4, r2
 800348c:	461d      	mov	r5, r3
 800348e:	eb14 030a 	adds.w	r3, r4, sl
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	eb45 030b 	adc.w	r3, r5, fp
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034a6:	4629      	mov	r1, r5
 80034a8:	028b      	lsls	r3, r1, #10
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b0:	4621      	mov	r1, r4
 80034b2:	028a      	lsls	r2, r1, #10
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	2200      	movs	r2, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c4:	f7fc fe92 	bl	80001ec <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	3301      	adds	r3, #1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3740      	adds	r7, #64	; 0x40
 80034f8:	46bd      	mov	sp, r7
 80034fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	00f42400 	.word	0x00f42400
 8003508:	00b71b00 	.word	0x00b71b00

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000004 	.word	0x20000004

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003528:	f7ff fff0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	08004a7c 	.word	0x08004a7c

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003550:	f7ff ffdc 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	08004a7c 	.word	0x08004a7c

08003574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	220f      	movs	r2, #15
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_RCC_GetClockConfig+0x60>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	601a      	str	r2, [r3, #0]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e041      	b.n	800366e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f839 	bl	8003676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f000 fac4 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d001      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04e      	b.n	8003742 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_TIM_Base_Start_IT+0xc4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d01d      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_TIM_Base_Start_IT+0xc8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_TIM_Base_Start_IT+0xcc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_TIM_Base_Start_IT+0xd0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_TIM_Base_Start_IT+0xd4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_TIM_Base_Start_IT+0xd8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIM_Base_Start_IT+0xdc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40010400 	.word	0x40010400
 8003764:	40014000 	.word	0x40014000
 8003768:	40001800 	.word	0x40001800

0800376c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e041      	b.n	8003802 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fcd4 	bl	8001140 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 f9fa 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d122      	bne.n	8003866 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d11b      	bne.n	8003866 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0202 	mvn.w	r2, #2
 8003836:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f98a 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 8003852:	e005      	b.n	8003860 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f97c 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f98d 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d122      	bne.n	80038ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d11b      	bne.n	80038ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0204 	mvn.w	r2, #4
 800388a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f960 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 80038a6:	e005      	b.n	80038b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f952 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f963 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d122      	bne.n	800390e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11b      	bne.n	800390e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0208 	mvn.w	r2, #8
 80038de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f936 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 80038fa:	e005      	b.n	8003908 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f928 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f939 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d122      	bne.n	8003962 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d11b      	bne.n	8003962 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0210 	mvn.w	r2, #16
 8003932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2208      	movs	r2, #8
 8003938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f90c 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 800394e:	e005      	b.n	800395c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8fe 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f90f 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10e      	bne.n	800398e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0201 	mvn.w	r2, #1
 8003986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd fa2d 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d10e      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb45 	bl	8004044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8d4 	bl	8003b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0220 	mvn.w	r2, #32
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb0f 	bl	8004030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e088      	b.n	8003b4a <HAL_TIM_IC_ConfigChannel+0x130>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11b      	bne.n	8003a7e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f000 f945 	bl	8003ce4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 020c 	bic.w	r2, r2, #12
 8003a68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6999      	ldr	r1, [r3, #24]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	619a      	str	r2, [r3, #24]
 8003a7c:	e060      	b.n	8003b40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11c      	bne.n	8003abe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f000 f99a 	bl	8003dcc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aa6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
 8003abc:	e040      	b.n	8003b40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f000 f9b7 	bl	8003e46 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 020c 	bic.w	r2, r2, #12
 8003ae6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69d9      	ldr	r1, [r3, #28]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	61da      	str	r2, [r3, #28]
 8003afa:	e021      	b.n	8003b40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d11c      	bne.n	8003b3c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f000 f9d4 	bl	8003ebe <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	021a      	lsls	r2, r3, #8
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	61da      	str	r2, [r3, #28]
 8003b3a:	e001      	b.n	8003b40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <TIM_Base_SetConfig+0x114>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d00f      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <TIM_Base_SetConfig+0x118>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <TIM_Base_SetConfig+0x11c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <TIM_Base_SetConfig+0x120>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3a      	ldr	r2, [pc, #232]	; (8003cc8 <TIM_Base_SetConfig+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d108      	bne.n	8003bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2f      	ldr	r2, [pc, #188]	; (8003cb8 <TIM_Base_SetConfig+0x114>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c04:	d027      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <TIM_Base_SetConfig+0x118>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d023      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <TIM_Base_SetConfig+0x11c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2a      	ldr	r2, [pc, #168]	; (8003cc4 <TIM_Base_SetConfig+0x120>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <TIM_Base_SetConfig+0x124>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a28      	ldr	r2, [pc, #160]	; (8003ccc <TIM_Base_SetConfig+0x128>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <TIM_Base_SetConfig+0x12c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <TIM_Base_SetConfig+0x130>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <TIM_Base_SetConfig+0x134>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <TIM_Base_SetConfig+0x138>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <TIM_Base_SetConfig+0x13c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <TIM_Base_SetConfig+0x114>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0xf8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <TIM_Base_SetConfig+0x124>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	615a      	str	r2, [r3, #20]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40010400 	.word	0x40010400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800
 8003cd8:	40001800 	.word	0x40001800
 8003cdc:	40001c00 	.word	0x40001c00
 8003ce0:	40002000 	.word	0x40002000

08003ce4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <TIM_TI1_SetConfig+0xcc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01b      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d017      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <TIM_TI1_SetConfig+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <TIM_TI1_SetConfig+0xd4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00f      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <TIM_TI1_SetConfig+0xd8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <TIM_TI1_SetConfig+0xdc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <TIM_TI1_SetConfig+0xe0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_TI1_SetConfig+0x66>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <TIM_TI1_SetConfig+0xe4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <TIM_TI1_SetConfig+0x6a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <TIM_TI1_SetConfig+0x6c>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e003      	b.n	8003d6e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f023 030a 	bic.w	r3, r3, #10
 8003d88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 030a 	and.w	r3, r3, #10
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40010400 	.word	0x40010400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40001800 	.word	0x40001800

08003dcc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0210 	bic.w	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	031b      	lsls	r3, r3, #12
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e05a      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d01d      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40010400 	.word	0x40010400
 8004028:	40014000 	.word	0x40014000
 800402c:	40001800 	.word	0x40001800

08004030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e03f      	b.n	80040ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd f932 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fa39 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b08a      	sub	sp, #40	; 0x28
 80040f6:	af02      	add	r7, sp, #8
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	d17c      	bne.n	800420c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_UART_Transmit+0x2c>
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e075      	b.n	800420e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x3e>
 800412c:	2302      	movs	r3, #2
 800412e:	e06e      	b.n	800420e <HAL_UART_Transmit+0x11c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2221      	movs	r2, #33	; 0x21
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004146:	f7fd f97f 	bl	8001448 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d108      	bne.n	8004174 <HAL_UART_Transmit+0x82>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e003      	b.n	800417c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004184:	e02a      	b.n	80041dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f912 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e036      	b.n	800420e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3302      	adds	r3, #2
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e007      	b.n	80041ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1cf      	bne.n	8004186 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8e2 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	; 0x28
 800421a:	af02      	add	r7, sp, #8
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	f040 808c 	bne.w	8004350 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Receive+0x2e>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e084      	b.n	8004352 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_UART_Receive+0x40>
 8004252:	2302      	movs	r3, #2
 8004254:	e07d      	b.n	8004352 <HAL_UART_Receive+0x13c>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2222      	movs	r2, #34	; 0x22
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004272:	f7fd f8e9 	bl	8001448 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d108      	bne.n	80042a0 <HAL_UART_Receive+0x8a>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e003      	b.n	80042a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042b0:	e043      	b.n	800433a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2120      	movs	r1, #32
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f87c 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e042      	b.n	8004352 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10c      	bne.n	80042ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	b29a      	uxth	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	3302      	adds	r3, #2
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e01f      	b.n	800432c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d007      	beq.n	8004306 <HAL_UART_Receive+0xf0>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_UART_Receive+0xfe>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e008      	b.n	8004326 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	b2da      	uxtb	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3301      	adds	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1b6      	bne.n	80042b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b20      	cmp	r3, #32
 8004372:	d11d      	bne.n	80043b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Receive_IT+0x26>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e016      	b.n	80043b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_UART_Receive_IT+0x38>
 800438e:	2302      	movs	r3, #2
 8004390:	e00f      	b.n	80043b2 <HAL_UART_Receive_IT+0x58>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f875 	bl	8004496 <UART_Start_Receive_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	e000      	b.n	80043b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b090      	sub	sp, #64	; 0x40
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	e050      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d04c      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0x30>
 80043da:	f7fd f835 	bl	8001448 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d241      	bcs.n	800446e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440a:	637a      	str	r2, [r7, #52]	; 0x34
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e5      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	613b      	str	r3, [r7, #16]
   return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443e:	623a      	str	r2, [r7, #32]
 8004440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	61bb      	str	r3, [r7, #24]
   return(result);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e5      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d09f      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3740      	adds	r7, #64	; 0x40
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2222      	movs	r2, #34	; 0x22
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0220 	orr.w	r2, r2, #32
 8004502:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b0c0      	sub	sp, #256	; 0x100
 800451a:	af00      	add	r7, sp, #0
 800451c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	68d9      	ldr	r1, [r3, #12]
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	ea40 0301 	orr.w	r3, r0, r1
 800453c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800456c:	f021 010c 	bic.w	r1, r1, #12
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800457a:	430b      	orrs	r3, r1
 800457c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	ea40 0301 	orr.w	r3, r0, r1
 800459a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <UART_SetConfig+0x2cc>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0xa0>
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b8d      	ldr	r3, [pc, #564]	; (80047e4 <UART_SetConfig+0x2d0>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d104      	bne.n	80045be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe ffca 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 80045b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045bc:	e003      	b.n	80045c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045be:	f7fe ffb1 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80045c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d0:	f040 810c 	bne.w	80047ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80045ee:	415b      	adcs	r3, r3
 80045f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045f6:	4621      	mov	r1, r4
 80045f8:	eb12 0801 	adds.w	r8, r2, r1
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb43 0901 	adc.w	r9, r3, r1
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
 800461a:	4623      	mov	r3, r4
 800461c:	eb18 0303 	adds.w	r3, r8, r3
 8004620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004624:	462b      	mov	r3, r5
 8004626:	eb49 0303 	adc.w	r3, r9, r3
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800463a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800463e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004642:	460b      	mov	r3, r1
 8004644:	18db      	adds	r3, r3, r3
 8004646:	653b      	str	r3, [r7, #80]	; 0x50
 8004648:	4613      	mov	r3, r2
 800464a:	eb42 0303 	adc.w	r3, r2, r3
 800464e:	657b      	str	r3, [r7, #84]	; 0x54
 8004650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004658:	f7fb fdc8 	bl	80001ec <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b61      	ldr	r3, [pc, #388]	; (80047e8 <UART_SetConfig+0x2d4>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	011c      	lsls	r4, r3, #4
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	64b9      	str	r1, [r7, #72]	; 0x48
 8004684:	415b      	adcs	r3, r3
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800468c:	4641      	mov	r1, r8
 800468e:	eb12 0a01 	adds.w	sl, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb43 0b01 	adc.w	fp, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ac:	4692      	mov	sl, r2
 80046ae:	469b      	mov	fp, r3
 80046b0:	4643      	mov	r3, r8
 80046b2:	eb1a 0303 	adds.w	r3, sl, r3
 80046b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ba:	464b      	mov	r3, r9
 80046bc:	eb4b 0303 	adc.w	r3, fp, r3
 80046c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046d8:	460b      	mov	r3, r1
 80046da:	18db      	adds	r3, r3, r3
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
 80046de:	4613      	mov	r3, r2
 80046e0:	eb42 0303 	adc.w	r3, r2, r3
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046ee:	f7fb fd7d 	bl	80001ec <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <UART_SetConfig+0x2d4>)
 80046fa:	fba3 2301 	umull	r2, r3, r3, r1
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2264      	movs	r2, #100	; 0x64
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	1acb      	subs	r3, r1, r3
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800470e:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <UART_SetConfig+0x2d4>)
 8004710:	fba3 2302 	umull	r2, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800472c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	63b9      	str	r1, [r7, #56]	; 0x38
 8004738:	415b      	adcs	r3, r3
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6339      	str	r1, [r7, #48]	; 0x30
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800478c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004794:	460b      	mov	r3, r1
 8004796:	18db      	adds	r3, r3, r3
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
 800479a:	4613      	mov	r3, r2
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047aa:	f7fb fd1f 	bl	80001ec <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <UART_SetConfig+0x2d4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <UART_SetConfig+0x2d4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 0207 	and.w	r2, r3, #7
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4422      	add	r2, r4
 80047da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047dc:	e106      	b.n	80049ec <UART_SetConfig+0x4d8>
 80047de:	bf00      	nop
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047fe:	4642      	mov	r2, r8
 8004800:	464b      	mov	r3, r9
 8004802:	1891      	adds	r1, r2, r2
 8004804:	6239      	str	r1, [r7, #32]
 8004806:	415b      	adcs	r3, r3
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480e:	4641      	mov	r1, r8
 8004810:	1854      	adds	r4, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0501 	adc.w	r5, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	00eb      	lsls	r3, r5, #3
 8004822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004826:	00e2      	lsls	r2, r4, #3
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4643      	mov	r3, r8
 800482e:	18e3      	adds	r3, r4, r3
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004834:	464b      	mov	r3, r9
 8004836:	eb45 0303 	adc.w	r3, r5, r3
 800483a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800484a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800485a:	4629      	mov	r1, r5
 800485c:	008b      	lsls	r3, r1, #2
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004864:	4621      	mov	r1, r4
 8004866:	008a      	lsls	r2, r1, #2
 8004868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800486c:	f7fb fcbe 	bl	80001ec <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4b60      	ldr	r3, [pc, #384]	; (80049f8 <UART_SetConfig+0x4e4>)
 8004876:	fba3 2302 	umull	r2, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	011c      	lsls	r4, r3, #4
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800488c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	61b9      	str	r1, [r7, #24]
 8004898:	415b      	adcs	r3, r3
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6139      	str	r1, [r7, #16]
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048f8:	4649      	mov	r1, r9
 80048fa:	008b      	lsls	r3, r1, #2
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004902:	4641      	mov	r1, r8
 8004904:	008a      	lsls	r2, r1, #2
 8004906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800490a:	f7fb fc6f 	bl	80001ec <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <UART_SetConfig+0x4e4>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	; 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	3332      	adds	r3, #50	; 0x32
 8004928:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <UART_SetConfig+0x4e4>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004934:	441c      	add	r4, r3
 8004936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493a:	2200      	movs	r2, #0
 800493c:	673b      	str	r3, [r7, #112]	; 0x70
 800493e:	677a      	str	r2, [r7, #116]	; 0x74
 8004940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	415b      	adcs	r3, r3
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004954:	4641      	mov	r1, r8
 8004956:	1851      	adds	r1, r2, r1
 8004958:	6039      	str	r1, [r7, #0]
 800495a:	4649      	mov	r1, r9
 800495c:	414b      	adcs	r3, r1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800496c:	4659      	mov	r1, fp
 800496e:	00cb      	lsls	r3, r1, #3
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004976:	4651      	mov	r1, sl
 8004978:	00ca      	lsls	r2, r1, #3
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	4603      	mov	r3, r0
 8004980:	4642      	mov	r2, r8
 8004982:	189b      	adds	r3, r3, r2
 8004984:	66bb      	str	r3, [r7, #104]	; 0x68
 8004986:	464b      	mov	r3, r9
 8004988:	460a      	mov	r2, r1
 800498a:	eb42 0303 	adc.w	r3, r2, r3
 800498e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	663b      	str	r3, [r7, #96]	; 0x60
 800499a:	667a      	str	r2, [r7, #100]	; 0x64
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049a8:	4649      	mov	r1, r9
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	4641      	mov	r1, r8
 80049ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b2:	4641      	mov	r1, r8
 80049b4:	008a      	lsls	r2, r1, #2
 80049b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049ba:	f7fb fc17 	bl	80001ec <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <UART_SetConfig+0x4e4>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <UART_SetConfig+0x4e4>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4422      	add	r2, r4
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049f2:	46bd      	mov	sp, r7
 80049f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f8:	51eb851f 	.word	0x51eb851f

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 f818 	bl	8004a54 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08004a94 	.word	0x08004a94
 8004a48:	08004a94 	.word	0x08004a94
 8004a4c:	08004a94 	.word	0x08004a94
 8004a50:	08004a98 	.word	0x08004a98

08004a54 <_init>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr

08004a60 <_fini>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr
