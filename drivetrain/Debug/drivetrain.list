
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a0  080057a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a8  080057a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000003b4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000116c1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002960  00000000  00000000  00031744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea0  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b52  00000000  00000000  00034f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023795  00000000  00000000  00035a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012a5c  00000000  00000000  0005922f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a4d  00000000  00000000  0006bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cc4  00000000  00000000  001456d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014939c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005768 	.word	0x08005768

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08005768 	.word	0x08005768

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_uldivmod>:
 8000564:	b953      	cbnz	r3, 800057c <__aeabi_uldivmod+0x18>
 8000566:	b94a      	cbnz	r2, 800057c <__aeabi_uldivmod+0x18>
 8000568:	2900      	cmp	r1, #0
 800056a:	bf08      	it	eq
 800056c:	2800      	cmpeq	r0, #0
 800056e:	bf1c      	itt	ne
 8000570:	f04f 31ff 	movne.w	r1, #4294967295
 8000574:	f04f 30ff 	movne.w	r0, #4294967295
 8000578:	f000 b970 	b.w	800085c <__aeabi_idiv0>
 800057c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000580:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000584:	f000 f806 	bl	8000594 <__udivmoddi4>
 8000588:	f8dd e004 	ldr.w	lr, [sp, #4]
 800058c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000590:	b004      	add	sp, #16
 8000592:	4770      	bx	lr

08000594 <__udivmoddi4>:
 8000594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000598:	9e08      	ldr	r6, [sp, #32]
 800059a:	460d      	mov	r5, r1
 800059c:	4604      	mov	r4, r0
 800059e:	460f      	mov	r7, r1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d14a      	bne.n	800063a <__udivmoddi4+0xa6>
 80005a4:	428a      	cmp	r2, r1
 80005a6:	4694      	mov	ip, r2
 80005a8:	d965      	bls.n	8000676 <__udivmoddi4+0xe2>
 80005aa:	fab2 f382 	clz	r3, r2
 80005ae:	b143      	cbz	r3, 80005c2 <__udivmoddi4+0x2e>
 80005b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80005b4:	f1c3 0220 	rsb	r2, r3, #32
 80005b8:	409f      	lsls	r7, r3
 80005ba:	fa20 f202 	lsr.w	r2, r0, r2
 80005be:	4317      	orrs	r7, r2
 80005c0:	409c      	lsls	r4, r3
 80005c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80005c6:	fa1f f58c 	uxth.w	r5, ip
 80005ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80005ce:	0c22      	lsrs	r2, r4, #16
 80005d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80005d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80005d8:	fb01 f005 	mul.w	r0, r1, r5
 80005dc:	4290      	cmp	r0, r2
 80005de:	d90a      	bls.n	80005f6 <__udivmoddi4+0x62>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80005e8:	f080 811c 	bcs.w	8000824 <__udivmoddi4+0x290>
 80005ec:	4290      	cmp	r0, r2
 80005ee:	f240 8119 	bls.w	8000824 <__udivmoddi4+0x290>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4462      	add	r2, ip
 80005f6:	1a12      	subs	r2, r2, r0
 80005f8:	b2a4      	uxth	r4, r4
 80005fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80005fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000602:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000606:	fb00 f505 	mul.w	r5, r0, r5
 800060a:	42a5      	cmp	r5, r4
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x90>
 800060e:	eb1c 0404 	adds.w	r4, ip, r4
 8000612:	f100 32ff 	add.w	r2, r0, #4294967295
 8000616:	f080 8107 	bcs.w	8000828 <__udivmoddi4+0x294>
 800061a:	42a5      	cmp	r5, r4
 800061c:	f240 8104 	bls.w	8000828 <__udivmoddi4+0x294>
 8000620:	4464      	add	r4, ip
 8000622:	3802      	subs	r0, #2
 8000624:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000628:	1b64      	subs	r4, r4, r5
 800062a:	2100      	movs	r1, #0
 800062c:	b11e      	cbz	r6, 8000636 <__udivmoddi4+0xa2>
 800062e:	40dc      	lsrs	r4, r3
 8000630:	2300      	movs	r3, #0
 8000632:	e9c6 4300 	strd	r4, r3, [r6]
 8000636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063a:	428b      	cmp	r3, r1
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0xbc>
 800063e:	2e00      	cmp	r6, #0
 8000640:	f000 80ed 	beq.w	800081e <__udivmoddi4+0x28a>
 8000644:	2100      	movs	r1, #0
 8000646:	e9c6 0500 	strd	r0, r5, [r6]
 800064a:	4608      	mov	r0, r1
 800064c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000650:	fab3 f183 	clz	r1, r3
 8000654:	2900      	cmp	r1, #0
 8000656:	d149      	bne.n	80006ec <__udivmoddi4+0x158>
 8000658:	42ab      	cmp	r3, r5
 800065a:	d302      	bcc.n	8000662 <__udivmoddi4+0xce>
 800065c:	4282      	cmp	r2, r0
 800065e:	f200 80f8 	bhi.w	8000852 <__udivmoddi4+0x2be>
 8000662:	1a84      	subs	r4, r0, r2
 8000664:	eb65 0203 	sbc.w	r2, r5, r3
 8000668:	2001      	movs	r0, #1
 800066a:	4617      	mov	r7, r2
 800066c:	2e00      	cmp	r6, #0
 800066e:	d0e2      	beq.n	8000636 <__udivmoddi4+0xa2>
 8000670:	e9c6 4700 	strd	r4, r7, [r6]
 8000674:	e7df      	b.n	8000636 <__udivmoddi4+0xa2>
 8000676:	b902      	cbnz	r2, 800067a <__udivmoddi4+0xe6>
 8000678:	deff      	udf	#255	; 0xff
 800067a:	fab2 f382 	clz	r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	f040 8090 	bne.w	80007a4 <__udivmoddi4+0x210>
 8000684:	1a8a      	subs	r2, r1, r2
 8000686:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800068a:	fa1f fe8c 	uxth.w	lr, ip
 800068e:	2101      	movs	r1, #1
 8000690:	fbb2 f5f7 	udiv	r5, r2, r7
 8000694:	fb07 2015 	mls	r0, r7, r5, r2
 8000698:	0c22      	lsrs	r2, r4, #16
 800069a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800069e:	fb0e f005 	mul.w	r0, lr, r5
 80006a2:	4290      	cmp	r0, r2
 80006a4:	d908      	bls.n	80006b8 <__udivmoddi4+0x124>
 80006a6:	eb1c 0202 	adds.w	r2, ip, r2
 80006aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80006ae:	d202      	bcs.n	80006b6 <__udivmoddi4+0x122>
 80006b0:	4290      	cmp	r0, r2
 80006b2:	f200 80cb 	bhi.w	800084c <__udivmoddi4+0x2b8>
 80006b6:	4645      	mov	r5, r8
 80006b8:	1a12      	subs	r2, r2, r0
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80006c0:	fb07 2210 	mls	r2, r7, r0, r2
 80006c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006c8:	fb0e fe00 	mul.w	lr, lr, r0
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d908      	bls.n	80006e2 <__udivmoddi4+0x14e>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006d8:	d202      	bcs.n	80006e0 <__udivmoddi4+0x14c>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	f200 80bb 	bhi.w	8000856 <__udivmoddi4+0x2c2>
 80006e0:	4610      	mov	r0, r2
 80006e2:	eba4 040e 	sub.w	r4, r4, lr
 80006e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80006ea:	e79f      	b.n	800062c <__udivmoddi4+0x98>
 80006ec:	f1c1 0720 	rsb	r7, r1, #32
 80006f0:	408b      	lsls	r3, r1
 80006f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80006f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80006fa:	fa05 f401 	lsl.w	r4, r5, r1
 80006fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000702:	40fd      	lsrs	r5, r7
 8000704:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000708:	4323      	orrs	r3, r4
 800070a:	fbb5 f8f9 	udiv	r8, r5, r9
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	fb09 5518 	mls	r5, r9, r8, r5
 8000716:	0c1c      	lsrs	r4, r3, #16
 8000718:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800071c:	fb08 f50e 	mul.w	r5, r8, lr
 8000720:	42a5      	cmp	r5, r4
 8000722:	fa02 f201 	lsl.w	r2, r2, r1
 8000726:	fa00 f001 	lsl.w	r0, r0, r1
 800072a:	d90b      	bls.n	8000744 <__udivmoddi4+0x1b0>
 800072c:	eb1c 0404 	adds.w	r4, ip, r4
 8000730:	f108 3aff 	add.w	sl, r8, #4294967295
 8000734:	f080 8088 	bcs.w	8000848 <__udivmoddi4+0x2b4>
 8000738:	42a5      	cmp	r5, r4
 800073a:	f240 8085 	bls.w	8000848 <__udivmoddi4+0x2b4>
 800073e:	f1a8 0802 	sub.w	r8, r8, #2
 8000742:	4464      	add	r4, ip
 8000744:	1b64      	subs	r4, r4, r5
 8000746:	b29d      	uxth	r5, r3
 8000748:	fbb4 f3f9 	udiv	r3, r4, r9
 800074c:	fb09 4413 	mls	r4, r9, r3, r4
 8000750:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000754:	fb03 fe0e 	mul.w	lr, r3, lr
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x1da>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f103 35ff 	add.w	r5, r3, #4294967295
 8000764:	d26c      	bcs.n	8000840 <__udivmoddi4+0x2ac>
 8000766:	45a6      	cmp	lr, r4
 8000768:	d96a      	bls.n	8000840 <__udivmoddi4+0x2ac>
 800076a:	3b02      	subs	r3, #2
 800076c:	4464      	add	r4, ip
 800076e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000772:	fba3 9502 	umull	r9, r5, r3, r2
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	42ac      	cmp	r4, r5
 800077c:	46c8      	mov	r8, r9
 800077e:	46ae      	mov	lr, r5
 8000780:	d356      	bcc.n	8000830 <__udivmoddi4+0x29c>
 8000782:	d053      	beq.n	800082c <__udivmoddi4+0x298>
 8000784:	b156      	cbz	r6, 800079c <__udivmoddi4+0x208>
 8000786:	ebb0 0208 	subs.w	r2, r0, r8
 800078a:	eb64 040e 	sbc.w	r4, r4, lr
 800078e:	fa04 f707 	lsl.w	r7, r4, r7
 8000792:	40ca      	lsrs	r2, r1
 8000794:	40cc      	lsrs	r4, r1
 8000796:	4317      	orrs	r7, r2
 8000798:	e9c6 7400 	strd	r7, r4, [r6]
 800079c:	4618      	mov	r0, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a4:	f1c3 0120 	rsb	r1, r3, #32
 80007a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80007ac:	fa20 f201 	lsr.w	r2, r0, r1
 80007b0:	fa25 f101 	lsr.w	r1, r5, r1
 80007b4:	409d      	lsls	r5, r3
 80007b6:	432a      	orrs	r2, r5
 80007b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007bc:	fa1f fe8c 	uxth.w	lr, ip
 80007c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c4:	fb07 1510 	mls	r5, r7, r0, r1
 80007c8:	0c11      	lsrs	r1, r2, #16
 80007ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80007ce:	fb00 f50e 	mul.w	r5, r0, lr
 80007d2:	428d      	cmp	r5, r1
 80007d4:	fa04 f403 	lsl.w	r4, r4, r3
 80007d8:	d908      	bls.n	80007ec <__udivmoddi4+0x258>
 80007da:	eb1c 0101 	adds.w	r1, ip, r1
 80007de:	f100 38ff 	add.w	r8, r0, #4294967295
 80007e2:	d22f      	bcs.n	8000844 <__udivmoddi4+0x2b0>
 80007e4:	428d      	cmp	r5, r1
 80007e6:	d92d      	bls.n	8000844 <__udivmoddi4+0x2b0>
 80007e8:	3802      	subs	r0, #2
 80007ea:	4461      	add	r1, ip
 80007ec:	1b49      	subs	r1, r1, r5
 80007ee:	b292      	uxth	r2, r2
 80007f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80007f4:	fb07 1115 	mls	r1, r7, r5, r1
 80007f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000800:	4291      	cmp	r1, r2
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x282>
 8000804:	eb1c 0202 	adds.w	r2, ip, r2
 8000808:	f105 38ff 	add.w	r8, r5, #4294967295
 800080c:	d216      	bcs.n	800083c <__udivmoddi4+0x2a8>
 800080e:	4291      	cmp	r1, r2
 8000810:	d914      	bls.n	800083c <__udivmoddi4+0x2a8>
 8000812:	3d02      	subs	r5, #2
 8000814:	4462      	add	r2, ip
 8000816:	1a52      	subs	r2, r2, r1
 8000818:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800081c:	e738      	b.n	8000690 <__udivmoddi4+0xfc>
 800081e:	4631      	mov	r1, r6
 8000820:	4630      	mov	r0, r6
 8000822:	e708      	b.n	8000636 <__udivmoddi4+0xa2>
 8000824:	4639      	mov	r1, r7
 8000826:	e6e6      	b.n	80005f6 <__udivmoddi4+0x62>
 8000828:	4610      	mov	r0, r2
 800082a:	e6fb      	b.n	8000624 <__udivmoddi4+0x90>
 800082c:	4548      	cmp	r0, r9
 800082e:	d2a9      	bcs.n	8000784 <__udivmoddi4+0x1f0>
 8000830:	ebb9 0802 	subs.w	r8, r9, r2
 8000834:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000838:	3b01      	subs	r3, #1
 800083a:	e7a3      	b.n	8000784 <__udivmoddi4+0x1f0>
 800083c:	4645      	mov	r5, r8
 800083e:	e7ea      	b.n	8000816 <__udivmoddi4+0x282>
 8000840:	462b      	mov	r3, r5
 8000842:	e794      	b.n	800076e <__udivmoddi4+0x1da>
 8000844:	4640      	mov	r0, r8
 8000846:	e7d1      	b.n	80007ec <__udivmoddi4+0x258>
 8000848:	46d0      	mov	r8, sl
 800084a:	e77b      	b.n	8000744 <__udivmoddi4+0x1b0>
 800084c:	3d02      	subs	r5, #2
 800084e:	4462      	add	r2, ip
 8000850:	e732      	b.n	80006b8 <__udivmoddi4+0x124>
 8000852:	4608      	mov	r0, r1
 8000854:	e70a      	b.n	800066c <__udivmoddi4+0xd8>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	e742      	b.n	80006e2 <__udivmoddi4+0x14e>

0800085c <__aeabi_idiv0>:
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <pid_init>:
	int16_t  target,

	float 	kp,
	float 	ki,
	float 	kd)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	61f8      	str	r0, [r7, #28]
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	ed87 0a05 	vstr	s0, [r7, #20]
 8000870:	461a      	mov	r2, r3
 8000872:	edc7 0a03 	vstr	s1, [r7, #12]
 8000876:	ed87 1a02 	vstr	s2, [r7, #8]
 800087a:	edc7 1a01 	vstr	s3, [r7, #4]
 800087e:	4603      	mov	r3, r0
 8000880:	837b      	strh	r3, [r7, #26]
 8000882:	460b      	mov	r3, r1
 8000884:	833b      	strh	r3, [r7, #24]
 8000886:	4613      	mov	r3, r2
 8000888:	827b      	strh	r3, [r7, #18]

	pid->MaxOutput = maxout;
 800088a:	8b7b      	ldrh	r3, [r7, #26]
 800088c:	ee07 3a90 	vmov	s15, r3
 8000890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->IntegralLimit = integral_limit;
 800089a:	8b3b      	ldrh	r3, [r7, #24]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	pid->DeadBand = deadband;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->target = target;
 80008b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	edc3 7a00 	vstr	s15, [r3]

	pid->kp = kp;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	609a      	str	r2, [r3, #8]
	pid->ki = ki;
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	60da      	str	r2, [r3, #12]
	pid->kd = kd;
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	611a      	str	r2, [r3, #16]

	pid->output = 0;
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80008dc:	bf00      	nop
 80008de:	3724      	adds	r7, #36	; 0x24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <pid_calculate>:
	pid->ki = ki;
	pid->kd = kd;
}

float pid_calculate(PID_TypeDef* pid, float measure)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	ed87 0a00 	vstr	s0, [r7]
	pid->lasttime = pid->thistime;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	645a      	str	r2, [r3, #68]	; 0x44
	pid->thistime = HAL_GetTick();
 80008fc:	f001 f81a 	bl	8001934 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	641a      	str	r2, [r3, #64]	; 0x40
	pid->dtime = pid->thistime-pid->lasttime;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	b2da      	uxtb	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	b2db      	uxtb	r3, r3
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	pid->measure = measure;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	615a      	str	r2, [r3, #20]

	pid->last_error  = pid->error;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	61da      	str	r2, [r3, #28]
	pid->last_output = pid->output;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	631a      	str	r2, [r3, #48]	; 0x30

	pid->error = pid->target - pid->measure;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	edd3 7a05 	vldr	s15, [r3, #20]
 800093e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	edc3 7a06 	vstr	s15, [r3, #24]
	if((ABS(pid->error) > pid->DeadBand))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	edd3 7a06 	vldr	s15, [r3, #24]
 800094e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	dd03      	ble.n	8000960 <pid_calculate+0x78>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a06 	vldr	s15, [r3, #24]
 800095e:	e004      	b.n	800096a <pid_calculate+0x82>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	edd3 7a06 	vldr	s15, [r3, #24]
 8000966:	eef1 7a67 	vneg.f32	s15, s15
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000978:	f340 8083 	ble.w	8000a82 <pid_calculate+0x19a>
	{
		pid->pout = pid->kp * pid->error;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	edd3 7a06 	vldr	s15, [r3, #24]
 8000988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edc3 7a08 	vstr	s15, [r3, #32]

		pid->iout += (pid->ki * pid->error);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	edd3 6a03 	vldr	s13, [r3, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80009a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		if(pid->iout > pid->IntegralLimit)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80009be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c6:	dd03      	ble.n	80009d0 <pid_calculate+0xe8>
			pid->iout = pid->IntegralLimit;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
		if(pid->iout < - pid->IntegralLimit)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80009dc:	eef1 7a67 	vneg.f32	s15, s15
 80009e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e8:	d507      	bpl.n	80009fa <pid_calculate+0x112>
			pid->iout = - pid->IntegralLimit;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80009f0:	eef1 7a67 	vneg.f32	s15, s15
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		pid->dout =  pid->kd * (pid->error - pid->last_error);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	edd3 6a06 	vldr	s13, [r3, #24]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

		pid->output = pid->pout + pid->iout + pid->dout;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	ed93 7a08 	vldr	s14, [r3, #32]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		if(pid->output>pid->MaxOutput)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	dd03      	ble.n	8000a58 <pid_calculate+0x170>
		{
			pid->output = pid->MaxOutput;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		if(pid->output < -(pid->MaxOutput))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a64:	eef1 7a67 	vneg.f32	s15, s15
 8000a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a70:	d507      	bpl.n	8000a82 <pid_calculate+0x19a>
		{
			pid->output = -(pid->MaxOutput);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000a78:	eef1 7a67 	vneg.f32	s15, s15
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		}
	}
	return pid->output;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	ee07 3a90 	vmov	s15, r3
}
 8000a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <MX_CAN1_Init+0xac>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ab6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000aba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000ae6:	f000 ff31 	bl	800194c <HAL_CAN_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000af0:	f000 feba 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterBank = 0;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	61da      	str	r2, [r3, #28]
  canfilter1.FilterIdHigh = 0x0000;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  canfilter1.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  canfilter1.FilterBank = 14;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b26:	220e      	movs	r2, #14
 8000b28:	615a      	str	r2, [r3, #20]
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &canfilter1);
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <MX_CAN1_Init+0xb0>)
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <MX_CAN1_Init+0xa8>)
 8000b34:	f001 f806 	bl	8001b44 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000002c 	.word	0x2000002c
 8000b40:	40006400 	.word	0x40006400
 8000b44:	20000054 	.word	0x20000054

08000b48 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <HAL_CAN_MspInit+0xa4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d13b      	bne.n	8000be2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_CAN_MspInit+0xa8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <HAL_CAN_MspInit+0xac>)
 8000bbe:	f002 f985 	bl	8002ecc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2013      	movs	r0, #19
 8000bc8:	f001 fdda 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bcc:	2013      	movs	r0, #19
 8000bce:	f001 fdf3 	bl	80027b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2014      	movs	r0, #20
 8000bd8:	f001 fdd2 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bdc:	2014      	movs	r0, #20
 8000bde:	f001 fdeb 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40006400 	.word	0x40006400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_DMA_Init+0x3c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2045      	movs	r0, #69	; 0x45
 8000c20:	f001 fdae 	bl	8002780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c24:	2045      	movs	r0, #69	; 0x45
 8000c26:	f001 fdc7 	bl	80027b8 <HAL_NVIC_EnableIRQ>

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a41      	ldr	r2, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	4826      	ldr	r0, [pc, #152]	; (8000d7c <MX_GPIO_Init+0x144>)
 8000ce2:	f002 fa9f 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	4824      	ldr	r0, [pc, #144]	; (8000d80 <MX_GPIO_Init+0x148>)
 8000cee:	f002 fa99 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	213c      	movs	r1, #60	; 0x3c
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <MX_GPIO_Init+0x14c>)
 8000cf8:	f002 fa94 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 8000cfc:	233c      	movs	r3, #60	; 0x3c
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <MX_GPIO_Init+0x14c>)
 8000d14:	f002 f8da 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <MX_GPIO_Init+0x150>)
 8000d2e:	f002 f8cd 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_GPIO_Init+0x144>)
 8000d4c:	f002 f8be 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0x148>)
 8000d6a:	f002 f8af 	bl	8002ecc <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40021400 	.word	0x40021400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40021c00 	.word	0x40021c00
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_InitTick+0xe4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_InitTick+0xe4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_InitTick+0xe4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 fe92 	bl	8003b3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f002 fe63 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8000e26:	6378      	str	r0, [r7, #52]	; 0x34
 8000e28:	e004      	b.n	8000e34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e2a:	f002 fe5f 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <HAL_InitTick+0xe8>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_InitTick+0xf0>)
 8000e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e6a:	f002 fe99 	bl	8003ba0 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_InitTick+0xec>)
 8000e7e:	f002 fee9 	bl	8003c54 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f001 fc91 	bl	80027b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2036      	movs	r0, #54	; 0x36
 8000ea2:	f001 fc6d 	bl	8002780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0xf4>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	2000007c 	.word	0x2000007c
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <CAN1_TX_IRQHandler+0x10>)
 8000f32:	f001 f93e 	bl	80021b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000002c 	.word	0x2000002c

08000f40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <CAN1_RX0_IRQHandler+0x10>)
 8000f46:	f001 f934 	bl	80021b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000002c 	.word	0x2000002c

08000f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART2_IRQHandler+0x10>)
 8000f5a:	f003 fc71 	bl	8004840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000016c 	.word	0x2000016c

08000f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_DAC_IRQHandler+0x10>)
 8000f6e:	f002 ff30 	bl	8003dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000007c 	.word	0x2000007c

08000f7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA2_Stream6_IRQHandler+0x10>)
 8000f82:	f001 fd67 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000010c 	.word	0x2000010c

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000fd2:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <MX_TIM1_Init+0xfc>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000fd8:	2209      	movs	r2, #9
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000fe4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ffc:	482b      	ldr	r0, [pc, #172]	; (80010ac <MX_TIM1_Init+0xf8>)
 8000ffe:	f002 fe99 	bl	8003d34 <HAL_TIM_IC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 fc2e 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <MX_TIM1_Init+0xf8>)
 800101c:	f003 fa70 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001026:	f000 fc1f 	bl	8001868 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800102e:	2302      	movs	r3, #2
 8001030:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	481a      	ldr	r0, [pc, #104]	; (80010ac <MX_TIM1_Init+0xf8>)
 8001042:	f002 ffce 	bl	8003fe2 <HAL_TIM_IC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fc0c 	bl	8001868 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001050:	230a      	movs	r3, #10
 8001052:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001054:	2301      	movs	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	2204      	movs	r2, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_TIM1_Init+0xf8>)
 8001060:	f002 ffbf 	bl	8003fe2 <HAL_TIM_IC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800106a:	f000 fbfd 	bl	8001868 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	2208      	movs	r2, #8
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM1_Init+0xf8>)
 800107a:	f002 ffb2 	bl	8003fe2 <HAL_TIM_IC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001084:	f000 fbf0 	bl	8001868 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	220c      	movs	r2, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM1_Init+0xf8>)
 8001094:	f002 ffa5 	bl	8003fe2 <HAL_TIM_IC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800109e:	f000 fbe3 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000c4 	.word	0x200000c4
 80010b0:	40010000 	.word	0x40010000

080010b4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_TIM_IC_MspInit+0x13c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	f040 8088 	bne.w	80011e8 <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6453      	str	r3, [r2, #68]	; 0x44
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a36      	ldr	r2, [pc, #216]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_TIM_IC_MspInit+0x140>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800113e:	2301      	movs	r3, #1
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	482b      	ldr	r0, [pc, #172]	; (80011f8 <HAL_TIM_IC_MspInit+0x144>)
 800114a:	f001 febf 	bl	8002ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001160:	2301      	movs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4824      	ldr	r0, [pc, #144]	; (80011fc <HAL_TIM_IC_MspInit+0x148>)
 800116c:	f001 feae 	bl	8002ecc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_TIM_IC_MspInit+0x150>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 8001192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001196:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011b6:	f001 fb0d 	bl	80027d4 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 80011c0:	f000 fb52 	bl	8001868 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_TIM_IC_MspInit+0x14c>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40021000 	.word	0x40021000
 8001200:	2000010c 	.word	0x2000010c
 8001204:	400264a0 	.word	0x400264a0

08001208 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_USART2_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001240:	f003 f9ee 	bl	8004620 <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124a:	f000 fb0d 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000016c 	.word	0x2000016c
 8001258:	40004400 	.word	0x40004400

0800125c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0x94>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d133      	bne.n	80012e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_UART_MspInit+0x98>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_UART_MspInit+0x98>)
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x98>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_UART_MspInit+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0x98>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_UART_MspInit+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80012b6:	2360      	movs	r3, #96	; 0x60
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <HAL_UART_MspInit+0x9c>)
 80012d2:	f001 fdfb 	bl	8002ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
      HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2026      	movs	r0, #38	; 0x26
 80012dc:	f001 fa50 	bl	8002780 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012e0:	2026      	movs	r0, #38	; 0x26
 80012e2:	f001 fa69 	bl	80027b8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020c00 	.word	0x40020c00

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 fae1 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f9b9 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f7ff fc95 	bl	8000c38 <MX_GPIO_Init>
  MX_DMA_Init();
 800130e:	f7ff fc73 	bl	8000bf8 <MX_DMA_Init>
  MX_CAN1_Init();
 8001312:	f7ff fbbf 	bl	8000a94 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001316:	f7ff fe4d 	bl	8000fb4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800131a:	f7ff ff75 	bl	8001208 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 800131e:	2104      	movs	r1, #4
 8001320:	486f      	ldr	r0, [pc, #444]	; (80014e0 <main+0x1e4>)
 8001322:	f001 ff98 	bl	8003256 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 8001326:	2108      	movs	r1, #8
 8001328:	486d      	ldr	r0, [pc, #436]	; (80014e0 <main+0x1e4>)
 800132a:	f001 ff94 	bl	8003256 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 800132e:	2110      	movs	r1, #16
 8001330:	486b      	ldr	r0, [pc, #428]	; (80014e0 <main+0x1e4>)
 8001332:	f001 ff90 	bl	8003256 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 8001336:	2120      	movs	r1, #32
 8001338:	4869      	ldr	r0, [pc, #420]	; (80014e0 <main+0x1e4>)
 800133a:	f001 ff8c 	bl	8003256 <HAL_GPIO_TogglePin>

  //CAN setup
  HAL_CAN_Start(&hcan1); //start CAN
 800133e:	4869      	ldr	r0, [pc, #420]	; (80014e4 <main+0x1e8>)
 8001340:	f000 fce0 	bl	8001d04 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate CAN receive interrupt for encoder data
 8001344:	2102      	movs	r1, #2
 8001346:	4867      	ldr	r0, [pc, #412]	; (80014e4 <main+0x1e8>)
 8001348:	f000 ff0d 	bl	8002166 <HAL_CAN_ActivateNotification>
  canTxHeader.DLC = 8;
 800134c:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <main+0x1ec>)
 800134e:	2208      	movs	r2, #8
 8001350:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <main+0x1ec>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <main+0x1ec>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 800135e:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <main+0x1ec>)
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <main+0x1ec>)
 8001368:	2200      	movs	r2, #0
 800136a:	751a      	strb	r2, [r3, #20]

  //PID Setup
  for(int i=0; i<4; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e017      	b.n	80013a2 <main+0xa6>
  {
	  pid_init(&motor_pid[i],9999,1000,20,0,1.5,0.3,0);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	224c      	movs	r2, #76	; 0x4c
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <main+0x1f0>)
 800137c:	1898      	adds	r0, r3, r2
 800137e:	eddf 1a5c 	vldr	s3, [pc, #368]	; 80014f0 <main+0x1f4>
 8001382:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 80014f4 <main+0x1f8>
 8001386:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800138a:	2300      	movs	r3, #0
 800138c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	f242 710f 	movw	r1, #9999	; 0x270f
 8001398:	f7ff fa62 	bl	8000860 <pid_init>
  for(int i=0; i<4; i++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	dde4      	ble.n	8001372 <main+0x76>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //runMotors(0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
  //uint8_t feedback[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);
  for (int i = 0; i < 4; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	e013      	b.n	80013d6 <main+0xda>
	  if (i%2 == 0){
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d106      	bne.n	80013c6 <main+0xca>
		  targetSpeeds[i] = -100;
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <main+0x1fc>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f64f 719c 	movw	r1, #65436	; 0xff9c
 80013c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013c4:	e004      	b.n	80013d0 <main+0xd4>
	  }
	  else{
		  targetSpeeds[i] = 100;
 80013c6:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <main+0x1fc>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2164      	movs	r1, #100	; 0x64
 80013cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++) {
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	3301      	adds	r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	dde8      	ble.n	80013ae <main+0xb2>
	  }
  }
  for (int i = 0; i < 4; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e007      	b.n	80013f2 <main+0xf6>
      speed_data[i] = 0;
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <main+0x200>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2100      	movs	r1, #0
 80013e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	ddf4      	ble.n	80013e2 <main+0xe6>
  }
  while (1)
  {
	  for(int i=0; i<4; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	e027      	b.n	800144e <main+0x152>
		  motor_pid[i].target = targetSpeeds[i];
 80013fe:	4a3e      	ldr	r2, [pc, #248]	; (80014f8 <main+0x1fc>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001406:	b21b      	sxth	r3, r3
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	4a36      	ldr	r2, [pc, #216]	; (80014ec <main+0x1f0>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	214c      	movs	r1, #76	; 0x4c
 8001416:	fb01 f303 	mul.w	r3, r1, r3
 800141a:	4413      	add	r3, r2
 800141c:	edc3 7a00 	vstr	s15, [r3]
	      pid_calculate(&motor_pid[i],speed_data[i]);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	224c      	movs	r2, #76	; 0x4c
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <main+0x1f0>)
 800142a:	441a      	add	r2, r3
 800142c:	4933      	ldr	r1, [pc, #204]	; (80014fc <main+0x200>)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001434:	b21b      	sxth	r3, r3
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	4610      	mov	r0, r2
 8001444:	f7ff fa50 	bl	80008e8 <pid_calculate>
	  for(int i=0; i<4; i++){
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b03      	cmp	r3, #3
 8001452:	ddd4      	ble.n	80013fe <main+0x102>
	  }

	  //setMotorSpeeds(motor_pid[0].output,motor_pid[1].output,motor_pid[2].output,motor_pid[3].output);
	  setMotorSpeeds(motor_pid[0].output,0,0,0);
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <main+0x1f0>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f82b 	bl	80004b4 <__aeabi_f2d>
 800145e:	4604      	mov	r4, r0
 8001460:	460d      	mov	r5, r1
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2000      	movs	r0, #0
 8001468:	ec45 4b10 	vmov	d0, r4, r5
 800146c:	f000 f970 	bl	8001750 <setMotorSpeeds>
	  //setMotorSpeeds(1000,1000,1000,1000);
	  uint8_t feedback[] = {(speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <main+0x200>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b21b      	sxth	r3, r3
 8001476:	121b      	asrs	r3, r3, #8
 8001478:	b21b      	sxth	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	703b      	strb	r3, [r7, #0]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <main+0x200>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b21b      	sxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	707b      	strb	r3, [r7, #1]
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <main+0x200>)
 800148a:	885b      	ldrh	r3, [r3, #2]
 800148c:	b21b      	sxth	r3, r3
 800148e:	121b      	asrs	r3, r3, #8
 8001490:	b21b      	sxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	70bb      	strb	r3, [r7, #2]
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <main+0x200>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	b21b      	sxth	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <main+0x200>)
 80014a2:	889b      	ldrh	r3, [r3, #4]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	713b      	strb	r3, [r7, #4]
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <main+0x200>)
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	717b      	strb	r3, [r7, #5]
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <main+0x200>)
 80014ba:	88db      	ldrh	r3, [r3, #6]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	121b      	asrs	r3, r3, #8
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	71bb      	strb	r3, [r7, #6]
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <main+0x200>)
 80014c8:	88db      	ldrh	r3, [r3, #6]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 80014d0:	4639      	mov	r1, r7
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	2208      	movs	r2, #8
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <main+0x204>)
 80014da:	f003 f8ee 	bl	80046ba <HAL_UART_Transmit>
  {
 80014de:	e78b      	b.n	80013f8 <main+0xfc>
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	2000002c 	.word	0x2000002c
 80014e8:	200001b0 	.word	0x200001b0
 80014ec:	2000022c 	.word	0x2000022c
 80014f0:	00000000 	.word	0x00000000
 80014f4:	3e99999a 	.word	0x3e99999a
 80014f8:	20000224 	.word	0x20000224
 80014fc:	20000204 	.word	0x20000204
 8001500:	2000016c 	.word	0x2000016c

08001504 <HAL_CAN_RxFifo0MsgPendingCallback>:

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	4837      	ldr	r0, [pc, #220]	; (80015f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001512:	f001 fea0 	bl	8003256 <HAL_GPIO_TogglePin>
    if(hcan == &hcan1) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d163      	bne.n	80015e6 <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, CAN_RxData);
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001520:	4a36      	ldr	r2, [pc, #216]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001522:	2100      	movs	r1, #0
 8001524:	4833      	ldr	r0, [pc, #204]	; (80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001526:	f000 fd0c 	bl	8001f42 <HAL_CAN_GetRxMessage>

        if(canRxHeader.StdId == 0x201) motor_idx = 0;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f240 2201 	movw	r2, #513	; 0x201
 8001532:	4293      	cmp	r3, r2
 8001534:	d102      	bne.n	800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x202) motor_idx = 1;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f240 2202 	movw	r2, #514	; 0x202
 8001544:	4293      	cmp	r3, r2
 8001546:	d102      	bne.n	800154e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 2;
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f240 2203 	movw	r2, #515	; 0x203
 8001556:	4293      	cmp	r3, r2
 8001558:	d102      	bne.n	8001560 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 3;
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f240 2203 	movw	r2, #515	; 0x203
 8001568:	4293      	cmp	r3, r2
 800156a:	d102      	bne.n	8001572 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800156e:	2203      	movs	r2, #3
 8001570:	701a      	strb	r2, [r3, #0]

        angle_data[motor_idx] = (uint16_t)(CAN_RxData[0]<<8 | CAN_RxData[1]);
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b219      	sxth	r1, r3
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	b289      	uxth	r1, r1
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001590:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        speed_data[motor_idx] = (int16_t)(CAN_RxData[2]<<8 | CAN_RxData[3]); // originally rpm
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800159e:	78db      	ldrb	r3, [r3, #3]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4917      	ldr	r1, [pc, #92]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80015a4:	7809      	ldrb	r1, [r1, #0]
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80015ae:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        torque_current_data[motor_idx] = (CAN_RxData[4]<<8 | CAN_RxData[5])*5.f/16384.f;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80015ba:	7952      	ldrb	r2, [r2, #5]
 80015bc:	4313      	orrs	r3, r2
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 80015d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021400 	.word	0x40021400
 80015f4:	2000002c 	.word	0x2000002c
 80015f8:	200001f0 	.word	0x200001f0
 80015fc:	200001c8 	.word	0x200001c8
 8001600:	200001f8 	.word	0x200001f8
 8001604:	200001fc 	.word	0x200001fc
 8001608:	20000204 	.word	0x20000204
 800160c:	46800000 	.word	0x46800000
 8001610:	2000020c 	.word	0x2000020c

08001614 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <HAL_UART_RxCpltCallback+0x54>)
 8001622:	f001 fe18 	bl	8003256 <HAL_GPIO_TogglePin>
	if (uart_rx_buffer[0] == headers[0]){
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_RxCpltCallback+0x58>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_RxCpltCallback+0x5c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d111      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x42>
		for (int i = 0; i<8; i++){
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e00b      	b.n	8001650 <HAL_UART_RxCpltCallback+0x3c>
			motorCurrents[i] = uart_rx_buffer[i+1];
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_UART_RxCpltCallback+0x58>)
 800163e:	5cd1      	ldrb	r1, [r2, r3]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_UART_RxCpltCallback+0x60>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<8; i++){
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b07      	cmp	r3, #7
 8001654:	ddf0      	ble.n	8001638 <HAL_UART_RxCpltCallback+0x24>
		}
	}
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);
 8001656:	2263      	movs	r2, #99	; 0x63
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <HAL_UART_RxCpltCallback+0x58>)
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <HAL_UART_RxCpltCallback+0x64>)
 800165c:	f003 f8bf 	bl	80047de <HAL_UART_Receive_IT>
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021400 	.word	0x40021400
 800166c:	2000035c 	.word	0x2000035c
 8001670:	20000004 	.word	0x20000004
 8001674:	2000021c 	.word	0x2000021c
 8001678:	2000016c 	.word	0x2000016c

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f840 	bl	8005710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <SystemClock_Config+0xcc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <SystemClock_Config+0xd0>)
 80016c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80016ec:	2306      	movs	r3, #6
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f0:	23a8      	movs	r3, #168	; 0xa8
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0320 	add.w	r3, r7, #32
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fdc3 	bl	800328c <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800170c:	f000 f8ac 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2105      	movs	r1, #5
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f824 	bl	800377c <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800173a:	f000 f895 	bl	8001868 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <setMotorSpeeds>:
	CAN_TxData[7] = (motorSpeed);

	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
}

void setMotorSpeeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4){
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af04      	add	r7, sp, #16
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	4603      	mov	r3, r0
 8001764:	80bb      	strh	r3, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	803b      	strh	r3, [r7, #0]
	uint8_t h1 = ms1 >> 8;
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	73fb      	strb	r3, [r7, #15]
	uint8_t l1 = ms1;
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	73bb      	strb	r3, [r7, #14]
	uint8_t h2 = ms2 >> 8;
 800177c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001780:	121b      	asrs	r3, r3, #8
 8001782:	b21b      	sxth	r3, r3
 8001784:	737b      	strb	r3, [r7, #13]
	uint8_t l2 = ms2;
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	733b      	strb	r3, [r7, #12]
	uint8_t h3 = ms3 >> 8;
 800178a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800178e:	121b      	asrs	r3, r3, #8
 8001790:	b21b      	sxth	r3, r3
 8001792:	72fb      	strb	r3, [r7, #11]
	uint8_t l3 = ms3;
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	72bb      	strb	r3, [r7, #10]
	uint8_t h4 = ms4 >> 8;
 8001798:	f9b7 3000 	ldrsh.w	r3, [r7]
 800179c:	121b      	asrs	r3, r3, #8
 800179e:	b21b      	sxth	r3, r3
 80017a0:	727b      	strb	r3, [r7, #9]
	uint8_t l4 = ms4;
 80017a2:	883b      	ldrh	r3, [r7, #0]
 80017a4:	723b      	strb	r3, [r7, #8]
	runMotors(h1,l1,h2,l2,h3,l3,h4,l4);
 80017a6:	7b3c      	ldrb	r4, [r7, #12]
 80017a8:	7b7a      	ldrb	r2, [r7, #13]
 80017aa:	7bb9      	ldrb	r1, [r7, #14]
 80017ac:	7bf8      	ldrb	r0, [r7, #15]
 80017ae:	7a3b      	ldrb	r3, [r7, #8]
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	7a7b      	ldrb	r3, [r7, #9]
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	7abb      	ldrb	r3, [r7, #10]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4623      	mov	r3, r4
 80017c0:	f000 f804 	bl	80017cc <runMotors>
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <runMotors>:

void runMotors(unsigned char motorOneHigh, unsigned char motorOneLow, unsigned char motorTwoHigh, unsigned char motorTwoLow, unsigned char motorThreeHigh, unsigned char motorThreeLow, unsigned char motorFourHigh, unsigned char motorFourLow){          //speed can be 16 bits, split into high and low bytes
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	4603      	mov	r3, r0
 80017e0:	71bb      	strb	r3, [r7, #6]
 80017e2:	460b      	mov	r3, r1
 80017e4:	717b      	strb	r3, [r7, #5]
 80017e6:	4613      	mov	r3, r2
 80017e8:	713b      	strb	r3, [r7, #4]
	CAN_TxData[0] = motorOneHigh;  //high byte for speed, shifted 8 because only buffer is only 8 bits
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <runMotors+0x68>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	7013      	strb	r3, [r2, #0]
	CAN_TxData[1] = motorOneLow;       //low bytes for speed
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <runMotors+0x68>)
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	7053      	strb	r3, [r2, #1]
	CAN_TxData[2] = motorTwoHigh;
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <runMotors+0x68>)
 80017f8:	797b      	ldrb	r3, [r7, #5]
 80017fa:	7093      	strb	r3, [r2, #2]
	CAN_TxData[3] = motorTwoLow;
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <runMotors+0x68>)
 80017fe:	793b      	ldrb	r3, [r7, #4]
 8001800:	70d3      	strb	r3, [r2, #3]
	CAN_TxData[4] = motorThreeHigh;
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <runMotors+0x68>)
 8001804:	7e3b      	ldrb	r3, [r7, #24]
 8001806:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = motorThreeLow;
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <runMotors+0x68>)
 800180a:	7f3b      	ldrb	r3, [r7, #28]
 800180c:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = motorFourHigh;
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <runMotors+0x68>)
 8001810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001814:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = motorFourLow;
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <runMotors+0x68>)
 8001818:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800181c:	71d3      	strb	r3, [r2, #7]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <runMotors+0x6c>)
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <runMotors+0x68>)
 8001822:	4906      	ldr	r1, [pc, #24]	; (800183c <runMotors+0x70>)
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <runMotors+0x74>)
 8001826:	f000 fab1 	bl	8001d8c <HAL_CAN_AddTxMessage>
	while(i < 100000){
		HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
	    HAL_Delay(0.5);
	    i++;
	}*/
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	200001e8 	.word	0x200001e8
 8001838:	200001e4 	.word	0x200001e4
 800183c:	200001b0 	.word	0x200001b0
 8001840:	2000002c 	.word	0x2000002c

08001844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001856:	f000 f859 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40001000 	.word	0x40001000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800187a:	490e      	ldr	r1, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001890:	4c0b      	ldr	r4, [pc, #44]	; (80018c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189e:	f7ff fb77 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f003 ff3d 	bl	8005720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fd29 	bl	80012fc <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018b8:	080057b0 	.word	0x080057b0
  ldr r2, =_sbss
 80018bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018c0:	200003c4 	.word	0x200003c4

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 ff3a 	bl	800276a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	200f      	movs	r0, #15
 80018f8:	f7ff fa70 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fa46 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c
 8001930:	200003c0 	.word	0x200003c0

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200003c0 	.word	0x200003c0

0800194c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0ed      	b.n	8001b3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff f8ec 	bl	8000b48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001980:	f7ff ffd8 	bl	8001934 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001986:	e012      	b.n	80019ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001988:	f7ff ffd4 	bl	8001934 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b0a      	cmp	r3, #10
 8001994:	d90b      	bls.n	80019ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0c5      	b.n	8001b3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0e5      	beq.n	8001988 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0202 	bic.w	r2, r2, #2
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff ffb2 	bl	8001934 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019d2:	e012      	b.n	80019fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d4:	f7ff ffae 	bl	8001934 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d90b      	bls.n	80019fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2205      	movs	r2, #5
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09f      	b.n	8001b3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e5      	bne.n	80019d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7e5b      	ldrb	r3, [r3, #25]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e007      	b.n	8001a5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7e9b      	ldrb	r3, [r3, #26]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e007      	b.n	8001a86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0220 	bic.w	r2, r2, #32
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7edb      	ldrb	r3, [r3, #27]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0210 	bic.w	r2, r2, #16
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e007      	b.n	8001ab0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0210 	orr.w	r2, r2, #16
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7f1b      	ldrb	r3, [r3, #28]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0208 	orr.w	r2, r2, #8
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0208 	bic.w	r2, r2, #8
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7f5b      	ldrb	r3, [r3, #29]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0204 	orr.w	r2, r2, #4
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0204 	bic.w	r2, r2, #4
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	ea42 0103 	orr.w	r1, r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d003      	beq.n	8001b6a <HAL_CAN_ConfigFilter+0x26>
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 80be 	bne.w	8001ce6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2201      	movs	r2, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d123      	bne.n	8001c14 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3248      	adds	r2, #72	; 0x48
 8001bf4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0a:	6979      	ldr	r1, [r7, #20]
 8001c0c:	3348      	adds	r3, #72	; 0x48
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d122      	bne.n	8001c62 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3248      	adds	r2, #72	; 0x48
 8001c42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c58:	6979      	ldr	r1, [r7, #20]
 8001c5a:	3348      	adds	r3, #72	; 0x48
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ca8:	e007      	b.n	8001cba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd8:	f023 0201 	bic.w	r2, r3, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e006      	b.n	8001cf4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40006400 	.word	0x40006400

08001d04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d12e      	bne.n	8001d76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d30:	f7ff fe00 	bl	8001934 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d36:	e012      	b.n	8001d5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d38:	f7ff fdfc 	bl	8001934 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b0a      	cmp	r3, #10
 8001d44:	d90b      	bls.n	8001d5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e012      	b.n	8001d84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e5      	bne.n	8001d38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e006      	b.n	8001d84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d003      	beq.n	8001db8 <HAL_CAN_AddTxMessage+0x2c>
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	f040 80b8 	bne.w	8001f28 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a0 	beq.w	8001f18 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	0e1b      	lsrs	r3, r3, #24
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d907      	bls.n	8001df8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e09e      	b.n	8001f36 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e00f      	b.n	8001e46 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3318      	adds	r3, #24
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3318      	adds	r3, #24
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	440b      	add	r3, r1
 8001e56:	3304      	adds	r3, #4
 8001e58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	7d1b      	ldrb	r3, [r3, #20]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d111      	bne.n	8001e86 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	6811      	ldr	r1, [r2, #0]
 8001e76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	440b      	add	r3, r1
 8001e82:	3304      	adds	r3, #4
 8001e84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3307      	adds	r3, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	061a      	lsls	r2, r3, #24
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3306      	adds	r3, #6
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3305      	adds	r3, #5
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	3204      	adds	r2, #4
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6811      	ldr	r1, [r2, #0]
 8001eae:	ea43 0200 	orr.w	r2, r3, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ebc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	061a      	lsls	r2, r3, #24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	6811      	ldr	r1, [r2, #0]
 8001ee4:	ea43 0200 	orr.w	r2, r3, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ef2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3318      	adds	r3, #24
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6811      	ldr	r1, [r2, #0]
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	440b      	add	r3, r1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e00e      	b.n	8001f36 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e006      	b.n	8001f36 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f42:	b480      	push	{r7}
 8001f44:	b087      	sub	sp, #28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f56:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d003      	beq.n	8001f66 <HAL_CAN_GetRxMessage+0x24>
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	f040 80f3 	bne.w	800214c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10e      	bne.n	8001f8a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0e7      	b.n	800215a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d8      	b.n	800215a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	331b      	adds	r3, #27
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0204 	and.w	r2, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	331b      	adds	r3, #27
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0d5b      	lsrs	r3, r3, #21
 8001fd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	331b      	adds	r3, #27
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	331b      	adds	r3, #27
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0202 	and.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	331b      	adds	r3, #27
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	331b      	adds	r3, #27
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	331b      	adds	r3, #27
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0a1a      	lsrs	r2, r3, #8
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0c1a      	lsrs	r2, r3, #16
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	3302      	adds	r3, #2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e1a      	lsrs	r2, r3, #24
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3303      	adds	r3, #3
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3304      	adds	r3, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0a1a      	lsrs	r2, r3, #8
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3305      	adds	r3, #5
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0c1a      	lsrs	r2, r3, #16
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3306      	adds	r3, #6
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0e1a      	lsrs	r2, r3, #24
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3307      	adds	r3, #7
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	e007      	b.n	8002148 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0220 	orr.w	r2, r2, #32
 8002146:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e006      	b.n	800215a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002176:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d002      	beq.n	8002184 <HAL_CAN_ActivateNotification+0x1e>
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d109      	bne.n	8002198 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6959      	ldr	r1, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e006      	b.n	80021a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08a      	sub	sp, #40	; 0x28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d07c      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d023      	beq.n	800224a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f983 	bl	8002520 <HAL_CAN_TxMailbox0CompleteCallback>
 800221a:	e016      	b.n	800224a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	e00c      	b.n	800224a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	e002      	b.n	800224a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f989 	bl	800255c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d024      	beq.n	800229e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f963 	bl	8002534 <HAL_CAN_TxMailbox1CompleteCallback>
 800226e:	e016      	b.n	800229e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e00c      	b.n	800229e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e002      	b.n	800229e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f969 	bl	8002570 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d024      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f943 	bl	8002548 <HAL_CAN_TxMailbox2CompleteCallback>
 80022c2:	e016      	b.n	80022f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e00c      	b.n	80022f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e002      	b.n	80022f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f949 	bl	8002584 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00c      	beq.n	8002316 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2208      	movs	r2, #8
 8002330:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f930 	bl	8002598 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff f8d7 	bl	8001504 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002370:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2210      	movs	r2, #16
 8002378:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f912 	bl	80025c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8f9 	bl	80025ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8fc 	bl	80025d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2208      	movs	r2, #8
 80023f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f8f5 	bl	80025e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d07b      	beq.n	8002500 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d072      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246c:	2b00      	cmp	r3, #0
 800246e:	d043      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03e      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d02b      	beq.n	80024dc <HAL_CAN_IRQHandler+0x32a>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d82e      	bhi.n	80024e6 <HAL_CAN_IRQHandler+0x334>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d022      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x320>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d82a      	bhi.n	80024e6 <HAL_CAN_IRQHandler+0x334>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d019      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x316>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d826      	bhi.n	80024e6 <HAL_CAN_IRQHandler+0x334>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d010      	beq.n	80024be <HAL_CAN_IRQHandler+0x30c>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d822      	bhi.n	80024e6 <HAL_CAN_IRQHandler+0x334>
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d002      	beq.n	80024aa <HAL_CAN_IRQHandler+0x2f8>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d005      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024a8:	e01d      	b.n	80024e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f043 0308 	orr.w	r3, r3, #8
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b2:	e019      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024bc:	e014      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c6:	e00f      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d0:	e00a      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024da:	e005      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e4:	e000      	b.n	80024e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80024e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2204      	movs	r2, #4
 80024fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f872 	bl	80025fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff4c 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002792:	f7ff ff61 	bl	8002658 <__NVIC_GetPriorityGrouping>
 8002796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f7ff ffb1 	bl	8002704 <NVIC_EncodePriority>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff80 	bl	80026b0 <__NVIC_SetPriority>
}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff54 	bl	8002674 <__NVIC_EnableIRQ>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff f8a8 	bl	8001934 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e099      	b.n	8002924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002810:	e00f      	b.n	8002832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002812:	f7ff f88f 	bl	8001934 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b05      	cmp	r3, #5
 800281e:	d908      	bls.n	8002832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e078      	b.n	8002924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e8      	bne.n	8002812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_DMA_Init+0x158>)
 800284c:	4013      	ands	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b04      	cmp	r3, #4
 800288a:	d107      	bne.n	800289c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0307 	bic.w	r3, r3, #7
 80028b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d117      	bne.n	80028f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fa7b 	bl	8002dd4 <DMA_CheckFifoParam>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028f2:	2301      	movs	r3, #1
 80028f4:	e016      	b.n	8002924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa32 	bl	8002d68 <DMA_CalcBaseAndBitshift>
 8002904:	4603      	mov	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	f010803f 	.word	0xf010803f

08002930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800293e:	f7fe fff9 	bl	8001934 <HAL_GetTick>
 8002942:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d008      	beq.n	8002962 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e052      	b.n	8002a08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0216 	bic.w	r2, r2, #22
 8002970:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_DMA_Abort+0x62>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0208 	bic.w	r2, r2, #8
 80029a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b2:	e013      	b.n	80029dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b4:	f7fe ffbe 	bl	8001934 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d90c      	bls.n	80029dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2203      	movs	r2, #3
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e015      	b.n	8002a08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e4      	bne.n	80029b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	223f      	movs	r2, #63	; 0x3f
 80029f0:	409a      	lsls	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a60:	4b8e      	ldr	r3, [pc, #568]	; (8002c9c <HAL_DMA_IRQHandler+0x248>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a8e      	ldr	r2, [pc, #568]	; (8002ca0 <HAL_DMA_IRQHandler+0x24c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2208      	movs	r2, #8
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2210      	movs	r2, #16
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d043      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2210      	movs	r2, #16
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e01f      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2220      	movs	r2, #32
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 808f 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8087 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2220      	movs	r2, #32
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d136      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07e      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
        }
        return;
 8002c6a:	e079      	b.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e02c      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
 8002c9a:	bf00      	nop
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e01e      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0210 	bic.w	r2, r2, #16
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d032      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d307      	bcc.n	8002d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f2      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x2cc>
 8002d3a:	e000      	b.n	8002d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d60:	bf00      	nop
    }
  }
}
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3b10      	subs	r3, #16
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <DMA_CalcBaseAndBitshift+0x64>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d909      	bls.n	8002daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58
 8002da8:	e007      	b.n	8002dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab
 8002dd0:	08005798 	.word	0x08005798

08002dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11f      	bne.n	8002e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d856      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xce>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <DMA_CheckFifoParam+0x28>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e1f 	.word	0x08002e1f
 8002e04:	08002e0d 	.word	0x08002e0d
 8002e08:	08002ea3 	.word	0x08002ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d046      	beq.n	8002ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e043      	b.n	8002ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e26:	d140      	bne.n	8002eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e03d      	b.n	8002eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d121      	bne.n	8002e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d837      	bhi.n	8002eae <DMA_CheckFifoParam+0xda>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <DMA_CheckFifoParam+0x70>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5b 	.word	0x08002e5b
 8002e4c:	08002e55 	.word	0x08002e55
 8002e50:	08002e6d 	.word	0x08002e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e030      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d025      	beq.n	8002eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6a:	e022      	b.n	8002eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7a:	e01c      	b.n	8002eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d903      	bls.n	8002e8a <DMA_CheckFifoParam+0xb6>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d003      	beq.n	8002e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e88:	e018      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8e:	e015      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e00b      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e00a      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e008      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e006      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e004      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
    }
  } 
  
  return status; 
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e177      	b.n	80031d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee8:	2201      	movs	r2, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f040 8166 	bne.w	80031d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d005      	beq.n	8002f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d130      	bne.n	8002f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2203      	movs	r2, #3
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0201 	and.w	r2, r3, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d017      	beq.n	8002fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d123      	bne.n	8003010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	220f      	movs	r2, #15
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3208      	adds	r2, #8
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0203 	and.w	r2, r3, #3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80c0 	beq.w	80031d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_GPIO_Init+0x324>)
 800305c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_GPIO_Init+0x324>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306e:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <HAL_GPIO_Init+0x328>)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_GPIO_Init+0x32c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d037      	beq.n	800310a <HAL_GPIO_Init+0x23e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a57      	ldr	r2, [pc, #348]	; (80031fc <HAL_GPIO_Init+0x330>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_GPIO_Init+0x23a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_GPIO_Init+0x334>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d02b      	beq.n	8003102 <HAL_GPIO_Init+0x236>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a55      	ldr	r2, [pc, #340]	; (8003204 <HAL_GPIO_Init+0x338>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d025      	beq.n	80030fe <HAL_GPIO_Init+0x232>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a54      	ldr	r2, [pc, #336]	; (8003208 <HAL_GPIO_Init+0x33c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01f      	beq.n	80030fa <HAL_GPIO_Init+0x22e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a53      	ldr	r2, [pc, #332]	; (800320c <HAL_GPIO_Init+0x340>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d019      	beq.n	80030f6 <HAL_GPIO_Init+0x22a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_GPIO_Init+0x344>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a51      	ldr	r2, [pc, #324]	; (8003214 <HAL_GPIO_Init+0x348>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00d      	beq.n	80030ee <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a50      	ldr	r2, [pc, #320]	; (8003218 <HAL_GPIO_Init+0x34c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4f      	ldr	r2, [pc, #316]	; (800321c <HAL_GPIO_Init+0x350>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_GPIO_Init+0x21a>
 80030e2:	2309      	movs	r3, #9
 80030e4:	e012      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030e6:	230a      	movs	r3, #10
 80030e8:	e010      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030ea:	2308      	movs	r3, #8
 80030ec:	e00e      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030f2:	2306      	movs	r3, #6
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x240>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x240>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x240>
 800310a:	2300      	movs	r3, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311c:	4935      	ldr	r1, [pc, #212]	; (80031f4 <HAL_GPIO_Init+0x328>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_GPIO_Init+0x354>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800314e:	4a34      	ldr	r2, [pc, #208]	; (8003220 <HAL_GPIO_Init+0x354>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_GPIO_Init+0x354>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003178:	4a29      	ldr	r2, [pc, #164]	; (8003220 <HAL_GPIO_Init+0x354>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_GPIO_Init+0x354>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_GPIO_Init+0x354>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_GPIO_Init+0x354>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031cc:	4a14      	ldr	r2, [pc, #80]	; (8003220 <HAL_GPIO_Init+0x354>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f ae84 	bls.w	8002ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020800 	.word	0x40020800
 8003204:	40020c00 	.word	0x40020c00
 8003208:	40021000 	.word	0x40021000
 800320c:	40021400 	.word	0x40021400
 8003210:	40021800 	.word	0x40021800
 8003214:	40021c00 	.word	0x40021c00
 8003218:	40022000 	.word	0x40022000
 800321c:	40022400 	.word	0x40022400
 8003220:	40013c00 	.word	0x40013c00

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003268:	887a      	ldrh	r2, [r7, #2]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	041a      	lsls	r2, r3, #16
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43d9      	mvns	r1, r3
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	400b      	ands	r3, r1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e267      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b85      	ldr	r3, [pc, #532]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d112      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4b7e      	ldr	r3, [pc, #504]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05b      	beq.n	8003394 <HAL_RCC_OscConfig+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d157      	bne.n	8003394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e242      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x74>
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6f      	ldr	r2, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6c      	ldr	r2, [pc, #432]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003324:	4b69      	ldr	r3, [pc, #420]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a68      	ldr	r2, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe faf6 	bl	8001934 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe faf2 	bl	8001934 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e207      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xc0>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fae2 	bl	8001934 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fade 	bl	8001934 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1f3      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b51      	ldr	r3, [pc, #324]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xe8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1c7      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4937      	ldr	r1, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_OscConfig+0x244>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fa97 	bl	8001934 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fa93 	bl	8001934 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1a8      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4925      	ldr	r1, [pc, #148]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCC_OscConfig+0x244>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fa76 	bl	8001934 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe fa72 	bl	8001934 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e187      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d036      	beq.n	80034e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_RCC_OscConfig+0x248>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fa56 	bl	8001934 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fa52 	bl	8001934 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e167      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x240>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x200>
 80034aa:	e01b      	b.n	80034e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_OscConfig+0x248>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fa3f 	bl	8001934 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00e      	b.n	80034d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fe fa3b 	bl	8001934 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d907      	bls.n	80034d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e150      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b88      	ldr	r3, [pc, #544]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ea      	bne.n	80034ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8097 	beq.w	8003620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b7d      	ldr	r3, [pc, #500]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a7c      	ldr	r2, [pc, #496]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b77      	ldr	r3, [pc, #476]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b74      	ldr	r3, [pc, #464]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe f9fb 	bl	8001934 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe f9f7 	bl	8001934 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e10c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0x474>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x2ea>
 8003568:	4b64      	ldr	r3, [pc, #400]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a63      	ldr	r2, [pc, #396]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x30c>
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a57      	ldr	r2, [pc, #348]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe f9bc 	bl	8001934 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe f9b8 	bl	8001934 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0cb      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7fe f9a6 	bl	8001934 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe f9a2 	bl	8001934 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0b5      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4a38      	ldr	r2, [pc, #224]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a1 	beq.w	800376c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d05c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d141      	bne.n	80036c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe f976 	bl	8001934 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe f972 	bl	8001934 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e087      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	491b      	ldr	r1, [pc, #108]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe f94b 	bl	8001934 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe f947 	bl	8001934 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x416>
 80036c0:	e054      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe f934 	bl	8001934 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe f930 	bl	8001934 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e045      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
 80036ee:	e03d      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e038      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
 8003704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d121      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	3b01      	subs	r3, #1
 8003752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe f862 	bl	8001934 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe f85e 	bl	8001934 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fa5a 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08005780 	.word	0x08005780
 8003940:	20000000 	.word	0x20000000
 8003944:	20000008 	.word	0x20000008

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b090      	sub	sp, #64	; 0x40
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
 8003954:	2300      	movs	r3, #0
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003958:	2300      	movs	r3, #0
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00d      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 800396c:	2b08      	cmp	r3, #8
 800396e:	f200 80a1 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3a>
 800397a:	e09b      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_GetSysClockFreq+0x184>)
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003980:	e09b      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003984:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003986:	e098      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	4b4f      	ldr	r3, [pc, #316]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003992:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	627a      	str	r2, [r7, #36]	; 0x24
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039b0:	2100      	movs	r1, #0
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b4:	fb03 f201 	mul.w	r2, r3, r1
 80039b8:	2300      	movs	r3, #0
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	4413      	add	r3, r2
 80039c0:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c2:	fba0 1202 	umull	r1, r2, r0, r2
 80039c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c8:	460a      	mov	r2, r1
 80039ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80039cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ce:	4413      	add	r3, r2
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	2200      	movs	r2, #0
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	61fa      	str	r2, [r7, #28]
 80039da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039e2:	f7fc fdbf 	bl	8000564 <__aeabi_uldivmod>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4613      	mov	r3, r2
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ee:	e053      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f0:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	2200      	movs	r2, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	617a      	str	r2, [r7, #20]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a02:	f04f 0b00 	mov.w	fp, #0
 8003a06:	4652      	mov	r2, sl
 8003a08:	465b      	mov	r3, fp
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	0159      	lsls	r1, r3, #5
 8003a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a18:	0150      	lsls	r0, r2, #5
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a22:	eb63 090b 	sbc.w	r9, r3, fp
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	00eb      	lsls	r3, r5, #3
 8003a4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a50:	00e2      	lsls	r2, r4, #3
 8003a52:	4614      	mov	r4, r2
 8003a54:	461d      	mov	r5, r3
 8003a56:	eb14 030a 	adds.w	r3, r4, sl
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	eb45 030b 	adc.w	r3, r5, fp
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	2200      	movs	r2, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	60fa      	str	r2, [r7, #12]
 8003a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a8c:	f7fc fd6a 	bl	8000564 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3740      	adds	r7, #64	; 0x40
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	00b71b00 	.word	0x00b71b00

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08005790 	.word	0x08005790

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffdc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08005790 	.word	0x08005790

08003b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	220f      	movs	r2, #15
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_RCC_GetClockConfig+0x5c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_RCC_GetClockConfig+0x60>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40023c00 	.word	0x40023c00

08003ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e041      	b.n	8003c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f839 	bl	8003c3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f000 fac4 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04e      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d022      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d01d      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d018      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d111      	bne.n	8003cf8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d010      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	e007      	b.n	8003d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40001800 	.word	0x40001800

08003d34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e041      	b.n	8003dca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd f9aa 	bl	80010b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 f9fa 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d122      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d11b      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0202 	mvn.w	r2, #2
 8003dfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f98a 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e1a:	e005      	b.n	8003e28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f97c 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f98d 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d122      	bne.n	8003e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d11b      	bne.n	8003e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0204 	mvn.w	r2, #4
 8003e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f960 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e6e:	e005      	b.n	8003e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f952 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f963 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d122      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0208 	mvn.w	r2, #8
 8003ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f936 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003ec2:	e005      	b.n	8003ed0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f928 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f939 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d122      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d11b      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f06f 0210 	mvn.w	r2, #16
 8003efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2208      	movs	r2, #8
 8003f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f90c 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003f16:	e005      	b.n	8003f24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8fe 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f90f 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f06f 0201 	mvn.w	r2, #1
 8003f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fd fc77 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d10e      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b80      	cmp	r3, #128	; 0x80
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb45 	bl	800460c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d10e      	bne.n	8003fae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d107      	bne.n	8003fae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8d4 	bl	8004156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d10e      	bne.n	8003fda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d107      	bne.n	8003fda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0220 	mvn.w	r2, #32
 8003fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb0f 	bl	80045f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e088      	b.n	8004112 <HAL_TIM_IC_ConfigChannel+0x130>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11b      	bne.n	8004046 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f000 f945 	bl	80042ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 020c 	bic.w	r2, r2, #12
 8004030:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6999      	ldr	r1, [r3, #24]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e060      	b.n	8004108 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11c      	bne.n	8004086 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f000 f99a 	bl	8004394 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800406e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
 8004084:	e040      	b.n	8004108 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f000 f9b7 	bl	800440e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 020c 	bic.w	r2, r2, #12
 80040ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69d9      	ldr	r1, [r3, #28]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	e021      	b.n	8004108 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d11c      	bne.n	8004104 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 f9d4 	bl	8004486 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	61da      	str	r2, [r3, #28]
 8004102:	e001      	b.n	8004108 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a40      	ldr	r2, [pc, #256]	; (8004280 <TIM_Base_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d00f      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <TIM_Base_SetConfig+0x118>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <TIM_Base_SetConfig+0x11c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3b      	ldr	r2, [pc, #236]	; (800428c <TIM_Base_SetConfig+0x120>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <TIM_Base_SetConfig+0x124>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <TIM_Base_SetConfig+0x114>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02b      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d027      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <TIM_Base_SetConfig+0x118>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d023      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2b      	ldr	r2, [pc, #172]	; (8004288 <TIM_Base_SetConfig+0x11c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01f      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <TIM_Base_SetConfig+0x120>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01b      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	; (8004290 <TIM_Base_SetConfig+0x124>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d017      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a28      	ldr	r2, [pc, #160]	; (8004294 <TIM_Base_SetConfig+0x128>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a27      	ldr	r2, [pc, #156]	; (8004298 <TIM_Base_SetConfig+0x12c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00f      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <TIM_Base_SetConfig+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <TIM_Base_SetConfig+0x134>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <TIM_Base_SetConfig+0x138>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <TIM_Base_SetConfig+0x13c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <TIM_Base_SetConfig+0x114>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <TIM_Base_SetConfig+0x124>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d103      	bne.n	800426c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	615a      	str	r2, [r3, #20]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40010400 	.word	0x40010400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800
 80042a0:	40001800 	.word	0x40001800
 80042a4:	40001c00 	.word	0x40001c00
 80042a8:	40002000 	.word	0x40002000

080042ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <TIM_TI1_SetConfig+0xcc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01b      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d017      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a25      	ldr	r2, [pc, #148]	; (800437c <TIM_TI1_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a24      	ldr	r2, [pc, #144]	; (8004380 <TIM_TI1_SetConfig+0xd4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a23      	ldr	r2, [pc, #140]	; (8004384 <TIM_TI1_SetConfig+0xd8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a22      	ldr	r2, [pc, #136]	; (8004388 <TIM_TI1_SetConfig+0xdc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a21      	ldr	r2, [pc, #132]	; (800438c <TIM_TI1_SetConfig+0xe0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_TI1_SetConfig+0x66>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <TIM_TI1_SetConfig+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <TIM_TI1_SetConfig+0x6a>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <TIM_TI1_SetConfig+0x6c>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e003      	b.n	8004336 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800433c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	b2db      	uxtb	r3, r3
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f023 030a 	bic.w	r3, r3, #10
 8004350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 030a 	and.w	r3, r3, #10
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40010400 	.word	0x40010400
 800438c:	40014000 	.word	0x40014000
 8004390:	40001800 	.word	0x40001800

08004394 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	031b      	lsls	r3, r3, #12
 80043d8:	b29b      	uxth	r3, r3
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	b2db      	uxtb	r3, r3
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800445e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004486:	b480      	push	{r7}
 8004488:	b087      	sub	sp, #28
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	031b      	lsls	r3, r3, #12
 80044de:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e05a      	b.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d01d      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40001800 	.word	0x40001800

080045f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03f      	b.n	80046b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fe08 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	; 0x24
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fddf 	bl	8005228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b08a      	sub	sp, #40	; 0x28
 80046be:	af02      	add	r7, sp, #8
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d17c      	bne.n	80047d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_UART_Transmit+0x2c>
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e075      	b.n	80047d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_UART_Transmit+0x3e>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e06e      	b.n	80047d6 <HAL_UART_Transmit+0x11c>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2221      	movs	r2, #33	; 0x21
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470e:	f7fd f911 	bl	8001934 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d108      	bne.n	800473c <HAL_UART_Transmit+0x82>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e003      	b.n	8004744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800474c:	e02a      	b.n	80047a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fb1f 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e036      	b.n	80047d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3302      	adds	r3, #2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e007      	b.n	8004796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1cf      	bne.n	800474e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2140      	movs	r1, #64	; 0x40
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 faef 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e006      	b.n	80047d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d11d      	bne.n	8004834 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_Receive_IT+0x26>
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e016      	b.n	8004836 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_UART_Receive_IT+0x38>
 8004812:	2302      	movs	r3, #2
 8004814:	e00f      	b.n	8004836 <HAL_UART_Receive_IT+0x58>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	461a      	mov	r2, r3
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fb24 	bl	8004e78 <UART_Start_Receive_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	e000      	b.n	8004836 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b0ba      	sub	sp, #232	; 0xe8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800487e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_UART_IRQHandler+0x66>
 8004892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fc07 	bl	80050b2 <UART_Receive_IT>
      return;
 80048a4:	e256      	b.n	8004d54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80de 	beq.w	8004a6c <HAL_UART_IRQHandler+0x22c>
 80048b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80d1 	beq.w	8004a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_UART_IRQHandler+0xae>
 80048d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_UART_IRQHandler+0xd2>
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0202 	orr.w	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_UART_IRQHandler+0xf6>
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d011      	beq.n	8004966 <HAL_UART_IRQHandler+0x126>
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d105      	bne.n	800495a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0208 	orr.w	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 81ed 	beq.w	8004d4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_UART_IRQHandler+0x14e>
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb92 	bl	80050b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_UART_IRQHandler+0x17a>
 80049b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04f      	beq.n	8004a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa9a 	bl	8004ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d141      	bne.n	8004a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1d9      	bne.n	80049ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d013      	beq.n	8004a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	4a7d      	ldr	r2, [pc, #500]	; (8004c1c <HAL_UART_IRQHandler+0x3dc>)
 8004a28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd ffee 	bl	8002a10 <HAL_DMA_Abort_IT>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a44:	4610      	mov	r0, r2
 8004a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	e00e      	b.n	8004a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f990 	bl	8004d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00a      	b.n	8004a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f98c 	bl	8004d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e006      	b.n	8004a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f988 	bl	8004d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a66:	e170      	b.n	8004d4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	bf00      	nop
    return;
 8004a6a:	e16e      	b.n	8004d4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 814a 	bne.w	8004d0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8143 	beq.w	8004d0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 813c 	beq.w	8004d0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b40      	cmp	r3, #64	; 0x40
 8004ab4:	f040 80b4 	bne.w	8004c20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8140 	beq.w	8004d4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	f080 8139 	bcs.w	8004d4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	f000 8088 	beq.w	8004c02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1d9      	bne.n	8004af2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e1      	bne.n	8004b3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3314      	adds	r3, #20
 8004b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e3      	bne.n	8004b7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	f023 0310 	bic.w	r3, r3, #16
 8004bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004be4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004be6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e3      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd fe97 	bl	8002930 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8b6 	bl	8004d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c18:	e099      	b.n	8004d4e <HAL_UART_IRQHandler+0x50e>
 8004c1a:	bf00      	nop
 8004c1c:	08004fbb 	.word	0x08004fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 808b 	beq.w	8004d52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e3      	bne.n	8004c46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3314      	adds	r3, #20
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e3      	bne.n	8004c7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0310 	bic.w	r3, r3, #16
 8004cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ce8:	61fa      	str	r2, [r7, #28]
 8004cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e3      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f83e 	bl	8004d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d08:	e023      	b.n	8004d52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_UART_IRQHandler+0x4ea>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f95d 	bl	8004fe2 <UART_Transmit_IT>
    return;
 8004d28:	e014      	b.n	8004d54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00e      	beq.n	8004d54 <HAL_UART_IRQHandler+0x514>
 8004d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f99d 	bl	8005082 <UART_EndTransmit_IT>
    return;
 8004d48:	e004      	b.n	8004d54 <HAL_UART_IRQHandler+0x514>
    return;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_UART_IRQHandler+0x514>
      return;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_UART_IRQHandler+0x514>
      return;
 8004d52:	bf00      	nop
  }
}
 8004d54:	37e8      	adds	r7, #232	; 0xe8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop

08004d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b090      	sub	sp, #64	; 0x40
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	e050      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d04c      	beq.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004dbc:	f7fc fdba 	bl	8001934 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d241      	bcs.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dec:	637a      	str	r2, [r7, #52]	; 0x34
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e20:	623a      	str	r2, [r7, #32]
 8004e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	6a3a      	ldr	r2, [r7, #32]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e5      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e00f      	b.n	8004e70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d09f      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3740      	adds	r7, #64	; 0x40
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2222      	movs	r2, #34	; 0x22
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0220 	orr.w	r2, r2, #32
 8004ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b095      	sub	sp, #84	; 0x54
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d119      	bne.n	8004fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	647b      	str	r3, [r7, #68]	; 0x44
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f8c:	61ba      	str	r2, [r7, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6979      	ldr	r1, [r7, #20]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fae:	bf00      	nop
 8004fb0:	3754      	adds	r7, #84	; 0x54
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fecb 	bl	8004d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b21      	cmp	r3, #33	; 0x21
 8004ff4:	d13e      	bne.n	8005074 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d114      	bne.n	800502a <UART_Transmit_IT+0x48>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d110      	bne.n	800502a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]
 8005028:	e008      	b.n	800503c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6211      	str	r1, [r2, #32]
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29b      	uxth	r3, r3
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4619      	mov	r1, r3
 800504a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10f      	bne.n	8005070 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005098:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fe5a 	bl	8004d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b08c      	sub	sp, #48	; 0x30
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b22      	cmp	r3, #34	; 0x22
 80050c4:	f040 80ab 	bne.w	800521e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d117      	bne.n	8005102 <UART_Receive_IT+0x50>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d113      	bne.n	8005102 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	1c9a      	adds	r2, r3, #2
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005100:	e026      	b.n	8005150 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005114:	d007      	beq.n	8005126 <UART_Receive_IT+0x74>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <UART_Receive_IT+0x82>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e008      	b.n	8005146 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4619      	mov	r1, r3
 800515e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005160:	2b00      	cmp	r3, #0
 8005162:	d15a      	bne.n	800521a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0220 	bic.w	r2, r2, #32
 8005172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d135      	bne.n	8005210 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f023 0310 	bic.w	r3, r3, #16
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	623a      	str	r2, [r7, #32]
 80051cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d10a      	bne.n	8005202 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fdbb 	bl	8004d84 <HAL_UARTEx_RxEventCallback>
 800520e:	e002      	b.n	8005216 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fc f9ff 	bl	8001614 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e002      	b.n	8005220 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e000      	b.n	8005220 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3730      	adds	r7, #48	; 0x30
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b0c0      	sub	sp, #256	; 0x100
 800522e:	af00      	add	r7, sp, #0
 8005230:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	ea40 0301 	orr.w	r3, r0, r1
 8005250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	431a      	orrs	r2, r3
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005280:	f021 010c 	bic.w	r1, r1, #12
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800528e:	430b      	orrs	r3, r1
 8005290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	6999      	ldr	r1, [r3, #24]
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	ea40 0301 	orr.w	r3, r0, r1
 80052ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b8f      	ldr	r3, [pc, #572]	; (80054f4 <UART_SetConfig+0x2cc>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d005      	beq.n	80052c8 <UART_SetConfig+0xa0>
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <UART_SetConfig+0x2d0>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d104      	bne.n	80052d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fc24 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80052cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052d0:	e003      	b.n	80052da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7fe fc0b 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 80052d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	f040 810c 	bne.w	8005500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	65b9      	str	r1, [r7, #88]	; 0x58
 8005302:	415b      	adcs	r3, r3
 8005304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800530a:	4621      	mov	r1, r4
 800530c:	eb12 0801 	adds.w	r8, r2, r1
 8005310:	4629      	mov	r1, r5
 8005312:	eb43 0901 	adc.w	r9, r3, r1
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532a:	4690      	mov	r8, r2
 800532c:	4699      	mov	r9, r3
 800532e:	4623      	mov	r3, r4
 8005330:	eb18 0303 	adds.w	r3, r8, r3
 8005334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005338:	462b      	mov	r3, r5
 800533a:	eb49 0303 	adc.w	r3, r9, r3
 800533e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800534e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005356:	460b      	mov	r3, r1
 8005358:	18db      	adds	r3, r3, r3
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
 800535c:	4613      	mov	r3, r2
 800535e:	eb42 0303 	adc.w	r3, r2, r3
 8005362:	657b      	str	r3, [r7, #84]	; 0x54
 8005364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800536c:	f7fb f8fa 	bl	8000564 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b61      	ldr	r3, [pc, #388]	; (80054fc <UART_SetConfig+0x2d4>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	011c      	lsls	r4, r3, #4
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005388:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800538c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	64b9      	str	r1, [r7, #72]	; 0x48
 8005398:	415b      	adcs	r3, r3
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053a0:	4641      	mov	r1, r8
 80053a2:	eb12 0a01 	adds.w	sl, r2, r1
 80053a6:	4649      	mov	r1, r9
 80053a8:	eb43 0b01 	adc.w	fp, r3, r1
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c0:	4692      	mov	sl, r2
 80053c2:	469b      	mov	fp, r3
 80053c4:	4643      	mov	r3, r8
 80053c6:	eb1a 0303 	adds.w	r3, sl, r3
 80053ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ce:	464b      	mov	r3, r9
 80053d0:	eb4b 0303 	adc.w	r3, fp, r3
 80053d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053ec:	460b      	mov	r3, r1
 80053ee:	18db      	adds	r3, r3, r3
 80053f0:	643b      	str	r3, [r7, #64]	; 0x40
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
 80053fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005402:	f7fb f8af 	bl	8000564 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4611      	mov	r1, r2
 800540c:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <UART_SetConfig+0x2d4>)
 800540e:	fba3 2301 	umull	r2, r3, r3, r1
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2264      	movs	r2, #100	; 0x64
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	1acb      	subs	r3, r1, r3
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005422:	4b36      	ldr	r3, [pc, #216]	; (80054fc <UART_SetConfig+0x2d4>)
 8005424:	fba3 2302 	umull	r2, r3, r3, r2
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005430:	441c      	add	r4, r3
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800543c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	63b9      	str	r1, [r7, #56]	; 0x38
 800544c:	415b      	adcs	r3, r3
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6339      	str	r1, [r7, #48]	; 0x30
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005488:	464b      	mov	r3, r9
 800548a:	460a      	mov	r2, r1
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a8:	460b      	mov	r3, r1
 80054aa:	18db      	adds	r3, r3, r3
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ae:	4613      	mov	r3, r2
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054be:	f7fb f851 	bl	8000564 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <UART_SetConfig+0x2d4>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	; 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <UART_SetConfig+0x2d4>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 0207 	and.w	r2, r3, #7
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4422      	add	r2, r4
 80054ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f0:	e106      	b.n	8005700 <UART_SetConfig+0x4d8>
 80054f2:	bf00      	nop
 80054f4:	40011000 	.word	0x40011000
 80054f8:	40011400 	.word	0x40011400
 80054fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005504:	2200      	movs	r2, #0
 8005506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800550a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800550e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005512:	4642      	mov	r2, r8
 8005514:	464b      	mov	r3, r9
 8005516:	1891      	adds	r1, r2, r2
 8005518:	6239      	str	r1, [r7, #32]
 800551a:	415b      	adcs	r3, r3
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005522:	4641      	mov	r1, r8
 8005524:	1854      	adds	r4, r2, r1
 8005526:	4649      	mov	r1, r9
 8005528:	eb43 0501 	adc.w	r5, r3, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	00eb      	lsls	r3, r5, #3
 8005536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553a:	00e2      	lsls	r2, r4, #3
 800553c:	4614      	mov	r4, r2
 800553e:	461d      	mov	r5, r3
 8005540:	4643      	mov	r3, r8
 8005542:	18e3      	adds	r3, r4, r3
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005548:	464b      	mov	r3, r9
 800554a:	eb45 0303 	adc.w	r3, r5, r3
 800554e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800555e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800556e:	4629      	mov	r1, r5
 8005570:	008b      	lsls	r3, r1, #2
 8005572:	4621      	mov	r1, r4
 8005574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005578:	4621      	mov	r1, r4
 800557a:	008a      	lsls	r2, r1, #2
 800557c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005580:	f7fa fff0 	bl	8000564 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4b60      	ldr	r3, [pc, #384]	; (800570c <UART_SetConfig+0x4e4>)
 800558a:	fba3 2302 	umull	r2, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	011c      	lsls	r4, r3, #4
 8005592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800559c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	1891      	adds	r1, r2, r2
 80055aa:	61b9      	str	r1, [r7, #24]
 80055ac:	415b      	adcs	r3, r3
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b4:	4641      	mov	r1, r8
 80055b6:	1851      	adds	r1, r2, r1
 80055b8:	6139      	str	r1, [r7, #16]
 80055ba:	4649      	mov	r1, r9
 80055bc:	414b      	adcs	r3, r1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055cc:	4659      	mov	r1, fp
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d6:	4651      	mov	r1, sl
 80055d8:	00ca      	lsls	r2, r1, #3
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	4642      	mov	r2, r8
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e8:	464b      	mov	r3, r9
 80055ea:	460a      	mov	r2, r1
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800560c:	4649      	mov	r1, r9
 800560e:	008b      	lsls	r3, r1, #2
 8005610:	4641      	mov	r1, r8
 8005612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005616:	4641      	mov	r1, r8
 8005618:	008a      	lsls	r2, r1, #2
 800561a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800561e:	f7fa ffa1 	bl	8000564 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4611      	mov	r1, r2
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <UART_SetConfig+0x4e4>)
 800562a:	fba3 2301 	umull	r2, r3, r3, r1
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2264      	movs	r2, #100	; 0x64
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	1acb      	subs	r3, r1, r3
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	3332      	adds	r3, #50	; 0x32
 800563c:	4a33      	ldr	r2, [pc, #204]	; (800570c <UART_SetConfig+0x4e4>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005648:	441c      	add	r4, r3
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	673b      	str	r3, [r7, #112]	; 0x70
 8005652:	677a      	str	r2, [r7, #116]	; 0x74
 8005654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	415b      	adcs	r3, r3
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005668:	4641      	mov	r1, r8
 800566a:	1851      	adds	r1, r2, r1
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	4649      	mov	r1, r9
 8005670:	414b      	adcs	r3, r1
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005680:	4659      	mov	r1, fp
 8005682:	00cb      	lsls	r3, r1, #3
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568a:	4651      	mov	r1, sl
 800568c:	00ca      	lsls	r2, r1, #3
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	4603      	mov	r3, r0
 8005694:	4642      	mov	r2, r8
 8005696:	189b      	adds	r3, r3, r2
 8005698:	66bb      	str	r3, [r7, #104]	; 0x68
 800569a:	464b      	mov	r3, r9
 800569c:	460a      	mov	r2, r1
 800569e:	eb42 0303 	adc.w	r3, r2, r3
 80056a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	667a      	str	r2, [r7, #100]	; 0x64
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056bc:	4649      	mov	r1, r9
 80056be:	008b      	lsls	r3, r1, #2
 80056c0:	4641      	mov	r1, r8
 80056c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c6:	4641      	mov	r1, r8
 80056c8:	008a      	lsls	r2, r1, #2
 80056ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056ce:	f7fa ff49 	bl	8000564 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <UART_SetConfig+0x4e4>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a08      	ldr	r2, [pc, #32]	; (800570c <UART_SetConfig+0x4e4>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4422      	add	r2, r4
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570c:	51eb851f 	.word	0x51eb851f

08005710 <memset>:
 8005710:	4402      	add	r2, r0
 8005712:	4603      	mov	r3, r0
 8005714:	4293      	cmp	r3, r2
 8005716:	d100      	bne.n	800571a <memset+0xa>
 8005718:	4770      	bx	lr
 800571a:	f803 1b01 	strb.w	r1, [r3], #1
 800571e:	e7f9      	b.n	8005714 <memset+0x4>

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4d0d      	ldr	r5, [pc, #52]	; (8005758 <__libc_init_array+0x38>)
 8005724:	4c0d      	ldr	r4, [pc, #52]	; (800575c <__libc_init_array+0x3c>)
 8005726:	1b64      	subs	r4, r4, r5
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	2600      	movs	r6, #0
 800572c:	42a6      	cmp	r6, r4
 800572e:	d109      	bne.n	8005744 <__libc_init_array+0x24>
 8005730:	4d0b      	ldr	r5, [pc, #44]	; (8005760 <__libc_init_array+0x40>)
 8005732:	4c0c      	ldr	r4, [pc, #48]	; (8005764 <__libc_init_array+0x44>)
 8005734:	f000 f818 	bl	8005768 <_init>
 8005738:	1b64      	subs	r4, r4, r5
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	2600      	movs	r6, #0
 800573e:	42a6      	cmp	r6, r4
 8005740:	d105      	bne.n	800574e <__libc_init_array+0x2e>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f855 3b04 	ldr.w	r3, [r5], #4
 8005748:	4798      	blx	r3
 800574a:	3601      	adds	r6, #1
 800574c:	e7ee      	b.n	800572c <__libc_init_array+0xc>
 800574e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005752:	4798      	blx	r3
 8005754:	3601      	adds	r6, #1
 8005756:	e7f2      	b.n	800573e <__libc_init_array+0x1e>
 8005758:	080057a8 	.word	0x080057a8
 800575c:	080057a8 	.word	0x080057a8
 8005760:	080057a8 	.word	0x080057a8
 8005764:	080057ac 	.word	0x080057ac

08005768 <_init>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr

08005774 <_fini>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr
