
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080044d8  080044d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e0  080044e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000039c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011665  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002965  00000000  00000000  000176a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0001a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4c  00000000  00000000  0001aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f26  00000000  00000000  0001b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fdf5  00000000  00000000  0003f912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9aee  00000000  00000000  0004f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000044  00000000  00000000  001291f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf0  00000000  00000000  0012923c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000012d  00000000  00000000  0012ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__aeabi_uldivmod>:
 80001ac:	b953      	cbnz	r3, 80001c4 <__aeabi_uldivmod+0x18>
 80001ae:	b94a      	cbnz	r2, 80001c4 <__aeabi_uldivmod+0x18>
 80001b0:	2900      	cmp	r1, #0
 80001b2:	bf08      	it	eq
 80001b4:	2800      	cmpeq	r0, #0
 80001b6:	bf1c      	itt	ne
 80001b8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001bc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001c0:	f000 b80c 	b.w	80001dc <__aeabi_idiv0>
 80001c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001cc:	f004 f80a 	bl	80041e4 <__udivmoddi4>
 80001d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d8:	b004      	add	sp, #16
 80001da:	4770      	bx	lr

080001dc <__aeabi_idiv0>:
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <deregister_tm_clones>:
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <deregister_tm_clones+0x10>)
 80001e2:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <deregister_tm_clones+0x14>)
 80001e4:	4283      	cmp	r3, r0
 80001e6:	d002      	beq.n	80001ee <deregister_tm_clones+0xe>
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <deregister_tm_clones+0x18>)
 80001ea:	b103      	cbz	r3, 80001ee <deregister_tm_clones+0xe>
 80001ec:	4718      	bx	r3
 80001ee:	4770      	bx	lr
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	00000000 	.word	0x00000000

080001fc <register_tm_clones>:
 80001fc:	4805      	ldr	r0, [pc, #20]	@ (8000214 <register_tm_clones+0x18>)
 80001fe:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <register_tm_clones+0x1c>)
 8000200:	1a1b      	subs	r3, r3, r0
 8000202:	0fd9      	lsrs	r1, r3, #31
 8000204:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000208:	1049      	asrs	r1, r1, #1
 800020a:	d002      	beq.n	8000212 <register_tm_clones+0x16>
 800020c:	4b03      	ldr	r3, [pc, #12]	@ (800021c <register_tm_clones+0x20>)
 800020e:	b103      	cbz	r3, 8000212 <register_tm_clones+0x16>
 8000210:	4718      	bx	r3
 8000212:	4770      	bx	lr
 8000214:	2000000c 	.word	0x2000000c
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000

08000220 <__do_global_dtors_aux>:
 8000220:	b510      	push	{r4, lr}
 8000222:	4c06      	ldr	r4, [pc, #24]	@ (800023c <__do_global_dtors_aux+0x1c>)
 8000224:	7823      	ldrb	r3, [r4, #0]
 8000226:	b943      	cbnz	r3, 800023a <__do_global_dtors_aux+0x1a>
 8000228:	f7ff ffda 	bl	80001e0 <deregister_tm_clones>
 800022c:	4b04      	ldr	r3, [pc, #16]	@ (8000240 <__do_global_dtors_aux+0x20>)
 800022e:	b113      	cbz	r3, 8000236 <__do_global_dtors_aux+0x16>
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <__do_global_dtors_aux+0x24>)
 8000232:	f3af 8000 	nop.w
 8000236:	2301      	movs	r3, #1
 8000238:	7023      	strb	r3, [r4, #0]
 800023a:	bd10      	pop	{r4, pc}
 800023c:	2000000c 	.word	0x2000000c
 8000240:	00000000 	.word	0x00000000
 8000244:	080044a0 	.word	0x080044a0

08000248 <frame_dummy>:
 8000248:	b508      	push	{r3, lr}
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <frame_dummy+0x18>)
 800024c:	b11b      	cbz	r3, 8000256 <frame_dummy+0xe>
 800024e:	4905      	ldr	r1, [pc, #20]	@ (8000264 <frame_dummy+0x1c>)
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <frame_dummy+0x20>)
 8000252:	f3af 8000 	nop.w
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025a:	f7ff bfcf 	b.w	80001fc <register_tm_clones>
 800025e:	bf00      	nop
 8000260:	00000000 	.word	0x00000000
 8000264:	20000010 	.word	0x20000010
 8000268:	080044a0 	.word	0x080044a0

0800026c <pid_init>:
	int16_t  target,

	float 	kp,
	float 	ki,
	float 	kd)
{
 800026c:	b480      	push	{r7}
 800026e:	b089      	sub	sp, #36	@ 0x24
 8000270:	af00      	add	r7, sp, #0
 8000272:	61f8      	str	r0, [r7, #28]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	ed87 0a05 	vstr	s0, [r7, #20]
 800027c:	461a      	mov	r2, r3
 800027e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000282:	ed87 1a02 	vstr	s2, [r7, #8]
 8000286:	edc7 1a01 	vstr	s3, [r7, #4]
 800028a:	4603      	mov	r3, r0
 800028c:	837b      	strh	r3, [r7, #26]
 800028e:	460b      	mov	r3, r1
 8000290:	833b      	strh	r3, [r7, #24]
 8000292:	4613      	mov	r3, r2
 8000294:	827b      	strh	r3, [r7, #18]

	pid->MaxOutput = maxout;
 8000296:	8b7b      	ldrh	r3, [r7, #26]
 8000298:	ee07 3a90 	vmov	s15, r3
 800029c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	pid->IntegralLimit = integral_limit;
 80002a6:	8b3b      	ldrh	r3, [r7, #24]
 80002a8:	ee07 3a90 	vmov	s15, r3
 80002ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	pid->DeadBand = deadband;
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	655a      	str	r2, [r3, #84]	@ 0x54
	pid->target = target;
 80002bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80002c0:	ee07 3a90 	vmov	s15, r3
 80002c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	edc3 7a00 	vstr	s15, [r3]

	pid->kp = kp;
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	609a      	str	r2, [r3, #8]
	pid->ki = ki;
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	60da      	str	r2, [r3, #12]
	pid->kd = kd;
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	611a      	str	r2, [r3, #16]

	pid->output = 0;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	f04f 0200 	mov.w	r2, #0
 80002e6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80002e8:	bf00      	nop
 80002ea:	3724      	adds	r7, #36	@ 0x24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 80002fa:	4a2b      	ldr	r2, [pc, #172]	@ (80003a8 <MX_CAN1_Init+0xb4>)
 80002fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80002fe:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000300:	2203      	movs	r2, #3
 8000302:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000310:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000312:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000316:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000318:	4b22      	ldr	r3, [pc, #136]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800031a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800031e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000320:	4b20      	ldr	r3, [pc, #128]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000322:	2200      	movs	r2, #0
 8000324:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000326:	4b1f      	ldr	r3, [pc, #124]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000328:	2201      	movs	r2, #1
 800032a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800032c:	4b1d      	ldr	r3, [pc, #116]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800032e:	2200      	movs	r2, #0
 8000330:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000334:	2200      	movs	r2, #0
 8000336:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800033a:	2200      	movs	r2, #0
 800033c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000344:	4817      	ldr	r0, [pc, #92]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000346:	f000 fe57 	bl	8000ff8 <HAL_CAN_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000350:	f000 fb00 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterBank = 0;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_CAN1_Init+0xb8>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000362:	2201      	movs	r2, #1
 8000364:	61da      	str	r2, [r3, #28]
  canfilter1.FilterIdHigh = 0x0000;
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_CAN1_Init+0xb8>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_CAN1_Init+0xb8>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  canfilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_CAN1_Init+0xb8>)
 8000386:	2201      	movs	r2, #1
 8000388:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &canfilter1);
 800038a:	4908      	ldr	r1, [pc, #32]	@ (80003ac <MX_CAN1_Init+0xb8>)
 800038c:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800038e:	f000 ff2f 	bl	80011f0 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1); //start CAN
 8000392:	4804      	ldr	r0, [pc, #16]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 8000394:	f001 f80c 	bl	80013b0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate CAN receive interrupt for encoder data
 8000398:	2102      	movs	r1, #2
 800039a:	4802      	ldr	r0, [pc, #8]	@ (80003a4 <MX_CAN1_Init+0xb0>)
 800039c:	f001 f95e 	bl	800165c <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40006400 	.word	0x40006400
 80003ac:	20000050 	.word	0x20000050

080003b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	@ 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a21      	ldr	r2, [pc, #132]	@ (8000454 <HAL_CAN_MspInit+0xa4>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d13b      	bne.n	800044a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
 80003d6:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 80003d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003da:	4a1f      	ldr	r2, [pc, #124]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 80003dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80003e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 80003e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	4b19      	ldr	r3, [pc, #100]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a18      	ldr	r2, [pc, #96]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 80003f8:	f043 0308 	orr.w	r3, r3, #8
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <HAL_CAN_MspInit+0xa8>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	f003 0308 	and.w	r3, r3, #8
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800040a:	2303      	movs	r3, #3
 800040c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000416:	2303      	movs	r3, #3
 8000418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800041a:	2309      	movs	r3, #9
 800041c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4619      	mov	r1, r3
 8000424:	480d      	ldr	r0, [pc, #52]	@ (800045c <HAL_CAN_MspInit+0xac>)
 8000426:	f001 ff3b 	bl	80022a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	2101      	movs	r1, #1
 800042e:	2013      	movs	r0, #19
 8000430:	f001 fc22 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000434:	2013      	movs	r0, #19
 8000436:	f001 fc3b 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	2014      	movs	r0, #20
 8000440:	f001 fc1a 	bl	8001c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000444:	2014      	movs	r0, #20
 8000446:	f001 fc33 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800044a:	bf00      	nop
 800044c:	3728      	adds	r7, #40	@ 0x28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40006400 	.word	0x40006400
 8000458:	40023800 	.word	0x40023800
 800045c:	40020c00 	.word	0x40020c00

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_DMA_Init+0x3c>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046e:	4a0b      	ldr	r2, [pc, #44]	@ (800049c <MX_DMA_Init+0x3c>)
 8000470:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000474:	6313      	str	r3, [r2, #48]	@ 0x30
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_DMA_Init+0x3c>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	2045      	movs	r0, #69	@ 0x45
 8000488:	f001 fbf6 	bl	8001c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800048c:	2045      	movs	r0, #69	@ 0x45
 800048e:	f001 fc0f 	bl	8001cb0 <HAL_NVIC_EnableIRQ>

}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	@ 0x28
 80004a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
 80004ba:	4b49      	ldr	r3, [pc, #292]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a48      	ldr	r2, [pc, #288]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004c6:	4b46      	ldr	r3, [pc, #280]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	4b42      	ldr	r3, [pc, #264]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a41      	ldr	r2, [pc, #260]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004dc:	f043 0308 	orr.w	r3, r3, #8
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80004e2:	4b3f      	ldr	r3, [pc, #252]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	f003 0308 	and.w	r3, r3, #8
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b3b      	ldr	r3, [pc, #236]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f6:	4a3a      	ldr	r2, [pc, #232]	@ (80005e0 <MX_GPIO_Init+0x140>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fe:	4b38      	ldr	r3, [pc, #224]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b34      	ldr	r3, [pc, #208]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a33      	ldr	r2, [pc, #204]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b31      	ldr	r3, [pc, #196]	@ (80005e0 <MX_GPIO_Init+0x140>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0310 	and.w	r3, r3, #16
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <MX_GPIO_Init+0x140>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a2c      	ldr	r2, [pc, #176]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0320 	and.w	r3, r3, #32
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000548:	4826      	ldr	r0, [pc, #152]	@ (80005e4 <MX_GPIO_Init+0x144>)
 800054a:	f002 f855 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000554:	4824      	ldr	r0, [pc, #144]	@ (80005e8 <MX_GPIO_Init+0x148>)
 8000556:	f002 f84f 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	213c      	movs	r1, #60	@ 0x3c
 800055e:	4823      	ldr	r0, [pc, #140]	@ (80005ec <MX_GPIO_Init+0x14c>)
 8000560:	f002 f84a 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 8000564:	233c      	movs	r3, #60	@ 0x3c
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	481c      	ldr	r0, [pc, #112]	@ (80005ec <MX_GPIO_Init+0x14c>)
 800057c:	f001 fe90 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <MX_GPIO_Init+0x150>)
 8000596:	f001 fe83 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800059a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_GPIO_Init+0x144>)
 80005b4:	f001 fe74 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80005b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <MX_GPIO_Init+0x148>)
 80005d2:	f001 fe65 	bl	80022a0 <HAL_GPIO_Init>

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	@ 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40021400 	.word	0x40021400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40021c00 	.word	0x40021c00
 80005f0:	40020c00 	.word	0x40020c00

080005f4 <main>:
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, sizeof(uart_rx_buffer));
}*/


int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc97 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f92d 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff4d 	bl	80004a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f7ff ff2b 	bl	8000460 <MX_DMA_Init>
  MX_CAN1_Init();
 800060a:	f7ff fe73 	bl	80002f4 <MX_CAN1_Init>
  MX_TIM1_Init();
 800060e:	f000 fabf 	bl	8000b90 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000612:	f000 fbe7 	bl	8000de4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 8000616:	2104      	movs	r1, #4
 8000618:	484b      	ldr	r0, [pc, #300]	@ (8000748 <main+0x154>)
 800061a:	f002 f806 	bl	800262a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 800061e:	2108      	movs	r1, #8
 8000620:	4849      	ldr	r0, [pc, #292]	@ (8000748 <main+0x154>)
 8000622:	f002 f802 	bl	800262a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 8000626:	2110      	movs	r1, #16
 8000628:	4847      	ldr	r0, [pc, #284]	@ (8000748 <main+0x154>)
 800062a:	f001 fffe 	bl	800262a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 800062e:	2120      	movs	r1, #32
 8000630:	4845      	ldr	r0, [pc, #276]	@ (8000748 <main+0x154>)
 8000632:	f001 fffa 	bl	800262a <HAL_GPIO_TogglePin>

  //CAN setup
  canTxHeader.DLC = 8;
 8000636:	4b45      	ldr	r3, [pc, #276]	@ (800074c <main+0x158>)
 8000638:	2208      	movs	r2, #8
 800063a:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 800063c:	4b43      	ldr	r3, [pc, #268]	@ (800074c <main+0x158>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 8000642:	4b42      	ldr	r3, [pc, #264]	@ (800074c <main+0x158>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 8000648:	4b40      	ldr	r3, [pc, #256]	@ (800074c <main+0x158>)
 800064a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064e:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 8000650:	4b3e      	ldr	r3, [pc, #248]	@ (800074c <main+0x158>)
 8000652:	2200      	movs	r2, #0
 8000654:	751a      	strb	r2, [r3, #20]

  //PID Setup
  for (int i = 0; i < 4; i++) {
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e007      	b.n	800066c <main+0x78>
        speed_data[i] = 100;
 800065c:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <main+0x15c>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	2164      	movs	r1, #100	@ 0x64
 8000662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++) {
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b03      	cmp	r3, #3
 8000670:	ddf4      	ble.n	800065c <main+0x68>
  }
  pid_init(&motor_pid[0],10000,5000,20,0,0.05,0,0);
 8000672:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8000754 <main+0x160>
 8000676:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8000754 <main+0x160>
 800067a:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000758 <main+0x164>
 800067e:	2300      	movs	r3, #0
 8000680:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000688:	f242 7110 	movw	r1, #10000	@ 0x2710
 800068c:	4833      	ldr	r0, [pc, #204]	@ (800075c <main+0x168>)
 800068e:	f7ff fded 	bl	800026c <pid_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //runMotors(0x03, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
  //uint8_t feedback[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);   //Uncomment to start the UART interrupt tests
  for (int i = 0; i < 4; i++) {
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	e010      	b.n	80006ba <main+0xc6>
	  /*
	  if (i%2 == 0){
		  targetSpeeds[i] = -100;
	  }
	  else{*/
	  targetSpeeds[i] = 100;
 8000698:	4a31      	ldr	r2, [pc, #196]	@ (8000760 <main+0x16c>)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	2164      	movs	r1, #100	@ 0x64
 800069e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  motor_pid[i].output = 1000;
 80006a2:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <main+0x168>)
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2164      	movs	r1, #100	@ 0x64
 80006a8:	fb01 f303 	mul.w	r3, r1, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	3344      	adds	r3, #68	@ 0x44
 80006b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <main+0x170>)
 80006b2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	3301      	adds	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	ddeb      	ble.n	8000698 <main+0xa4>
	  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	  //HAL_Delay(1);
	  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);  //LED and delay looping


	  uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
 80006c0:	2301      	movs	r3, #1
 80006c2:	713b      	strb	r3, [r7, #4]
 80006c4:	2301      	movs	r3, #1
 80006c6:	717b      	strb	r3, [r7, #5]
 80006c8:	2301      	movs	r3, #1
 80006ca:	71bb      	strb	r3, [r7, #6]
 80006cc:	2301      	movs	r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <main+0x15c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	121b      	asrs	r3, r3, #8
 80006d8:	b21b      	sxth	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	723b      	strb	r3, [r7, #8]
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <main+0x15c>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	727b      	strb	r3, [r7, #9]
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <main+0x15c>)
 80006ea:	885b      	ldrh	r3, [r3, #2]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	121b      	asrs	r3, r3, #8
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	72bb      	strb	r3, [r7, #10]
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <main+0x15c>)
 80006f8:	885b      	ldrh	r3, [r3, #2]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	72fb      	strb	r3, [r7, #11]
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <main+0x15c>)
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	b21b      	sxth	r3, r3
 8000706:	121b      	asrs	r3, r3, #8
 8000708:	b21b      	sxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	733b      	strb	r3, [r7, #12]
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <main+0x15c>)
 8000710:	889b      	ldrh	r3, [r3, #4]
 8000712:	b21b      	sxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	737b      	strb	r3, [r7, #13]
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <main+0x15c>)
 800071a:	88db      	ldrh	r3, [r3, #6]
 800071c:	b21b      	sxth	r3, r3
 800071e:	121b      	asrs	r3, r3, #8
 8000720:	b21b      	sxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73bb      	strb	r3, [r7, #14]
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <main+0x15c>)
 8000728:	88db      	ldrh	r3, [r3, #6]
 800072a:	b21b      	sxth	r3, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	73fb      	strb	r3, [r7, #15]
	  HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	220c      	movs	r2, #12
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0x174>)
 800073a:	f003 f9a8 	bl	8003a8e <HAL_UART_Transmit>
	  if (uart_rx_buffer[0] == headers[0]){
		  uint8_t feedback[] = {0x01, 0x01, 0x01, 0x01, (speed_data[0] >> 8), (speed_data[0] & 0xff), (speed_data[1] >> 8), (speed_data[1] & 0xff), (speed_data[2] >> 8), (speed_data[2] & 0xff),(speed_data[3] >> 8), (speed_data[3] & 0xff)};
		  //runMotors(uart_rx_buffer[1], uart_rx_buffer[2], uart_rx_buffer[3], uart_rx_buffer[4], uart_rx_buffer[5], uart_rx_buffer[6], uart_rx_buffer[7], uart_rx_buffer[8]);
		  HAL_UART_Transmit(&huart2, feedback, sizeof(feedback), 1000);
	  }*/
	  HAL_Delay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fc36 	bl	8000fb0 <HAL_Delay>
  {
 8000744:	bf00      	nop
 8000746:	e7bb      	b.n	80006c0 <main+0xcc>
 8000748:	40021c00 	.word	0x40021c00
 800074c:	20000078 	.word	0x20000078
 8000750:	200000c0 	.word	0x200000c0
 8000754:	00000000 	.word	0x00000000
 8000758:	3d4ccccd 	.word	0x3d4ccccd
 800075c:	200000e0 	.word	0x200000e0
 8000760:	200000d8 	.word	0x200000d8
 8000764:	447a0000 	.word	0x447a0000
 8000768:	20000360 	.word	0x20000360

0800076c <HAL_CAN_RxFifo0MsgPendingCallback>:
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
    if(hcan == &hcan1) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a32      	ldr	r2, [pc, #200]	@ (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d15c      	bne.n	8000836 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, CAN_RxData);
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800077e:	4a32      	ldr	r2, [pc, #200]	@ (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000780:	2100      	movs	r1, #0
 8000782:	482f      	ldr	r0, [pc, #188]	@ (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000784:	f000 fe58 	bl	8001438 <HAL_CAN_GetRxMessage>

        if(canRxHeader.StdId == 0x201) motor_idx = 0;
 8000788:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f240 2201 	movw	r2, #513	@ 0x201
 8000790:	4293      	cmp	r3, r2
 8000792:	d102      	bne.n	800079a <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8000794:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x202) motor_idx = 1;
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f240 2202 	movw	r2, #514	@ 0x202
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d102      	bne.n	80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 2;
 80007ac:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f240 2203 	movw	r2, #515	@ 0x203
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d102      	bne.n	80007be <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 80007b8:	4b24      	ldr	r3, [pc, #144]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x204) motor_idx = 3;
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 80007c6:	d102      	bne.n	80007ce <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	701a      	strb	r2, [r3, #0]

        angle_data[motor_idx] = (uint16_t)(CAN_RxData[0]<<8 | CAN_RxData[1]);
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b219      	sxth	r1, r3
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	b289      	uxth	r1, r1
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80007ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        speed_data[motor_idx] = (int16_t)(CAN_RxData[2]<<8 | CAN_RxData[3]); // originally rpm
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	b21b      	sxth	r3, r3
 8000802:	4912      	ldr	r1, [pc, #72]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000804:	7809      	ldrb	r1, [r1, #0]
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 800080e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        torque_current_data[motor_idx] = (CAN_RxData[4]<<8 | CAN_RxData[5]);
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800081a:	7952      	ldrb	r2, [r2, #5]
 800081c:	431a      	orrs	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	ee07 2a90 	vmov	s15, r2
 8000828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082c:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000028 	.word	0x20000028
 8000844:	200000ac 	.word	0x200000ac
 8000848:	20000090 	.word	0x20000090
 800084c:	200000b4 	.word	0x200000b4
 8000850:	200000b8 	.word	0x200000b8
 8000854:	200000c0 	.word	0x200000c0
 8000858:	200000c8 	.word	0x200000c8

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	@ 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fcb2 	bl	80041d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a27      	ldr	r2, [pc, #156]	@ (8000928 <SystemClock_Config+0xcc>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a21      	ldr	r2, [pc, #132]	@ (800092c <SystemClock_Config+0xd0>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80008cc:	2306      	movs	r3, #6
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008d0:	23a8      	movs	r3, #168	@ 0xa8
 80008d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 febd 	bl	8002660 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ec:	f000 f832 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000906:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2105      	movs	r1, #5
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f91e 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800091a:	f000 f81b 	bl	8000954 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	@ 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 fb15 	bl	8000f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40001000 	.word	0x40001000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	@ 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <HAL_InitTick+0xe4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <HAL_InitTick+0xe4>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d0:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <HAL_InitTick+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 0210 	add.w	r2, r7, #16
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fa92 	bl	8002f10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f6:	f002 fa63 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 80009fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80009fc:	e004      	b.n	8000a08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009fe:	f002 fa5f 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8000a02:	4603      	mov	r3, r0
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <HAL_InitTick+0xe8>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	0c9b      	lsrs	r3, r3, #18
 8000a12:	3b01      	subs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <HAL_InitTick+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a3c:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a3e:	f002 fa99 	bl	8002f74 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d11b      	bne.n	8000a88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <HAL_InitTick+0xec>)
 8000a52:	f002 fae9 	bl	8003028 <HAL_TIM_Base_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d111      	bne.n	8000a88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a64:	2036      	movs	r0, #54	@ 0x36
 8000a66:	f001 f923 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d808      	bhi.n	8000a82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2036      	movs	r0, #54	@ 0x36
 8000a76:	f001 f8ff 	bl	8001c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_InitTick+0xf4>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e002      	b.n	8000a88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3738      	adds	r7, #56	@ 0x38
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	20000270 	.word	0x20000270
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <CAN1_TX_IRQHandler+0x10>)
 8000b0e:	f000 fdcb 	bl	80016a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000028 	.word	0x20000028

08000b1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <CAN1_RX0_IRQHandler+0x10>)
 8000b22:	f000 fdc1 	bl	80016a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000028 	.word	0x20000028

08000b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart2);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <USART2_IRQHandler+0x10>)
 8000b36:	f003 f83c 	bl	8003bb2 <HAL_UART_RxCpltCallback>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000360 	.word	0x20000360

08000b44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <TIM6_DAC_IRQHandler+0x10>)
 8000b4a:	f002 fb2c 	bl	80031a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000270 	.word	0x20000270

08000b58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <DMA2_Stream6_IRQHandler+0x10>)
 8000b5e:	f001 f963 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000300 	.word	0x20000300

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bae:	4a37      	ldr	r2, [pc, #220]	@ (8000c8c <MX_TIM1_Init+0xfc>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000bb2:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bc0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bda:	f002 fa95 	bl	8003108 <HAL_TIM_IC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000be4:	f7ff feb6 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4824      	ldr	r0, [pc, #144]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000bf8:	f002 fe6c 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c02:	f7ff fea7 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481a      	ldr	r0, [pc, #104]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000c1e:	f002 fbca 	bl	80033b6 <HAL_TIM_IC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c28:	f7ff fe94 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c30:	2301      	movs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4813      	ldr	r0, [pc, #76]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000c3c:	f002 fbbb 	bl	80033b6 <HAL_TIM_IC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000c46:	f7ff fe85 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2208      	movs	r2, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000c56:	f002 fbae 	bl	80033b6 <HAL_TIM_IC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c60:	f7ff fe78 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <MX_TIM1_Init+0xf8>)
 8000c70:	f002 fba1 	bl	80033b6 <HAL_TIM_IC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000c7a:	f7ff fe6b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002b8 	.word	0x200002b8
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a47      	ldr	r2, [pc, #284]	@ (8000dcc <HAL_TIM_IC_MspInit+0x13c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f040 8088 	bne.w	8000dc4 <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbc:	4a44      	ldr	r2, [pc, #272]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	4a36      	ldr	r2, [pc, #216]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <HAL_TIM_IC_MspInit+0x140>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	482b      	ldr	r0, [pc, #172]	@ (8000dd4 <HAL_TIM_IC_MspInit+0x144>)
 8000d26:	f001 fabb 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4824      	ldr	r0, [pc, #144]	@ (8000dd8 <HAL_TIM_IC_MspInit+0x148>)
 8000d48:	f001 faaa 	bl	80022a0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d4e:	4a24      	ldr	r2, [pc, #144]	@ (8000de0 <HAL_TIM_IC_MspInit+0x150>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8000d52:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d58:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8000d90:	4812      	ldr	r0, [pc, #72]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000d92:	f000 ff9b 	bl	8001ccc <HAL_DMA_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 8000d9c:	f7ff fdda 	bl	8000954 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000da6:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dbe:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_TIM_IC_MspInit+0x14c>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	20000300 	.word	0x20000300
 8000de0:	400264a0 	.word	0x400264a0

08000de4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f002 fdea 	bl	80039f4 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f7ff fd95 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000360 	.word	0x20000360
 8000e34:	40004400 	.word	0x40004400

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_UART_MspInit+0x94>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d133      	bne.n	8000ec2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000e92:	2360      	movs	r3, #96	@ 0x60
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000eae:	f001 f9f7 	bl	80022a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
      HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2026      	movs	r0, #38	@ 0x26
 8000eb8:	f000 fede 	bl	8001c78 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ebc:	2026      	movs	r0, #38	@ 0x26
 8000ebe:	f000 fef7 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	@ 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff fe33 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f003 f941 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb73 	bl	80005f4 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f1c:	080044e8 	.word	0x080044e8
  ldr r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f24:	200003a8 	.word	0x200003a8

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fe84 	bl	8001c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff fd28 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fcfe 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	200003a4 	.word	0x200003a4

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200003a4 	.word	0x200003a4

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0ed      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f9ca 	bl	80003b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800102c:	f7ff ffb4 	bl	8000f98 <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001032:	e012      	b.n	800105a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001034:	f7ff ffb0 	bl	8000f98 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d90b      	bls.n	800105a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0c5      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0e5      	beq.n	8001034 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0202 	bic.w	r2, r2, #2
 8001076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ff8e 	bl	8000f98 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800107e:	e012      	b.n	80010a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001080:	f7ff ff8a 	bl	8000f98 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d90b      	bls.n	80010a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2205      	movs	r2, #5
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e09f      	b.n	80011e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e5      	bne.n	8001080 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7e5b      	ldrb	r3, [r3, #25]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7e9b      	ldrb	r3, [r3, #26]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0220 	bic.w	r2, r2, #32
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7edb      	ldrb	r3, [r3, #27]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d108      	bne.n	800114c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0210 	bic.w	r2, r2, #16
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e007      	b.n	800115c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0210 	orr.w	r2, r2, #16
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7f1b      	ldrb	r3, [r3, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d108      	bne.n	8001176 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0208 	orr.w	r2, r2, #8
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e007      	b.n	8001186 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0208 	bic.w	r2, r2, #8
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7f5b      	ldrb	r3, [r3, #29]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0204 	orr.w	r2, r2, #4
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e007      	b.n	80011b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	ea42 0103 	orr.w	r1, r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001206:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d003      	beq.n	8001216 <HAL_CAN_ConfigFilter+0x26>
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	2b02      	cmp	r3, #2
 8001212:	f040 80be 	bne.w	8001392 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001216:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001218:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001230:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	431a      	orrs	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2201      	movs	r2, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	401a      	ands	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d123      	bne.n	80012c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800129a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3248      	adds	r2, #72	@ 0x48
 80012a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b6:	6979      	ldr	r1, [r7, #20]
 80012b8:	3348      	adds	r3, #72	@ 0x48
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d122      	bne.n	800130e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3248      	adds	r2, #72	@ 0x48
 80012ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001302:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	3348      	adds	r3, #72	@ 0x48
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	401a      	ands	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001328:	e007      	b.n	800133a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d109      	bne.n	8001356 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001354:	e007      	b.n	8001366 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001384:	f023 0201 	bic.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e006      	b.n	80013a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40006400 	.word	0x40006400

080013b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d12e      	bne.n	8001422 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff fddc 	bl	8000f98 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e2:	e012      	b.n	800140a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e4:	f7ff fdd8 	bl	8000f98 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d90b      	bls.n	800140a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e012      	b.n	8001430 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d003      	beq.n	800145c <HAL_CAN_GetRxMessage+0x24>
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b02      	cmp	r3, #2
 8001458:	f040 80f3 	bne.w	8001642 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d116      	bne.n	800149e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0e7      	b.n	8001650 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0d8      	b.n	8001650 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	331b      	adds	r3, #27
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0204 	and.w	r2, r3, #4
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10c      	bne.n	80014d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	331b      	adds	r3, #27
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0d5b      	lsrs	r3, r3, #21
 80014cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e00b      	b.n	80014ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	331b      	adds	r3, #27
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	331b      	adds	r3, #27
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0202 	and.w	r2, r3, #2
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	331b      	adds	r3, #27
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	3304      	adds	r3, #4
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 020f 	and.w	r2, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	331b      	adds	r3, #27
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	331b      	adds	r3, #27
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0a1a      	lsrs	r2, r3, #8
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0c1a      	lsrs	r2, r3, #16
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3302      	adds	r3, #2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0e1a      	lsrs	r2, r3, #24
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3303      	adds	r3, #3
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0a1a      	lsrs	r2, r3, #8
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3305      	adds	r3, #5
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0c1a      	lsrs	r2, r3, #16
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3306      	adds	r3, #6
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0e1a      	lsrs	r2, r3, #24
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3307      	adds	r3, #7
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	e007      	b.n	800163e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e006      	b.n	8001650 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d002      	beq.n	800167a <HAL_CAN_ActivateNotification+0x1e>
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d109      	bne.n	800168e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6959      	ldr	r1, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e006      	b.n	800169c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d07c      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f983 	bl	8001a16 <HAL_CAN_TxMailbox0CompleteCallback>
 8001710:	e016      	b.n	8001740 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
 8001724:	e00c      	b.n	8001740 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
 8001738:	e002      	b.n	8001740 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f989 	bl	8001a52 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d024      	beq.n	8001794 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f963 	bl	8001a2a <HAL_CAN_TxMailbox1CompleteCallback>
 8001764:	e016      	b.n	8001794 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e00c      	b.n	8001794 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
 800178c:	e002      	b.n	8001794 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f969 	bl	8001a66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d024      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f943 	bl	8001a3e <HAL_CAN_TxMailbox2CompleteCallback>
 80017b8:	e016      	b.n	80017e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	e00c      	b.n	80017e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	e002      	b.n	80017e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f949 	bl	8001a7a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2208      	movs	r2, #8
 8001826:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f930 	bl	8001a8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe ff90 	bl	800076c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2210      	movs	r2, #16
 800186e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2208      	movs	r2, #8
 800188a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f912 	bl	8001ab6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f8f9 	bl	8001aa2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f8fc 	bl	8001aca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2208      	movs	r2, #8
 80018ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f8f5 	bl	8001ade <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d07b      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d072      	beq.n	80019ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001962:	2b00      	cmp	r3, #0
 8001964:	d043      	beq.n	80019ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03e      	beq.n	80019ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001976:	2b60      	cmp	r3, #96	@ 0x60
 8001978:	d02b      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x32a>
 800197a:	2b60      	cmp	r3, #96	@ 0x60
 800197c:	d82e      	bhi.n	80019dc <HAL_CAN_IRQHandler+0x334>
 800197e:	2b50      	cmp	r3, #80	@ 0x50
 8001980:	d022      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x320>
 8001982:	2b50      	cmp	r3, #80	@ 0x50
 8001984:	d82a      	bhi.n	80019dc <HAL_CAN_IRQHandler+0x334>
 8001986:	2b40      	cmp	r3, #64	@ 0x40
 8001988:	d019      	beq.n	80019be <HAL_CAN_IRQHandler+0x316>
 800198a:	2b40      	cmp	r3, #64	@ 0x40
 800198c:	d826      	bhi.n	80019dc <HAL_CAN_IRQHandler+0x334>
 800198e:	2b30      	cmp	r3, #48	@ 0x30
 8001990:	d010      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x30c>
 8001992:	2b30      	cmp	r3, #48	@ 0x30
 8001994:	d822      	bhi.n	80019dc <HAL_CAN_IRQHandler+0x334>
 8001996:	2b10      	cmp	r3, #16
 8001998:	d002      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x2f8>
 800199a:	2b20      	cmp	r3, #32
 800199c:	d005      	beq.n	80019aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800199e:	e01d      	b.n	80019dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a8:	e019      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b2:	e014      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	f043 0320 	orr.w	r3, r3, #32
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019bc:	e00f      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019c6:	e00a      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019d0:	e005      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019da:	e000      	b.n	80019de <HAL_CAN_IRQHandler+0x336>
            break;
 80019dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2204      	movs	r2, #4
 80019f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f872 	bl	8001af2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	@ 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	@ (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff4c 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8a:	f7ff ff61 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff ffb1 	bl	8001bfc <NVIC_EncodePriority>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff80 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff54 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff f95e 	bl	8000f98 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e099      	b.n	8001e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	e00f      	b.n	8001d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0a:	f7ff f945 	bl	8000f98 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d908      	bls.n	8001d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e078      	b.n	8001e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e8      	bne.n	8001d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <HAL_DMA_Init+0x158>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d117      	bne.n	8001dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f9e9 	bl	80021a8 <DMA_CheckFifoParam>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dea:	2301      	movs	r3, #1
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f9a0 	bl	800213c <DMA_CalcBaseAndBitshift>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	f010803f 	.word	0xf010803f

08001e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e34:	4b8e      	ldr	r3, [pc, #568]	@ (8002070 <HAL_DMA_IRQHandler+0x248>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a8e      	ldr	r2, [pc, #568]	@ (8002074 <HAL_DMA_IRQHandler+0x24c>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2208      	movs	r2, #8
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	2208      	movs	r2, #8
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	2204      	movs	r2, #4
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	2204      	movs	r2, #4
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	2210      	movs	r2, #16
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d043      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03c      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	2210      	movs	r2, #16
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d018      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d024      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e01f      	b.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 808f 	beq.w	80020c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8087 	beq.w	80020c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d136      	bne.n	8002040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0216 	bic.w	r2, r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_DMA_IRQHandler+0x1da>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	223f      	movs	r2, #63	@ 0x3f
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002032:	2b00      	cmp	r3, #0
 8002034:	d07e      	beq.n	8002134 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
        }
        return;
 800203e:	e079      	b.n	8002134 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01d      	beq.n	800208a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	2b00      	cmp	r3, #0
 8002062:	d031      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e02c      	b.n	80020c8 <HAL_DMA_IRQHandler+0x2a0>
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000
 8002074:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d023      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e01e      	b.n	80020c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0210 	bic.w	r2, r2, #16
 80020a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d032      	beq.n	8002136 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d022      	beq.n	8002122 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2205      	movs	r2, #5
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d307      	bcc.n	8002110 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f2      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x2cc>
 800210e:	e000      	b.n	8002112 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002110:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
 8002132:	e000      	b.n	8002136 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002134:	bf00      	nop
    }
  }
}
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3b10      	subs	r3, #16
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <DMA_CalcBaseAndBitshift+0x64>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d909      	bls.n	800217e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	@ 0x58
 800217c:	e007      	b.n	800218e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	aaaaaaab 	.word	0xaaaaaaab
 80021a4:	080044d0 	.word	0x080044d0

080021a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d856      	bhi.n	8002276 <DMA_CheckFifoParam+0xce>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <DMA_CheckFifoParam+0x28>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	08002277 	.word	0x08002277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d046      	beq.n	800227a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e043      	b.n	800227a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021fa:	d140      	bne.n	800227e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e03d      	b.n	800227e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220a:	d121      	bne.n	8002250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d837      	bhi.n	8002282 <DMA_CheckFifoParam+0xda>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <DMA_CheckFifoParam+0x70>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	0800222f 	.word	0x0800222f
 8002220:	08002229 	.word	0x08002229
 8002224:	08002241 	.word	0x08002241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e030      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d025      	beq.n	8002286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223e:	e022      	b.n	8002286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224e:	e01c      	b.n	800228a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d903      	bls.n	800225e <DMA_CheckFifoParam+0xb6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800225c:	e018      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      break;
 8002262:	e015      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e00b      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002276:	bf00      	nop
 8002278:	e00a      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e008      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e006      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e004      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;   
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
    }
  } 
  
  return status; 
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e177      	b.n	80025ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8166 	bne.w	80025a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80c0 	beq.w	80025a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b66      	ldr	r3, [pc, #408]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a65      	ldr	r2, [pc, #404]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b63      	ldr	r3, [pc, #396]	@ (80025c4 <HAL_GPIO_Init+0x324>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a61      	ldr	r2, [pc, #388]	@ (80025c8 <HAL_GPIO_Init+0x328>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <HAL_GPIO_Init+0x32c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d037      	beq.n	80024de <HAL_GPIO_Init+0x23e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_GPIO_Init+0x330>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_GPIO_Init+0x23a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a56      	ldr	r2, [pc, #344]	@ (80025d4 <HAL_GPIO_Init+0x334>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02b      	beq.n	80024d6 <HAL_GPIO_Init+0x236>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a55      	ldr	r2, [pc, #340]	@ (80025d8 <HAL_GPIO_Init+0x338>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d025      	beq.n	80024d2 <HAL_GPIO_Init+0x232>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a54      	ldr	r2, [pc, #336]	@ (80025dc <HAL_GPIO_Init+0x33c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <HAL_GPIO_Init+0x22e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a53      	ldr	r2, [pc, #332]	@ (80025e0 <HAL_GPIO_Init+0x340>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x22a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a52      	ldr	r2, [pc, #328]	@ (80025e4 <HAL_GPIO_Init+0x344>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a51      	ldr	r2, [pc, #324]	@ (80025e8 <HAL_GPIO_Init+0x348>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x222>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a50      	ldr	r2, [pc, #320]	@ (80025ec <HAL_GPIO_Init+0x34c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x21e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4f      	ldr	r2, [pc, #316]	@ (80025f0 <HAL_GPIO_Init+0x350>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x21a>
 80024b6:	2309      	movs	r3, #9
 80024b8:	e012      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ba:	230a      	movs	r3, #10
 80024bc:	e010      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024be:	2308      	movs	r3, #8
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_GPIO_Init+0x328>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3d      	ldr	r3, [pc, #244]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a34      	ldr	r2, [pc, #208]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a29      	ldr	r2, [pc, #164]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae84 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022400 	.word	0x40022400
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43d9      	mvns	r1, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	400b      	ands	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e267      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d075      	beq.n	800276a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267e:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b85      	ldr	r3, [pc, #532]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b82      	ldr	r3, [pc, #520]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b7e      	ldr	r3, [pc, #504]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d157      	bne.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e242      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x74>
 80026c6:	4b76      	ldr	r3, [pc, #472]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b70      	ldr	r3, [pc, #448]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6f      	ldr	r2, [pc, #444]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6d      	ldr	r3, [pc, #436]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6c      	ldr	r2, [pc, #432]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026f8:	4b69      	ldr	r3, [pc, #420]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a68      	ldr	r2, [pc, #416]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b66      	ldr	r3, [pc, #408]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fc3e 	bl	8000f98 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fc3a 	bl	8000f98 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e207      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5b      	ldr	r3, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xc0>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fc2a 	bl	8000f98 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fc26 	bl	8000f98 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1f3      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b51      	ldr	r3, [pc, #324]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b44      	ldr	r3, [pc, #272]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c7      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4937      	ldr	r1, [pc, #220]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <HAL_RCC_OscConfig+0x244>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fbdf 	bl	8000f98 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe fbdb 	bl	8000f98 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1a8      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4925      	ldr	r1, [pc, #148]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_OscConfig+0x244>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fbbe 	bl	8000f98 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002820:	f7fe fbba 	bl	8000f98 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e187      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d036      	beq.n	80028b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fb9e 	bl	8000f98 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002860:	f7fe fb9a 	bl	8000f98 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e167      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x200>
 800287e:	e01b      	b.n	80028b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fb87 	bl	8000f98 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fb83 	bl	8000f98 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d907      	bls.n	80028ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e150      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ea      	bne.n	800288e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8097 	beq.w	80029f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b81      	ldr	r3, [pc, #516]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b77      	ldr	r3, [pc, #476]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a73      	ldr	r2, [pc, #460]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe fb43 	bl	8000f98 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe fb3f 	bl	8000f98 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e10c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x2ea>
 800293c:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a63      	ldr	r2, [pc, #396]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	e01c      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x30c>
 8002952:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6713      	str	r3, [r2, #112]	@ 0x70
 800295e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800296c:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	4a57      	ldr	r2, [pc, #348]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	@ 0x70
 8002978:	4b55      	ldr	r3, [pc, #340]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a54      	ldr	r2, [pc, #336]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe fb04 	bl	8000f98 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe fb00 	bl	8000f98 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0cb      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ee      	beq.n	8002994 <HAL_RCC_OscConfig+0x334>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe faee 	bl	8000f98 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe faea 	bl	8000f98 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b5      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ee      	bne.n	80029c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4a38      	ldr	r2, [pc, #224]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a1 	beq.w	8002b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fe:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d05c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d141      	bne.n	8002a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fabe 	bl	8000f98 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe faba 	bl	8000f98 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	491b      	ldr	r1, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa93 	bl	8000f98 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fa8f 	bl	8000f98 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e05c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x416>
 8002a94:	e054      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fa7c 	bl	8000f98 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fa78 	bl	8000f98 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e045      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
 8002ac2:	e03d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e038      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cc      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b65      	ldr	r3, [pc, #404]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d044      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e067      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4934      	ldr	r1, [pc, #208]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe f9aa 	bl	8000f98 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe f9a6 	bl	8000f98 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20c      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fe5a 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	080044b8 	.word	0x080044b8
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b090      	sub	sp, #64	@ 0x40
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d34:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f200 80a1 	bhi.w	8002e88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4e:	e09b      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002d54:	e09b      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d56:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d5a:	e098      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d66:	4b4d      	ldr	r3, [pc, #308]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d028      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d84:	2100      	movs	r1, #0
 8002d86:	4b47      	ldr	r3, [pc, #284]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d88:	fb03 f201 	mul.w	r2, r3, r1
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	4a43      	ldr	r2, [pc, #268]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d96:	fba0 1202 	umull	r1, r2, r0, r2
 8002d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da2:	4413      	add	r3, r2
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da8:	2200      	movs	r2, #0
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	61fa      	str	r2, [r7, #28]
 8002dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002db6:	f7fd f9f9 	bl	80001ac <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc2:	e053      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	617a      	str	r2, [r7, #20]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dd6:	f04f 0b00 	mov.w	fp, #0
 8002dda:	4652      	mov	r2, sl
 8002ddc:	465b      	mov	r3, fp
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dec:	0150      	lsls	r0, r2, #5
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	ebb2 080a 	subs.w	r8, r2, sl
 8002df6:	eb63 090b 	sbc.w	r9, r3, fp
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e12:	eb63 0509 	sbc.w	r5, r3, r9
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	00eb      	lsls	r3, r5, #3
 8002e20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e24:	00e2      	lsls	r2, r4, #3
 8002e26:	4614      	mov	r4, r2
 8002e28:	461d      	mov	r5, r3
 8002e2a:	eb14 030a 	adds.w	r3, r4, sl
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	eb45 030b 	adc.w	r3, r5, fp
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	2200      	movs	r2, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	60fa      	str	r2, [r7, #12]
 8002e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e60:	f7fd f9a4 	bl	80001ac <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3740      	adds	r7, #64	@ 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	00b71b00 	.word	0x00b71b00

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	@ (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	@ (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	080044c8 	.word	0x080044c8

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffdc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0b5b      	lsrs	r3, r3, #13
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	080044c8 	.word	0x080044c8

08002f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f44:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f52:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <HAL_RCC_GetClockConfig+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e041      	b.n	800300a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f839 	bl	8003012 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f000 fac4 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e04e      	b.n	80030de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <HAL_TIM_Base_Start_IT+0xc4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306a:	d01d      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1e      	ldr	r2, [pc, #120]	@ (80030f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a19      	ldr	r2, [pc, #100]	@ (8003100 <HAL_TIM_Base_Start_IT+0xd8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0x80>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a18      	ldr	r2, [pc, #96]	@ (8003104 <HAL_TIM_Base_Start_IT+0xdc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d010      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	e007      	b.n	80030dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40000c00 	.word	0x40000c00
 80030fc:	40010400 	.word	0x40010400
 8003100:	40014000 	.word	0x40014000
 8003104:	40001800 	.word	0x40001800

08003108 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e041      	b.n	800319e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fdae 	bl	8000c90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 f9fa 	bl	8003540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d122      	bne.n	8003202 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d11b      	bne.n	8003202 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0202 	mvn.w	r2, #2
 80031d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f98a 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 80031ee:	e005      	b.n	80031fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f97c 	bl	80034ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f98d 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d122      	bne.n	8003256 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d11b      	bne.n	8003256 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0204 	mvn.w	r2, #4
 8003226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f960 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 8003242:	e005      	b.n	8003250 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f952 	bl	80034ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f963 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d122      	bne.n	80032aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11b      	bne.n	80032aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0208 	mvn.w	r2, #8
 800327a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f936 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f928 	bl	80034ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f939 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d122      	bne.n	80032fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0210 	mvn.w	r2, #16
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2208      	movs	r2, #8
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f90c 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8fe 	bl	80034ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f90f 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0201 	mvn.w	r2, #1
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fd fb03 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	2b80      	cmp	r3, #128	@ 0x80
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fb45 	bl	80039e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003360:	2b40      	cmp	r3, #64	@ 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8d4 	bl	800352a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fb0f 	bl	80039cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e088      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11b      	bne.n	800341a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f000 f945 	bl	8003680 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 020c 	bic.w	r2, r2, #12
 8003404:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6999      	ldr	r1, [r3, #24]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e060      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d11c      	bne.n	800345a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f000 f99a 	bl	8003768 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003442:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]
 8003458:	e040      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f000 f9b7 	bl	80037e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020c 	bic.w	r2, r2, #12
 8003482:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69d9      	ldr	r1, [r3, #28]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	e021      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d11c      	bne.n	80034d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f000 f9d4 	bl	800385a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80034c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
 80034d6:	e001      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a40      	ldr	r2, [pc, #256]	@ (8003654 <TIM_Base_SetConfig+0x114>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d00f      	beq.n	8003580 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3d      	ldr	r2, [pc, #244]	@ (8003658 <TIM_Base_SetConfig+0x118>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3c      	ldr	r2, [pc, #240]	@ (800365c <TIM_Base_SetConfig+0x11c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3b      	ldr	r2, [pc, #236]	@ (8003660 <TIM_Base_SetConfig+0x120>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3a      	ldr	r2, [pc, #232]	@ (8003664 <TIM_Base_SetConfig+0x124>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2f      	ldr	r2, [pc, #188]	@ (8003654 <TIM_Base_SetConfig+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02b      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d027      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <TIM_Base_SetConfig+0x118>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d023      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <TIM_Base_SetConfig+0x11c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003660 <TIM_Base_SetConfig+0x120>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01b      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a29      	ldr	r2, [pc, #164]	@ (8003664 <TIM_Base_SetConfig+0x124>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d017      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <TIM_Base_SetConfig+0x128>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a27      	ldr	r2, [pc, #156]	@ (800366c <TIM_Base_SetConfig+0x12c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00f      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a26      	ldr	r2, [pc, #152]	@ (8003670 <TIM_Base_SetConfig+0x130>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <TIM_Base_SetConfig+0x134>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a24      	ldr	r2, [pc, #144]	@ (8003678 <TIM_Base_SetConfig+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a23      	ldr	r2, [pc, #140]	@ (800367c <TIM_Base_SetConfig+0x13c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <TIM_Base_SetConfig+0x114>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0xf8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <TIM_Base_SetConfig+0x124>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d103      	bne.n	8003640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	615a      	str	r2, [r3, #20]
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40010400 	.word	0x40010400
 8003668:	40014000 	.word	0x40014000
 800366c:	40014400 	.word	0x40014400
 8003670:	40014800 	.word	0x40014800
 8003674:	40001800 	.word	0x40001800
 8003678:	40001c00 	.word	0x40001c00
 800367c:	40002000 	.word	0x40002000

08003680 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a28      	ldr	r2, [pc, #160]	@ (800374c <TIM_TI1_SetConfig+0xcc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b4:	d017      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <TIM_TI1_SetConfig+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <TIM_TI1_SetConfig+0xd4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <TIM_TI1_SetConfig+0xd8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a22      	ldr	r2, [pc, #136]	@ (800375c <TIM_TI1_SetConfig+0xdc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <TIM_TI1_SetConfig+0xe0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_TI1_SetConfig+0x66>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a20      	ldr	r2, [pc, #128]	@ (8003764 <TIM_TI1_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <TIM_TI1_SetConfig+0x6a>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <TIM_TI1_SetConfig+0x6c>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e003      	b.n	800370a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	b2db      	uxtb	r3, r3
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 030a 	and.w	r3, r3, #10
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40010400 	.word	0x40010400
 8003760:	40014000 	.word	0x40014000
 8003764:	40001800 	.word	0x40001800

08003768 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0210 	bic.w	r2, r3, #16
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800381e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	b2db      	uxtb	r3, r3
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003832:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b087      	sub	sp, #28
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003886:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003898:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	031b      	lsls	r3, r3, #12
 800389e:	b29b      	uxth	r3, r3
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80038ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	031b      	lsls	r3, r3, #12
 80038b2:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e05a      	b.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d022      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d01d      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d018      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a17      	ldr	r2, [pc, #92]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800397c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40001800 	.word	0x40001800

080039cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e03f      	b.n	8003a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fa0c 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f933 	bl	8003ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08a      	sub	sp, #40	@ 0x28
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d17c      	bne.n	8003ba8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_Transmit+0x2c>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e075      	b.n	8003baa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x3e>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e06e      	b.n	8003baa <HAL_UART_Transmit+0x11c>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2221      	movs	r2, #33	@ 0x21
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae2:	f7fd fa59 	bl	8000f98 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afc:	d108      	bne.n	8003b10 <HAL_UART_Transmit+0x82>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003b20:	e02a      	b.n	8003b78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2180      	movs	r1, #128	@ 0x80
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f84a 	bl	8003bc6 <UART_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e036      	b.n	8003baa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3302      	adds	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e007      	b.n	8003b6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1cf      	bne.n	8003b22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2140      	movs	r1, #64	@ 0x40
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f81a 	bl	8003bc6 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b090      	sub	sp, #64	@ 0x40
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	e050      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bde:	d04c      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be6:	f7fd f9d7 	bl	8000f98 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d241      	bcs.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c16:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e5      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c4a:	623a      	str	r2, [r7, #32]
 8003c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	69f9      	ldr	r1, [r7, #28]
 8003c50:	6a3a      	ldr	r2, [r7, #32]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e00f      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d09f      	beq.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3740      	adds	r7, #64	@ 0x40
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b0c0      	sub	sp, #256	@ 0x100
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	68d9      	ldr	r1, [r3, #12]
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cfc:	f021 010c 	bic.w	r1, r1, #12
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	6999      	ldr	r1, [r3, #24]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	ea40 0301 	orr.w	r3, r0, r1
 8003d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <UART_SetConfig+0x2cc>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0xa0>
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <UART_SetConfig+0x2d0>)
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d104      	bne.n	8003d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff f8d0 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8003d48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d4c:	e003      	b.n	8003d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7ff f8b7 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003d52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d60:	f040 810c 	bne.w	8003f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	1891      	adds	r1, r2, r2
 8003d7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d7e:	415b      	adcs	r3, r3
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d86:	4621      	mov	r1, r4
 8003d88:	eb12 0801 	adds.w	r8, r2, r1
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	eb43 0901 	adc.w	r9, r3, r1
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003da6:	4690      	mov	r8, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	eb18 0303 	adds.w	r3, r8, r3
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003db4:	462b      	mov	r3, r5
 8003db6:	eb49 0303 	adc.w	r3, r9, r3
 8003dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	18db      	adds	r3, r3, r3
 8003dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd8:	4613      	mov	r3, r2
 8003dda:	eb42 0303 	adc.w	r3, r2, r3
 8003dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003de8:	f7fc f9e0 	bl	80001ac <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2302 	umull	r2, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	011c      	lsls	r4, r3, #4
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e14:	415b      	adcs	r3, r3
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e22:	4649      	mov	r1, r9
 8003e24:	eb43 0b01 	adc.w	fp, r3, r1
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3c:	4692      	mov	sl, r2
 8003e3e:	469b      	mov	fp, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	eb1a 0303 	adds.w	r3, sl, r3
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	18db      	adds	r3, r3, r3
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e6e:	4613      	mov	r3, r2
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e7e:	f7fc f995 	bl	80001ac <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eac:	441c      	add	r4, r3
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f24:	460b      	mov	r3, r1
 8003f26:	18db      	adds	r3, r3, r3
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f3a:	f7fc f937 	bl	80001ac <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f44:	fba3 1302 	umull	r1, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2164      	movs	r1, #100	@ 0x64
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	3332      	adds	r3, #50	@ 0x32
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4422      	add	r2, r4
 8003f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f6c:	e106      	b.n	800417c <UART_SetConfig+0x4d8>
 8003f6e:	bf00      	nop
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40011400 	.word	0x40011400
 8003f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f8e:	4642      	mov	r2, r8
 8003f90:	464b      	mov	r3, r9
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	6239      	str	r1, [r7, #32]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	1854      	adds	r4, r2, r1
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	eb43 0501 	adc.w	r5, r3, r1
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	00eb      	lsls	r3, r5, #3
 8003fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb6:	00e2      	lsls	r2, r4, #3
 8003fb8:	4614      	mov	r4, r2
 8003fba:	461d      	mov	r5, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	18e3      	adds	r3, r4, r3
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	eb45 0303 	adc.w	r3, r5, r3
 8003fca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fea:	4629      	mov	r1, r5
 8003fec:	008b      	lsls	r3, r1, #2
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	008a      	lsls	r2, r1, #2
 8003ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ffc:	f7fc f8d6 	bl	80001ac <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4b60      	ldr	r3, [pc, #384]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004006:	fba3 2302 	umull	r2, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	011c      	lsls	r4, r3, #4
 800400e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004018:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800401c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	1891      	adds	r1, r2, r2
 8004026:	61b9      	str	r1, [r7, #24]
 8004028:	415b      	adcs	r3, r3
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	4641      	mov	r1, r8
 8004032:	1851      	adds	r1, r2, r1
 8004034:	6139      	str	r1, [r7, #16]
 8004036:	4649      	mov	r1, r9
 8004038:	414b      	adcs	r3, r1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004048:	4659      	mov	r1, fp
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4651      	mov	r1, sl
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4642      	mov	r2, r8
 800405e:	189b      	adds	r3, r3, r2
 8004060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004064:	464b      	mov	r3, r9
 8004066:	460a      	mov	r2, r1
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800407a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004088:	4649      	mov	r1, r9
 800408a:	008b      	lsls	r3, r1, #2
 800408c:	4641      	mov	r1, r8
 800408e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004092:	4641      	mov	r1, r8
 8004094:	008a      	lsls	r2, r1, #2
 8004096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800409a:	f7fc f887 	bl	80001ac <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	@ 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	@ 0x32
 80040b8:	4a33      	ldr	r2, [pc, #204]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c4:	441c      	add	r4, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040d4:	4642      	mov	r2, r8
 80040d6:	464b      	mov	r3, r9
 80040d8:	1891      	adds	r1, r2, r2
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	415b      	adcs	r3, r3
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e4:	4641      	mov	r1, r8
 80040e6:	1851      	adds	r1, r2, r1
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	4649      	mov	r1, r9
 80040ec:	414b      	adcs	r3, r1
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040fc:	4659      	mov	r1, fp
 80040fe:	00cb      	lsls	r3, r1, #3
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004106:	4651      	mov	r1, sl
 8004108:	00ca      	lsls	r2, r1, #3
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	4603      	mov	r3, r0
 8004110:	4642      	mov	r2, r8
 8004112:	189b      	adds	r3, r3, r2
 8004114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004116:	464b      	mov	r3, r9
 8004118:	460a      	mov	r2, r1
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
 800412a:	667a      	str	r2, [r7, #100]	@ 0x64
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004138:	4649      	mov	r1, r9
 800413a:	008b      	lsls	r3, r1, #2
 800413c:	4641      	mov	r1, r8
 800413e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004142:	4641      	mov	r1, r8
 8004144:	008a      	lsls	r2, r1, #2
 8004146:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800414a:	f7fc f82f 	bl	80001ac <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	@ 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	3332      	adds	r3, #50	@ 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4422      	add	r2, r4
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004188:	51eb851f 	.word	0x51eb851f

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	@ (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	@ (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	@ (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 f97e 	bl	80044a0 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	080044e0 	.word	0x080044e0
 80041c8:	080044e0 	.word	0x080044e0
 80041cc:	080044e0 	.word	0x080044e0
 80041d0:	080044e4 	.word	0x080044e4

080041d4 <memset>:
 80041d4:	4402      	add	r2, r0
 80041d6:	4603      	mov	r3, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	d100      	bne.n	80041de <memset+0xa>
 80041dc:	4770      	bx	lr
 80041de:	f803 1b01 	strb.w	r1, [r3], #1
 80041e2:	e7f9      	b.n	80041d8 <memset+0x4>

080041e4 <__udivmoddi4>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	9d08      	ldr	r5, [sp, #32]
 80041ea:	460e      	mov	r6, r1
 80041ec:	4604      	mov	r4, r0
 80041ee:	460f      	mov	r7, r1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d14a      	bne.n	800428a <__udivmoddi4+0xa6>
 80041f4:	4694      	mov	ip, r2
 80041f6:	458c      	cmp	ip, r1
 80041f8:	fab2 f282 	clz	r2, r2
 80041fc:	d960      	bls.n	80042c0 <__udivmoddi4+0xdc>
 80041fe:	b142      	cbz	r2, 8004212 <__udivmoddi4+0x2e>
 8004200:	f1c2 0320 	rsb	r3, r2, #32
 8004204:	4097      	lsls	r7, r2
 8004206:	fa20 f303 	lsr.w	r3, r0, r3
 800420a:	fa0c fc02 	lsl.w	ip, ip, r2
 800420e:	431f      	orrs	r7, r3
 8004210:	4094      	lsls	r4, r2
 8004212:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004216:	fa1f f68c 	uxth.w	r6, ip
 800421a:	fbb7 f1fe 	udiv	r1, r7, lr
 800421e:	0c23      	lsrs	r3, r4, #16
 8004220:	fb0e 7711 	mls	r7, lr, r1, r7
 8004224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004228:	fb01 f006 	mul.w	r0, r1, r6
 800422c:	4298      	cmp	r0, r3
 800422e:	d90a      	bls.n	8004246 <__udivmoddi4+0x62>
 8004230:	eb1c 0303 	adds.w	r3, ip, r3
 8004234:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8004238:	f080 8115 	bcs.w	8004466 <__udivmoddi4+0x282>
 800423c:	4298      	cmp	r0, r3
 800423e:	f240 8112 	bls.w	8004466 <__udivmoddi4+0x282>
 8004242:	3902      	subs	r1, #2
 8004244:	4463      	add	r3, ip
 8004246:	1a1b      	subs	r3, r3, r0
 8004248:	b2a4      	uxth	r4, r4
 800424a:	fbb3 f0fe 	udiv	r0, r3, lr
 800424e:	fb0e 3310 	mls	r3, lr, r0, r3
 8004252:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004256:	fb00 f606 	mul.w	r6, r0, r6
 800425a:	42a6      	cmp	r6, r4
 800425c:	d90a      	bls.n	8004274 <__udivmoddi4+0x90>
 800425e:	eb1c 0404 	adds.w	r4, ip, r4
 8004262:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004266:	f080 8100 	bcs.w	800446a <__udivmoddi4+0x286>
 800426a:	42a6      	cmp	r6, r4
 800426c:	f240 80fd 	bls.w	800446a <__udivmoddi4+0x286>
 8004270:	4464      	add	r4, ip
 8004272:	3802      	subs	r0, #2
 8004274:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004278:	1ba4      	subs	r4, r4, r6
 800427a:	2100      	movs	r1, #0
 800427c:	b11d      	cbz	r5, 8004286 <__udivmoddi4+0xa2>
 800427e:	40d4      	lsrs	r4, r2
 8004280:	2300      	movs	r3, #0
 8004282:	e9c5 4300 	strd	r4, r3, [r5]
 8004286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428a:	428b      	cmp	r3, r1
 800428c:	d905      	bls.n	800429a <__udivmoddi4+0xb6>
 800428e:	b10d      	cbz	r5, 8004294 <__udivmoddi4+0xb0>
 8004290:	e9c5 0100 	strd	r0, r1, [r5]
 8004294:	2100      	movs	r1, #0
 8004296:	4608      	mov	r0, r1
 8004298:	e7f5      	b.n	8004286 <__udivmoddi4+0xa2>
 800429a:	fab3 f183 	clz	r1, r3
 800429e:	2900      	cmp	r1, #0
 80042a0:	d146      	bne.n	8004330 <__udivmoddi4+0x14c>
 80042a2:	42b3      	cmp	r3, r6
 80042a4:	d302      	bcc.n	80042ac <__udivmoddi4+0xc8>
 80042a6:	4282      	cmp	r2, r0
 80042a8:	f200 80f5 	bhi.w	8004496 <__udivmoddi4+0x2b2>
 80042ac:	1a84      	subs	r4, r0, r2
 80042ae:	eb66 0203 	sbc.w	r2, r6, r3
 80042b2:	2001      	movs	r0, #1
 80042b4:	4617      	mov	r7, r2
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	d0e5      	beq.n	8004286 <__udivmoddi4+0xa2>
 80042ba:	e9c5 4700 	strd	r4, r7, [r5]
 80042be:	e7e2      	b.n	8004286 <__udivmoddi4+0xa2>
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	f040 8093 	bne.w	80043ec <__udivmoddi4+0x208>
 80042c6:	eba1 030c 	sub.w	r3, r1, ip
 80042ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80042ce:	fa1f fe8c 	uxth.w	lr, ip
 80042d2:	2101      	movs	r1, #1
 80042d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80042d8:	fb07 3016 	mls	r0, r7, r6, r3
 80042dc:	0c23      	lsrs	r3, r4, #16
 80042de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80042e2:	fb0e f006 	mul.w	r0, lr, r6
 80042e6:	4298      	cmp	r0, r3
 80042e8:	d908      	bls.n	80042fc <__udivmoddi4+0x118>
 80042ea:	eb1c 0303 	adds.w	r3, ip, r3
 80042ee:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80042f2:	d202      	bcs.n	80042fa <__udivmoddi4+0x116>
 80042f4:	4298      	cmp	r0, r3
 80042f6:	f200 80d0 	bhi.w	800449a <__udivmoddi4+0x2b6>
 80042fa:	4646      	mov	r6, r8
 80042fc:	1a1b      	subs	r3, r3, r0
 80042fe:	b2a4      	uxth	r4, r4
 8004300:	fbb3 f0f7 	udiv	r0, r3, r7
 8004304:	fb07 3310 	mls	r3, r7, r0, r3
 8004308:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800430c:	fb0e fe00 	mul.w	lr, lr, r0
 8004310:	45a6      	cmp	lr, r4
 8004312:	d908      	bls.n	8004326 <__udivmoddi4+0x142>
 8004314:	eb1c 0404 	adds.w	r4, ip, r4
 8004318:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800431c:	d202      	bcs.n	8004324 <__udivmoddi4+0x140>
 800431e:	45a6      	cmp	lr, r4
 8004320:	f200 80b6 	bhi.w	8004490 <__udivmoddi4+0x2ac>
 8004324:	4618      	mov	r0, r3
 8004326:	eba4 040e 	sub.w	r4, r4, lr
 800432a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800432e:	e7a5      	b.n	800427c <__udivmoddi4+0x98>
 8004330:	f1c1 0720 	rsb	r7, r1, #32
 8004334:	408b      	lsls	r3, r1
 8004336:	fa22 fc07 	lsr.w	ip, r2, r7
 800433a:	ea4c 0c03 	orr.w	ip, ip, r3
 800433e:	fa06 fe01 	lsl.w	lr, r6, r1
 8004342:	fa20 f407 	lsr.w	r4, r0, r7
 8004346:	fa26 f307 	lsr.w	r3, r6, r7
 800434a:	ea44 040e 	orr.w	r4, r4, lr
 800434e:	fa00 f801 	lsl.w	r8, r0, r1
 8004352:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8004356:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800435a:	fbb3 fef0 	udiv	lr, r3, r0
 800435e:	fa1f f68c 	uxth.w	r6, ip
 8004362:	fb00 331e 	mls	r3, r0, lr, r3
 8004366:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800436a:	fb0e f906 	mul.w	r9, lr, r6
 800436e:	4599      	cmp	r9, r3
 8004370:	fa02 f201 	lsl.w	r2, r2, r1
 8004374:	d90b      	bls.n	800438e <__udivmoddi4+0x1aa>
 8004376:	eb1c 0303 	adds.w	r3, ip, r3
 800437a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800437e:	f080 8085 	bcs.w	800448c <__udivmoddi4+0x2a8>
 8004382:	4599      	cmp	r9, r3
 8004384:	f240 8082 	bls.w	800448c <__udivmoddi4+0x2a8>
 8004388:	f1ae 0e02 	sub.w	lr, lr, #2
 800438c:	4463      	add	r3, ip
 800438e:	eba3 0909 	sub.w	r9, r3, r9
 8004392:	b2a4      	uxth	r4, r4
 8004394:	fbb9 f3f0 	udiv	r3, r9, r0
 8004398:	fb00 9913 	mls	r9, r0, r3, r9
 800439c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80043a0:	fb03 f606 	mul.w	r6, r3, r6
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d908      	bls.n	80043ba <__udivmoddi4+0x1d6>
 80043a8:	eb1c 0404 	adds.w	r4, ip, r4
 80043ac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80043b0:	d268      	bcs.n	8004484 <__udivmoddi4+0x2a0>
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d966      	bls.n	8004484 <__udivmoddi4+0x2a0>
 80043b6:	3b02      	subs	r3, #2
 80043b8:	4464      	add	r4, ip
 80043ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80043be:	1ba4      	subs	r4, r4, r6
 80043c0:	fba0 e602 	umull	lr, r6, r0, r2
 80043c4:	42b4      	cmp	r4, r6
 80043c6:	4673      	mov	r3, lr
 80043c8:	46b1      	mov	r9, r6
 80043ca:	d352      	bcc.n	8004472 <__udivmoddi4+0x28e>
 80043cc:	d04f      	beq.n	800446e <__udivmoddi4+0x28a>
 80043ce:	b15d      	cbz	r5, 80043e8 <__udivmoddi4+0x204>
 80043d0:	ebb8 0203 	subs.w	r2, r8, r3
 80043d4:	eb64 0409 	sbc.w	r4, r4, r9
 80043d8:	fa04 f707 	lsl.w	r7, r4, r7
 80043dc:	fa22 f301 	lsr.w	r3, r2, r1
 80043e0:	431f      	orrs	r7, r3
 80043e2:	40cc      	lsrs	r4, r1
 80043e4:	e9c5 7400 	strd	r7, r4, [r5]
 80043e8:	2100      	movs	r1, #0
 80043ea:	e74c      	b.n	8004286 <__udivmoddi4+0xa2>
 80043ec:	f1c2 0120 	rsb	r1, r2, #32
 80043f0:	fa20 f301 	lsr.w	r3, r0, r1
 80043f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80043f8:	fa26 f101 	lsr.w	r1, r6, r1
 80043fc:	4096      	lsls	r6, r2
 80043fe:	4333      	orrs	r3, r6
 8004400:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004404:	fa1f fe8c 	uxth.w	lr, ip
 8004408:	fbb1 f0f7 	udiv	r0, r1, r7
 800440c:	fb07 1610 	mls	r6, r7, r0, r1
 8004410:	0c19      	lsrs	r1, r3, #16
 8004412:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8004416:	fb00 f60e 	mul.w	r6, r0, lr
 800441a:	428e      	cmp	r6, r1
 800441c:	fa04 f402 	lsl.w	r4, r4, r2
 8004420:	d908      	bls.n	8004434 <__udivmoddi4+0x250>
 8004422:	eb1c 0101 	adds.w	r1, ip, r1
 8004426:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800442a:	d22d      	bcs.n	8004488 <__udivmoddi4+0x2a4>
 800442c:	428e      	cmp	r6, r1
 800442e:	d92b      	bls.n	8004488 <__udivmoddi4+0x2a4>
 8004430:	3802      	subs	r0, #2
 8004432:	4461      	add	r1, ip
 8004434:	1b89      	subs	r1, r1, r6
 8004436:	b29b      	uxth	r3, r3
 8004438:	fbb1 f6f7 	udiv	r6, r1, r7
 800443c:	fb07 1116 	mls	r1, r7, r6, r1
 8004440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004444:	fb06 f10e 	mul.w	r1, r6, lr
 8004448:	4299      	cmp	r1, r3
 800444a:	d908      	bls.n	800445e <__udivmoddi4+0x27a>
 800444c:	eb1c 0303 	adds.w	r3, ip, r3
 8004450:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8004454:	d214      	bcs.n	8004480 <__udivmoddi4+0x29c>
 8004456:	4299      	cmp	r1, r3
 8004458:	d912      	bls.n	8004480 <__udivmoddi4+0x29c>
 800445a:	3e02      	subs	r6, #2
 800445c:	4463      	add	r3, ip
 800445e:	1a5b      	subs	r3, r3, r1
 8004460:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8004464:	e736      	b.n	80042d4 <__udivmoddi4+0xf0>
 8004466:	4639      	mov	r1, r7
 8004468:	e6ed      	b.n	8004246 <__udivmoddi4+0x62>
 800446a:	4618      	mov	r0, r3
 800446c:	e702      	b.n	8004274 <__udivmoddi4+0x90>
 800446e:	45f0      	cmp	r8, lr
 8004470:	d2ad      	bcs.n	80043ce <__udivmoddi4+0x1ea>
 8004472:	ebbe 0302 	subs.w	r3, lr, r2
 8004476:	eb66 060c 	sbc.w	r6, r6, ip
 800447a:	3801      	subs	r0, #1
 800447c:	46b1      	mov	r9, r6
 800447e:	e7a6      	b.n	80043ce <__udivmoddi4+0x1ea>
 8004480:	4646      	mov	r6, r8
 8004482:	e7ec      	b.n	800445e <__udivmoddi4+0x27a>
 8004484:	4603      	mov	r3, r0
 8004486:	e798      	b.n	80043ba <__udivmoddi4+0x1d6>
 8004488:	4640      	mov	r0, r8
 800448a:	e7d3      	b.n	8004434 <__udivmoddi4+0x250>
 800448c:	46d6      	mov	lr, sl
 800448e:	e77e      	b.n	800438e <__udivmoddi4+0x1aa>
 8004490:	4464      	add	r4, ip
 8004492:	3802      	subs	r0, #2
 8004494:	e747      	b.n	8004326 <__udivmoddi4+0x142>
 8004496:	4608      	mov	r0, r1
 8004498:	e70d      	b.n	80042b6 <__udivmoddi4+0xd2>
 800449a:	3e02      	subs	r6, #2
 800449c:	4463      	add	r3, ip
 800449e:	e72d      	b.n	80042fc <__udivmoddi4+0x118>

080044a0 <_init>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr

080044ac <_fini>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr
