
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005c94  08005c94  00006c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb4  08005cb4  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cbc  08005cbc  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc0  08005cc0  00006cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005cc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000702c  2**0
                  CONTENTS
 10 .bss          000003ec  2000002c  2000002c  0000702c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  0000702c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011763  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294e  00000000  00000000  000187bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  0001bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f1d  00000000  00000000  0001cac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012282  00000000  00000000  000409e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9a58  00000000  00000000  00052c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c6c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cac  00000000  00000000  0012c704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005c7c 	.word	0x08005c7c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08005c7c 	.word	0x08005c7c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2f>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000990:	bf24      	itt	cs
 8000992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099a:	d90d      	bls.n	80009b8 <__aeabi_d2f+0x30>
 800099c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009bc:	d121      	bne.n	8000a02 <__aeabi_d2f+0x7a>
 80009be:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c2:	bfbc      	itt	lt
 80009c4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	4770      	bxlt	lr
 80009ca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d2:	f1c2 0218 	rsb	r2, r2, #24
 80009d6:	f1c2 0c20 	rsb	ip, r2, #32
 80009da:	fa10 f30c 	lsls.w	r3, r0, ip
 80009de:	fa20 f002 	lsr.w	r0, r0, r2
 80009e2:	bf18      	it	ne
 80009e4:	f040 0001 	orrne.w	r0, r0, #1
 80009e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f4:	ea40 000c 	orr.w	r0, r0, ip
 80009f8:	fa23 f302 	lsr.w	r3, r3, r2
 80009fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a00:	e7cc      	b.n	800099c <__aeabi_d2f+0x14>
 8000a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a06:	d107      	bne.n	8000a18 <__aeabi_d2f+0x90>
 8000a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a0c:	bf1e      	ittt	ne
 8000a0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a16:	4770      	bxne	lr
 8000a18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_uldivmod>:
 8000a28:	b953      	cbnz	r3, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2a:	b94a      	cbnz	r2, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	bf08      	it	eq
 8000a30:	2800      	cmpeq	r0, #0
 8000a32:	bf1c      	itt	ne
 8000a34:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a38:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a3c:	f000 b96a 	b.w	8000d14 <__aeabi_idiv0>
 8000a40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a48:	f000 f806 	bl	8000a58 <__udivmoddi4>
 8000a4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a54:	b004      	add	sp, #16
 8000a56:	4770      	bx	lr

08000a58 <__udivmoddi4>:
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	9d08      	ldr	r5, [sp, #32]
 8000a5e:	460c      	mov	r4, r1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d14e      	bne.n	8000b02 <__udivmoddi4+0xaa>
 8000a64:	4694      	mov	ip, r2
 8000a66:	458c      	cmp	ip, r1
 8000a68:	4686      	mov	lr, r0
 8000a6a:	fab2 f282 	clz	r2, r2
 8000a6e:	d962      	bls.n	8000b36 <__udivmoddi4+0xde>
 8000a70:	b14a      	cbz	r2, 8000a86 <__udivmoddi4+0x2e>
 8000a72:	f1c2 0320 	rsb	r3, r2, #32
 8000a76:	4091      	lsls	r1, r2
 8000a78:	fa20 f303 	lsr.w	r3, r0, r3
 8000a7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a80:	4319      	orrs	r1, r3
 8000a82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8a:	fa1f f68c 	uxth.w	r6, ip
 8000a8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a96:	fb07 1114 	mls	r1, r7, r4, r1
 8000a9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9e:	fb04 f106 	mul.w	r1, r4, r6
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x64>
 8000aa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aaa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aae:	f080 8112 	bcs.w	8000cd6 <__udivmoddi4+0x27e>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 810f 	bls.w	8000cd6 <__udivmoddi4+0x27e>
 8000ab8:	3c02      	subs	r4, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	1a59      	subs	r1, r3, r1
 8000abe:	fa1f f38e 	uxth.w	r3, lr
 8000ac2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac6:	fb07 1110 	mls	r1, r7, r0, r1
 8000aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ace:	fb00 f606 	mul.w	r6, r0, r6
 8000ad2:	429e      	cmp	r6, r3
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x94>
 8000ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ada:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ade:	f080 80fc 	bcs.w	8000cda <__udivmoddi4+0x282>
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	f240 80f9 	bls.w	8000cda <__udivmoddi4+0x282>
 8000ae8:	4463      	add	r3, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11d      	cbz	r5, 8000afe <__udivmoddi4+0xa6>
 8000af6:	40d3      	lsrs	r3, r2
 8000af8:	2200      	movs	r2, #0
 8000afa:	e9c5 3200 	strd	r3, r2, [r5]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d905      	bls.n	8000b12 <__udivmoddi4+0xba>
 8000b06:	b10d      	cbz	r5, 8000b0c <__udivmoddi4+0xb4>
 8000b08:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4608      	mov	r0, r1
 8000b10:	e7f5      	b.n	8000afe <__udivmoddi4+0xa6>
 8000b12:	fab3 f183 	clz	r1, r3
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d146      	bne.n	8000ba8 <__udivmoddi4+0x150>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0xcc>
 8000b1e:	4290      	cmp	r0, r2
 8000b20:	f0c0 80f0 	bcc.w	8000d04 <__udivmoddi4+0x2ac>
 8000b24:	1a86      	subs	r6, r0, r2
 8000b26:	eb64 0303 	sbc.w	r3, r4, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d0e6      	beq.n	8000afe <__udivmoddi4+0xa6>
 8000b30:	e9c5 6300 	strd	r6, r3, [r5]
 8000b34:	e7e3      	b.n	8000afe <__udivmoddi4+0xa6>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	f040 8090 	bne.w	8000c5c <__udivmoddi4+0x204>
 8000b3c:	eba1 040c 	sub.w	r4, r1, ip
 8000b40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b44:	fa1f f78c 	uxth.w	r7, ip
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b52:	fb08 4416 	mls	r4, r8, r6, r4
 8000b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5a:	fb07 f006 	mul.w	r0, r7, r6
 8000b5e:	4298      	cmp	r0, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x11c>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x11a>
 8000b6c:	4298      	cmp	r0, r3
 8000b6e:	f200 80cd 	bhi.w	8000d0c <__udivmoddi4+0x2b4>
 8000b72:	4626      	mov	r6, r4
 8000b74:	1a1c      	subs	r4, r3, r0
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb00 f707 	mul.w	r7, r0, r7
 8000b8a:	429f      	cmp	r7, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x148>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x146>
 8000b98:	429f      	cmp	r7, r3
 8000b9a:	f200 80b0 	bhi.w	8000cfe <__udivmoddi4+0x2a6>
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	1bdb      	subs	r3, r3, r7
 8000ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba6:	e7a5      	b.n	8000af4 <__udivmoddi4+0x9c>
 8000ba8:	f1c1 0620 	rsb	r6, r1, #32
 8000bac:	408b      	lsls	r3, r1
 8000bae:	fa22 f706 	lsr.w	r7, r2, r6
 8000bb2:	431f      	orrs	r7, r3
 8000bb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bbc:	ea43 030c 	orr.w	r3, r3, ip
 8000bc0:	40f4      	lsrs	r4, r6
 8000bc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bc6:	0c38      	lsrs	r0, r7, #16
 8000bc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000bd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bdc:	fb0e f90c 	mul.w	r9, lr, ip
 8000be0:	45a1      	cmp	r9, r4
 8000be2:	fa02 f201 	lsl.w	r2, r2, r1
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x1a6>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bee:	f080 8084 	bcs.w	8000cfa <__udivmoddi4+0x2a2>
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	f240 8081 	bls.w	8000cfa <__udivmoddi4+0x2a2>
 8000bf8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	eba4 0409 	sub.w	r4, r4, r9
 8000c02:	fa1f f983 	uxth.w	r9, r3
 8000c06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1d2>
 8000c1a:	193c      	adds	r4, r7, r4
 8000c1c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c20:	d267      	bcs.n	8000cf2 <__udivmoddi4+0x29a>
 8000c22:	45a4      	cmp	ip, r4
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0x29a>
 8000c26:	3b02      	subs	r3, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c32:	eba4 040c 	sub.w	r4, r4, ip
 8000c36:	429c      	cmp	r4, r3
 8000c38:	46ce      	mov	lr, r9
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	d351      	bcc.n	8000ce2 <__udivmoddi4+0x28a>
 8000c3e:	d04e      	beq.n	8000cde <__udivmoddi4+0x286>
 8000c40:	b155      	cbz	r5, 8000c58 <__udivmoddi4+0x200>
 8000c42:	ebb8 030e 	subs.w	r3, r8, lr
 8000c46:	eb64 040c 	sbc.w	r4, r4, ip
 8000c4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c4e:	40cb      	lsrs	r3, r1
 8000c50:	431e      	orrs	r6, r3
 8000c52:	40cc      	lsrs	r4, r1
 8000c54:	e9c5 6400 	strd	r6, r4, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e750      	b.n	8000afe <__udivmoddi4+0xa6>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f103 	lsr.w	r1, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa24 f303 	lsr.w	r3, r4, r3
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	430c      	orrs	r4, r1
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c78:	fa1f f78c 	uxth.w	r7, ip
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3110 	mls	r1, r8, r0, r3
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f107 	mul.w	r1, r0, r7
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x24c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c9a:	d22c      	bcs.n	8000cf6 <__udivmoddi4+0x29e>
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d92a      	bls.n	8000cf6 <__udivmoddi4+0x29e>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cac:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb01 f307 	mul.w	r3, r1, r7
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x276>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cc4:	d213      	bcs.n	8000cee <__udivmoddi4+0x296>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	d911      	bls.n	8000cee <__udivmoddi4+0x296>
 8000cca:	3902      	subs	r1, #2
 8000ccc:	4464      	add	r4, ip
 8000cce:	1ae4      	subs	r4, r4, r3
 8000cd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd4:	e739      	b.n	8000b4a <__udivmoddi4+0xf2>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	e6f0      	b.n	8000abc <__udivmoddi4+0x64>
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e706      	b.n	8000aec <__udivmoddi4+0x94>
 8000cde:	45c8      	cmp	r8, r9
 8000ce0:	d2ae      	bcs.n	8000c40 <__udivmoddi4+0x1e8>
 8000ce2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ce6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cea:	3801      	subs	r0, #1
 8000cec:	e7a8      	b.n	8000c40 <__udivmoddi4+0x1e8>
 8000cee:	4631      	mov	r1, r6
 8000cf0:	e7ed      	b.n	8000cce <__udivmoddi4+0x276>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e799      	b.n	8000c2a <__udivmoddi4+0x1d2>
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	e7d4      	b.n	8000ca4 <__udivmoddi4+0x24c>
 8000cfa:	46d6      	mov	lr, sl
 8000cfc:	e77f      	b.n	8000bfe <__udivmoddi4+0x1a6>
 8000cfe:	4463      	add	r3, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e74d      	b.n	8000ba0 <__udivmoddi4+0x148>
 8000d04:	4606      	mov	r6, r0
 8000d06:	4623      	mov	r3, r4
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e70f      	b.n	8000b2c <__udivmoddi4+0xd4>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	e730      	b.n	8000b74 <__udivmoddi4+0x11c>
 8000d12:	bf00      	nop

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <pid_init>:
	float  target,

	float 	kp,
	float 	ki,
	float 	kd)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	61f8      	str	r0, [r7, #28]
 8000d20:	ed87 0a06 	vstr	s0, [r7, #24]
 8000d24:	edc7 0a05 	vstr	s1, [r7, #20]
 8000d28:	ed87 1a04 	vstr	s2, [r7, #16]
 8000d2c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000d30:	ed87 2a02 	vstr	s4, [r7, #8]
 8000d34:	edc7 2a01 	vstr	s5, [r7, #4]
 8000d38:	ed87 3a00 	vstr	s6, [r7]

	pid->MaxOutput = maxout;
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	651a      	str	r2, [r3, #80]	@ 0x50
	pid->IntegralLimit = integral_limit;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
	pid->target = target;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]

	pid->kp = kp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	609a      	str	r2, [r3, #8]
	pid->ki = ki;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	60da      	str	r2, [r3, #12]
	pid->kd = kd;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	611a      	str	r2, [r3, #16]

	pid->output = 0;
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000d68:	bf00      	nop
 8000d6a:	3724      	adds	r7, #36	@ 0x24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <pid_calculate>:
	pid->ki = ki;
	pid->kd = kd;
}

float pid_calculate(PID_TypeDef* pid, float measure)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	ed87 0a00 	vstr	s0, [r7]
	pid->measure = measure;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	615a      	str	r2, [r3, #20]
	pid->last_error = pid->error;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699a      	ldr	r2, [r3, #24]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	61da      	str	r2, [r3, #28]
	pid->error = pid->target - pid->measure;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	ed93 7a00 	vldr	s14, [r3]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->pout = pid->kp * pid->error;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	edd3 7a06 	vldr	s15, [r3, #24]
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Prevent integral windup
	pid->integral += pid->error;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edc3 7a08 	vstr	s15, [r3, #32]
	if(pid->integral > pid->IntegralLimit)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	dd03      	ble.n	8000dee <pid_calculate+0x7a>
	{
		pid->integral = pid->IntegralLimit;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	621a      	str	r2, [r3, #32]
	}
	if(pid->integral < -(pid->IntegralLimit))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000dfa:	eef1 7a67 	vneg.f32	s15, s15
 8000dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	d507      	bpl.n	8000e18 <pid_calculate+0xa4>
	{
		pid->integral = -pid->IntegralLimit;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000e0e:	eef1 7a67 	vneg.f32	s15, s15
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	edc3 7a08 	vstr	s15, [r3, #32]
	}
	pid->iout = pid->ki * pid->integral;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	pid->dout =  pid->kd * (pid->error - pid->last_error);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	edd3 6a06 	vldr	s13, [r3, #24]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	pid->output = pid->pout + pid->iout + pid->dout;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	//Clamping output -> using direct instead of incremental PID
	if(pid->output>pid->MaxOutput)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8000e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd03      	ble.n	8000e8c <pid_calculate+0x118>
	{
		pid->output = pid->MaxOutput;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	if(pid->output < -(pid->MaxOutput))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8000e98:	eef1 7a67 	vneg.f32	s15, s15
 8000e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	d507      	bpl.n	8000eb6 <pid_calculate+0x142>
	{
		pid->output = -(pid->MaxOutput);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8000eac:	eef1 7a67 	vneg.f32	s15, s15
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		pid->output = -(pid->MaxOutput);
	}
	*/


	return pid->output;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eba:	ee07 3a90 	vmov	s15, r3
}
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_FilterTypeDef canfilter1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8000f80 <MX_CAN1_Init+0xb4>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000ed6:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000ed8:	2203      	movs	r2, #3
 8000eda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000edc:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000eea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000ef2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ef6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f1c:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f1e:	f001 f89f 	bl	8002060 <HAL_CAN_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f28:	f000 fd48 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfilter1.FilterBank = 0;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  canfilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  canfilter1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	61da      	str	r2, [r3, #28]
  canfilter1.FilterIdHigh = 0x0000;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
  canfilter1.FilterIdLow = 0x0000;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  canfilter1.FilterMaskIdHigh = 0x0000;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  canfilter1.FilterMaskIdLow = 0x0000;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  canfilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  canfilter1.FilterActivation = CAN_FILTER_ENABLE;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &canfilter1);
 8000f62:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <MX_CAN1_Init+0xb8>)
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f66:	f001 f977 	bl	8002258 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1); //start CAN
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f6c:	f001 fa54 	bl	8002418 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate CAN receive interrupt for encoder data
 8000f70:	2102      	movs	r1, #2
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <MX_CAN1_Init+0xb0>)
 8000f74:	f001 fc81 	bl	800287a <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000048 	.word	0x20000048
 8000f80:	40006400 	.word	0x40006400
 8000f84:	20000070 	.word	0x20000070

08000f88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <HAL_CAN_MspInit+0xa4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d13b      	bne.n	8001022 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <HAL_CAN_MspInit+0xa8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <HAL_CAN_MspInit+0xac>)
 8000ffe:	f002 faef 	bl	80035e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	2013      	movs	r0, #19
 8001008:	f001 ff44 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800100c:	2013      	movs	r0, #19
 800100e:	f001 ff5d 	bl	8002ecc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2101      	movs	r1, #1
 8001016:	2014      	movs	r0, #20
 8001018:	f001 ff3c 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800101c:	2014      	movs	r0, #20
 800101e:	f001 ff55 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	@ 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40006400 	.word	0x40006400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020c00 	.word	0x40020c00

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_DMA_Init+0x3c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <MX_DMA_Init+0x3c>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_DMA_Init+0x3c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2045      	movs	r0, #69	@ 0x45
 8001060:	f001 ff18 	bl	8002e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001064:	2045      	movs	r0, #69	@ 0x45
 8001066:	f001 ff31 	bl	8002ecc <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	@ 0x38
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	4b67      	ldr	r3, [pc, #412]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a66      	ldr	r2, [pc, #408]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b64      	ldr	r3, [pc, #400]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	4b60      	ldr	r3, [pc, #384]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b59      	ldr	r3, [pc, #356]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a58      	ldr	r2, [pc, #352]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	4b52      	ldr	r3, [pc, #328]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a51      	ldr	r2, [pc, #324]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b4b      	ldr	r3, [pc, #300]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b48      	ldr	r3, [pc, #288]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b44      	ldr	r3, [pc, #272]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a43      	ldr	r2, [pc, #268]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b41      	ldr	r3, [pc, #260]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b3d      	ldr	r3, [pc, #244]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a3c      	ldr	r2, [pc, #240]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b3a      	ldr	r3, [pc, #232]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b36      	ldr	r3, [pc, #216]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a35      	ldr	r2, [pc, #212]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b33      	ldr	r3, [pc, #204]	@ (8001230 <MX_GPIO_Init+0x1b8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001174:	482f      	ldr	r0, [pc, #188]	@ (8001234 <MX_GPIO_Init+0x1bc>)
 8001176:	f002 fbdf 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001180:	482d      	ldr	r0, [pc, #180]	@ (8001238 <MX_GPIO_Init+0x1c0>)
 8001182:	f002 fbd9 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
  HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	213c      	movs	r1, #60	@ 0x3c
 800118a:	482c      	ldr	r0, [pc, #176]	@ (800123c <MX_GPIO_Init+0x1c4>)
 800118c:	f002 fbd4 	bl	8003938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 8001190:	233c      	movs	r3, #60	@ 0x3c
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4825      	ldr	r0, [pc, #148]	@ (800123c <MX_GPIO_Init+0x1c4>)
 80011a8:	f002 fa1a 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80011ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	481f      	ldr	r0, [pc, #124]	@ (8001240 <MX_GPIO_Init+0x1c8>)
 80011c2:	f002 fa0d 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	@ (8001234 <MX_GPIO_Init+0x1bc>)
 80011e0:	f002 f9fe 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80011e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_GPIO_Init+0x1c0>)
 80011fe:	f002 f9ef 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2102      	movs	r1, #2
 8001206:	480f      	ldr	r0, [pc, #60]	@ (8001244 <MX_GPIO_Init+0x1cc>)
 8001208:	f002 fb96 	bl	8003938 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = Kicker_Pin;
 800120c:	2302      	movs	r3, #2
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001210:	2311      	movs	r3, #17
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Kicker_Port, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	4808      	ldr	r0, [pc, #32]	@ (8001244 <MX_GPIO_Init+0x1cc>)
 8001224:	f002 f9dc 	bl	80035e0 <HAL_GPIO_Init>
}
 8001228:	bf00      	nop
 800122a:	3738      	adds	r7, #56	@ 0x38
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40021400 	.word	0x40021400
 8001238:	40021000 	.word	0x40021000
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40020800 	.word	0x40020800

08001248 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fea1 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 faa5 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f7ff ff0f 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 800125a:	f7ff feed 	bl	8001038 <MX_DMA_Init>
  MX_CAN1_Init();
 800125e:	f7ff fe35 	bl	8000ecc <MX_CAN1_Init>
  MX_TIM1_Init();
 8001262:	f000 fcc9 	bl	8001bf8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001266:	f000 fdf1 	bl	8001e4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  //Motor setup
  HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 800126a:	2104      	movs	r1, #4
 800126c:	488d      	ldr	r0, [pc, #564]	@ (80014a4 <main+0x25c>)
 800126e:	f002 fb7c 	bl	800396a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 8001272:	2108      	movs	r1, #8
 8001274:	488b      	ldr	r0, [pc, #556]	@ (80014a4 <main+0x25c>)
 8001276:	f002 fb78 	bl	800396a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 800127a:	2110      	movs	r1, #16
 800127c:	4889      	ldr	r0, [pc, #548]	@ (80014a4 <main+0x25c>)
 800127e:	f002 fb74 	bl	800396a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 8001282:	2120      	movs	r1, #32
 8001284:	4887      	ldr	r0, [pc, #540]	@ (80014a4 <main+0x25c>)
 8001286:	f002 fb70 	bl	800396a <HAL_GPIO_TogglePin>

  //CAN setup
  canTxHeader.DLC = 8;
 800128a:	4b87      	ldr	r3, [pc, #540]	@ (80014a8 <main+0x260>)
 800128c:	2208      	movs	r2, #8
 800128e:	611a      	str	r2, [r3, #16]
  canTxHeader.IDE = CAN_ID_STD;
 8001290:	4b85      	ldr	r3, [pc, #532]	@ (80014a8 <main+0x260>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  canTxHeader.RTR = CAN_RTR_DATA;
 8001296:	4b84      	ldr	r3, [pc, #528]	@ (80014a8 <main+0x260>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  canTxHeader.StdId = 0x200;
 800129c:	4b82      	ldr	r3, [pc, #520]	@ (80014a8 <main+0x260>)
 800129e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a2:	601a      	str	r2, [r3, #0]
  canTxHeader.TransmitGlobalTime = DISABLE;
 80012a4:	4b80      	ldr	r3, [pc, #512]	@ (80014a8 <main+0x260>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	751a      	strb	r2, [r3, #20]

  //PID Setup
  for (int i = 0; i < 4; i++) 
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <main+0x7c>
  {
        speed_data[i] = 0;
 80012b0:	4a7e      	ldr	r2, [pc, #504]	@ (80014ac <main+0x264>)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) 
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	ddf2      	ble.n	80012b0 <main+0x68>
  }
  pid_init(&motor_pid[0],9999,1000,20,0,Kp1,Ki1,Kd1);
 80012ca:	4b79      	ldr	r3, [pc, #484]	@ (80014b0 <main+0x268>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	4b78      	ldr	r3, [pc, #480]	@ (80014b4 <main+0x26c>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b78      	ldr	r3, [pc, #480]	@ (80014b8 <main+0x270>)
 80012d8:	edd3 6a00 	vldr	s13, [r3]
 80012dc:	eeb0 3a66 	vmov.f32	s6, s13
 80012e0:	eef0 2a47 	vmov.f32	s5, s14
 80012e4:	eeb0 2a67 	vmov.f32	s4, s15
 80012e8:	eddf 1a74 	vldr	s3, [pc, #464]	@ 80014bc <main+0x274>
 80012ec:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 80012f0:	eddf 0a73 	vldr	s1, [pc, #460]	@ 80014c0 <main+0x278>
 80012f4:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80014c4 <main+0x27c>
 80012f8:	4873      	ldr	r0, [pc, #460]	@ (80014c8 <main+0x280>)
 80012fa:	f7ff fd0d 	bl	8000d18 <pid_init>
  pid_init(&motor_pid[1],9999,1000,20,0,Kp2,Ki2,Kd2);
 80012fe:	4b73      	ldr	r3, [pc, #460]	@ (80014cc <main+0x284>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	4b72      	ldr	r3, [pc, #456]	@ (80014d0 <main+0x288>)
 8001306:	ed93 7a00 	vldr	s14, [r3]
 800130a:	4b72      	ldr	r3, [pc, #456]	@ (80014d4 <main+0x28c>)
 800130c:	edd3 6a00 	vldr	s13, [r3]
 8001310:	eeb0 3a66 	vmov.f32	s6, s13
 8001314:	eef0 2a47 	vmov.f32	s5, s14
 8001318:	eeb0 2a67 	vmov.f32	s4, s15
 800131c:	eddf 1a67 	vldr	s3, [pc, #412]	@ 80014bc <main+0x274>
 8001320:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 8001324:	eddf 0a66 	vldr	s1, [pc, #408]	@ 80014c0 <main+0x278>
 8001328:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 80014c4 <main+0x27c>
 800132c:	486a      	ldr	r0, [pc, #424]	@ (80014d8 <main+0x290>)
 800132e:	f7ff fcf3 	bl	8000d18 <pid_init>
  pid_init(&motor_pid[2],9999,1000,20,0,Kp3,Ki3,Kd3);
 8001332:	4b6a      	ldr	r3, [pc, #424]	@ (80014dc <main+0x294>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	4b69      	ldr	r3, [pc, #420]	@ (80014e0 <main+0x298>)
 800133a:	ed93 7a00 	vldr	s14, [r3]
 800133e:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <main+0x29c>)
 8001340:	edd3 6a00 	vldr	s13, [r3]
 8001344:	eeb0 3a66 	vmov.f32	s6, s13
 8001348:	eef0 2a47 	vmov.f32	s5, s14
 800134c:	eeb0 2a67 	vmov.f32	s4, s15
 8001350:	eddf 1a5a 	vldr	s3, [pc, #360]	@ 80014bc <main+0x274>
 8001354:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 8001358:	eddf 0a59 	vldr	s1, [pc, #356]	@ 80014c0 <main+0x278>
 800135c:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80014c4 <main+0x27c>
 8001360:	4861      	ldr	r0, [pc, #388]	@ (80014e8 <main+0x2a0>)
 8001362:	f7ff fcd9 	bl	8000d18 <pid_init>
  pid_init(&motor_pid[3],9999,1000,20,0,Kp4,Ki4,Kd4);
 8001366:	4b61      	ldr	r3, [pc, #388]	@ (80014ec <main+0x2a4>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <main+0x2a8>)
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <main+0x2ac>)
 8001374:	edd3 6a00 	vldr	s13, [r3]
 8001378:	eeb0 3a66 	vmov.f32	s6, s13
 800137c:	eef0 2a47 	vmov.f32	s5, s14
 8001380:	eeb0 2a67 	vmov.f32	s4, s15
 8001384:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 80014bc <main+0x274>
 8001388:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 800138c:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 80014c0 <main+0x278>
 8001390:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80014c4 <main+0x27c>
 8001394:	4858      	ldr	r0, [pc, #352]	@ (80014f8 <main+0x2b0>)
 8001396:	f7ff fcbf 	bl	8000d18 <pid_init>

  for (int i = 0; i < 4; i++) 
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	e009      	b.n	80013b4 <main+0x16c>
  {
	  targetSpeeds[i] = 0;
 80013a0:	4a56      	ldr	r2, [pc, #344]	@ (80014fc <main+0x2b4>)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) 
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	ddf2      	ble.n	80013a0 <main+0x158>
  }

  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);
 80013ba:	220b      	movs	r2, #11
 80013bc:	4950      	ldr	r1, [pc, #320]	@ (8001500 <main+0x2b8>)
 80013be:	4851      	ldr	r0, [pc, #324]	@ (8001504 <main+0x2bc>)
 80013c0:	f003 fd05 	bl	8004dce <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
 {
	  if (kickFlag == 1){               //Triggers a kick
 80013c4:	4b50      	ldr	r3, [pc, #320]	@ (8001508 <main+0x2c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <main+0x190>
		  kick(20);
 80013cc:	2014      	movs	r0, #20
 80013ce:	f000 facb 	bl	8001968 <kick>
		  kickFlag = 0;
 80013d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001508 <main+0x2c0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	  }

	  if (timeout >= 500){                 //Safety timeout when UART disconnectss
 80013d8:	4b4c      	ldr	r3, [pc, #304]	@ (800150c <main+0x2c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013e0:	db0f      	blt.n	8001402 <main+0x1ba>
		  for (int i = 0; i < 4; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e009      	b.n	80013fc <main+0x1b4>
			  targetSpeeds[i] = 0;
 80013e8:	4a44      	ldr	r2, [pc, #272]	@ (80014fc <main+0x2b4>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 4; i++) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	ddf2      	ble.n	80013e8 <main+0x1a0>
		  }
	  }

	  for(int i=0; i<4; i++){                          //PID control loop
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	e01f      	b.n	8001448 <main+0x200>
		  motor_pid[i].target = targetSpeeds[i];
 8001408:	4a3c      	ldr	r2, [pc, #240]	@ (80014fc <main+0x2b4>)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	492d      	ldr	r1, [pc, #180]	@ (80014c8 <main+0x280>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2068      	movs	r0, #104	@ 0x68
 8001418:	fb00 f303 	mul.w	r3, r0, r3
 800141c:	440b      	add	r3, r1
 800141e:	601a      	str	r2, [r3, #0]
	      pid_calculate(&motor_pid[i],speed_data[i]);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2268      	movs	r2, #104	@ 0x68
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <main+0x280>)
 800142a:	441a      	add	r2, r3
 800142c:	491f      	ldr	r1, [pc, #124]	@ (80014ac <main+0x264>)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fc99 	bl	8000d74 <pid_calculate>
	  for(int i=0; i<4; i++){                          //PID control loop
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b03      	cmp	r3, #3
 800144c:	dddc      	ble.n	8001408 <main+0x1c0>
	  }
	  setMotorSpeeds((motor_pid[0].output),(motor_pid[1].output),(motor_pid[2].output),(motor_pid[3].output));
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <main+0x280>)
 8001450:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001458:	ee17 3a90 	vmov	r3, s15
 800145c:	b218      	sxth	r0, r3
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <main+0x280>)
 8001460:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001468:	ee17 3a90 	vmov	r3, s15
 800146c:	b219      	sxth	r1, r3
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <main+0x280>)
 8001470:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8001474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001478:	ee17 3a90 	vmov	r3, s15
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <main+0x280>)
 8001480:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 3a90 	vmov	r3, s15
 800148c:	b21b      	sxth	r3, r3
 800148e:	f000 f9f1 	bl	8001874 <setMotorSpeeds>
//		  feedbackBuffer[2 + (i * 4) + 2] = floatBytes[2];
//		  feedbackBuffer[2 + (i * 4) + 3] = floatBytes[3];
//	  }
//
//	  HAL_UART_Transmit_DMA(&huart2, feedbackBuffer, sizeof(feedbackBuffer));
	  timeout++;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <main+0x2c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <main+0x2c4>)
 800149a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f000 fdbb 	bl	8002018 <HAL_Delay>
	  if (kickFlag == 1){               //Triggers a kick
 80014a2:	e78f      	b.n	80013c4 <main+0x17c>
 80014a4:	40021c00 	.word	0x40021c00
 80014a8:	20000098 	.word	0x20000098
 80014ac:	200000ec 	.word	0x200000ec
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004
 80014b8:	200002bc 	.word	0x200002bc
 80014bc:	00000000 	.word	0x00000000
 80014c0:	447a0000 	.word	0x447a0000
 80014c4:	461c3c00 	.word	0x461c3c00
 80014c8:	2000011c 	.word	0x2000011c
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	200002c0 	.word	0x200002c0
 80014d8:	20000184 	.word	0x20000184
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000014 	.word	0x20000014
 80014e4:	200002c4 	.word	0x200002c4
 80014e8:	200001ec 	.word	0x200001ec
 80014ec:	20000018 	.word	0x20000018
 80014f0:	2000001c 	.word	0x2000001c
 80014f4:	200002c8 	.word	0x200002c8
 80014f8:	20000254 	.word	0x20000254
 80014fc:	2000010c 	.word	0x2000010c
 8001500:	200002cc 	.word	0x200002cc
 8001504:	200003d0 	.word	0x200003d0
 8001508:	200002dc 	.word	0x200002dc
 800150c:	200002d8 	.word	0x200002d8

08001510 <HAL_CAN_RxFifo0MsgPendingCallback>:
 /* USER CODE END 3 */
 }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) 
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
    if(hcan == &hcan1) 
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d16b      	bne.n	80015f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
    {
        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, CAN_RxData);
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001522:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001524:	2100      	movs	r1, #0
 8001526:	4836      	ldr	r0, [pc, #216]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001528:	f001 f895 	bl	8002656 <HAL_CAN_GetRxMessage>

        if(canRxHeader.StdId == 0x201) motor_idx = 0;
 800152c:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f240 2201 	movw	r2, #513	@ 0x201
 8001534:	4293      	cmp	r3, r2
 8001536:	d102      	bne.n	800153e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x202) motor_idx = 1;
 800153e:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f240 2202 	movw	r2, #514	@ 0x202
 8001546:	4293      	cmp	r3, r2
 8001548:	d102      	bne.n	8001550 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 800154a:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x203) motor_idx = 2;
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f240 2203 	movw	r2, #515	@ 0x203
 8001558:	4293      	cmp	r3, r2
 800155a:	d102      	bne.n	8001562 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
        if(canRxHeader.StdId == 0x204) motor_idx = 3;
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800156a:	d102      	bne.n	8001572 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800156e:	2203      	movs	r2, #3
 8001570:	701a      	strb	r2, [r3, #0]

        angle_data[motor_idx] = (uint16_t)(CAN_RxData[0]<<8 | CAN_RxData[1]);
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b219      	sxth	r1, r3
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	b289      	uxth	r1, r1
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001590:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        speed_data[motor_idx] = ((int16_t)(CAN_RxData[2]<<8 | CAN_RxData[3]) / REDUCTION_RATIO) ; // angular velocity in rpm
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800159e:	78db      	ldrb	r3, [r3, #3]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff72 	bl	8000490 <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80015b2:	f7ff f901 	bl	80007b8 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4914      	ldr	r1, [pc, #80]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80015bc:	7809      	ldrb	r1, [r1, #0]
 80015be:	b2c9      	uxtb	r1, r1
 80015c0:	460c      	mov	r4, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff f9df 	bl	8000988 <__aeabi_d2f>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4912      	ldr	r1, [pc, #72]	@ (8001618 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80015ce:	00a3      	lsls	r3, r4, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	601a      	str	r2, [r3, #0]
        torque_current_data[motor_idx] = (CAN_RxData[4]<<8 | CAN_RxData[5]);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80015dc:	7952      	ldrb	r2, [r2, #5]
 80015de:	431a      	orrs	r2, r3
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	20000048 	.word	0x20000048
 8001604:	200000d8 	.word	0x200000d8
 8001608:	200000b0 	.word	0x200000b0
 800160c:	200000e0 	.word	0x200000e0
 8001610:	200000e4 	.word	0x200000e4
 8001614:	40420000 	.word	0x40420000
 8001618:	200000ec 	.word	0x200000ec
 800161c:	200000fc 	.word	0x200000fc

08001620 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	if (((uart_rx_buffer[0] << 8) | (uart_rx_buffer[1])) == RUN_HEADER)
 8001628:	4b52      	ldr	r3, [pc, #328]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	4a51      	ldr	r2, [pc, #324]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001630:	7852      	ldrb	r2, [r2, #1]
 8001632:	4313      	orrs	r3, r2
 8001634:	f64c 22fe 	movw	r2, #51966	@ 0xcafe
 8001638:	4293      	cmp	r3, r2
 800163a:	f040 808c 	bne.w	8001756 <HAL_UART_RxCpltCallback+0x136>
  {

		timeout = 0;
 800163e:	4b4e      	ldr	r3, [pc, #312]	@ (8001778 <HAL_UART_RxCpltCallback+0x158>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

    targetSpeeds[0] = (int16_t)((uart_rx_buffer[2] << 8) | uart_rx_buffer[3]);
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001646:	789b      	ldrb	r3, [r3, #2]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	4b49      	ldr	r3, [pc, #292]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21b      	sxth	r3, r3
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
    targetSpeeds[1] = (int16_t)((uart_rx_buffer[4] << 8) | uart_rx_buffer[5]);
 8001664:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21b      	sxth	r3, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 8001680:	edc3 7a01 	vstr	s15, [r3, #4]
    targetSpeeds[2] = (int16_t)((uart_rx_buffer[6] << 8) | uart_rx_buffer[7]);
 8001684:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001686:	799b      	ldrb	r3, [r3, #6]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 800168e:	79db      	ldrb	r3, [r3, #7]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 80016a0:	edc3 7a02 	vstr	s15, [r3, #8]
    targetSpeeds[3] = (int16_t)((uart_rx_buffer[8] << 8) | uart_rx_buffer[9]);
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 80016a6:	7a1b      	ldrb	r3, [r3, #8]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 80016ae:	7a5b      	ldrb	r3, [r3, #9]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	4b2f      	ldr	r3, [pc, #188]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 80016c0:	edc3 7a03 	vstr	s15, [r3, #12]

		for (int i = 0; i < 4; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e028      	b.n	800171c <HAL_UART_RxCpltCallback+0xfc>
    {
      if (targetSpeeds[i] > 500)
 80016ca:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001780 <HAL_UART_RxCpltCallback+0x160>
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dd05      	ble.n	80016f0 <HAL_UART_RxCpltCallback+0xd0>
      {
          targetSpeeds[i] = 500;
 80016e4:	4a25      	ldr	r2, [pc, #148]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_UART_RxCpltCallback+0x164>)
 80016ee:	601a      	str	r2, [r3, #0]
      }
      if (targetSpeeds[i] < -500)
 80016f0:	4a22      	ldr	r2, [pc, #136]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001788 <HAL_UART_RxCpltCallback+0x168>
 8001700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d505      	bpl.n	8001716 <HAL_UART_RxCpltCallback+0xf6>
      {
          targetSpeeds[i] = -500;
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_UART_RxCpltCallback+0x15c>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_UART_RxCpltCallback+0x16c>)
 8001714:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 4; i++)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b03      	cmp	r3, #3
 8001720:	ddd3      	ble.n	80016ca <HAL_UART_RxCpltCallback+0xaa>
      }
    }

    if (uart_rx_buffer[10] == KICK)
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001724:	7a9b      	ldrb	r3, [r3, #10]
 8001726:	2b14      	cmp	r3, #20
 8001728:	d102      	bne.n	8001730 <HAL_UART_RxCpltCallback+0x110>
    {
      kickFlag = 1;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_UART_RxCpltCallback+0x170>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    }

    for (int i = 0; i < 11; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e007      	b.n	8001746 <HAL_UART_RxCpltCallback+0x126>
    {
      uart_rx_buffer[i] = 0;
 8001736:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4413      	add	r3, r2
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 11; i++)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3301      	adds	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b0a      	cmp	r3, #10
 800174a:	ddf4      	ble.n	8001736 <HAL_UART_RxCpltCallback+0x116>
    }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800174c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <HAL_UART_RxCpltCallback+0x174>)
 8001752:	f002 f90a 	bl	800396a <HAL_GPIO_TogglePin>

	}

	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <HAL_UART_RxCpltCallback+0x178>)
 800175c:	f002 f905 	bl	800396a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, UART_RX_BUFFER_SIZE);
 8001760:	220b      	movs	r2, #11
 8001762:	4904      	ldr	r1, [pc, #16]	@ (8001774 <HAL_UART_RxCpltCallback+0x154>)
 8001764:	480d      	ldr	r0, [pc, #52]	@ (800179c <HAL_UART_RxCpltCallback+0x17c>)
 8001766:	f003 fb32 	bl	8004dce <HAL_UART_Receive_IT>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002cc 	.word	0x200002cc
 8001778:	200002d8 	.word	0x200002d8
 800177c:	2000010c 	.word	0x2000010c
 8001780:	43fa0000 	.word	0x43fa0000
 8001784:	43fa0000 	.word	0x43fa0000
 8001788:	c3fa0000 	.word	0xc3fa0000
 800178c:	c3fa0000 	.word	0xc3fa0000
 8001790:	200002dc 	.word	0x200002dc
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	200003d0 	.word	0x200003d0

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	@ 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fa38 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a27      	ldr	r2, [pc, #156]	@ (800186c <SystemClock_Config+0xcc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <SystemClock_Config+0xd0>)
 80017ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <SystemClock_Config+0xd0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001800:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001806:	2302      	movs	r3, #2
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001810:	2306      	movs	r3, #6
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001814:	23a8      	movs	r3, #168	@ 0xa8
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001818:	2302      	movs	r3, #2
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800181c:	2304      	movs	r3, #4
 800181e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f002 f8bb 	bl	80039a0 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001830:	f000 f8c4 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2105      	movs	r1, #5
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fb1c 	bl	8003e90 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800185e:	f000 f8ad 	bl	80019bc <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	@ 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <setMotorSpeeds>:

/* USER CODE BEGIN 4 */
void setMotorSpeeds(int16_t ms1, int16_t ms2, int16_t ms3, int16_t ms4)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af04      	add	r7, sp, #16
 800187a:	4604      	mov	r4, r0
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	4603      	mov	r3, r0
 8001888:	80bb      	strh	r3, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	803b      	strh	r3, [r7, #0]
	uint8_t h1 = ms1 >> 8;
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	121b      	asrs	r3, r3, #8
 8001898:	b21b      	sxth	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
	uint8_t l1 = ms1;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	73bb      	strb	r3, [r7, #14]
	uint8_t h2 = ms2 >> 8;
 80018a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	737b      	strb	r3, [r7, #13]
	uint8_t l2 = ms2;
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	733b      	strb	r3, [r7, #12]
	uint8_t h3 = ms3 >> 8;
 80018ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018b2:	121b      	asrs	r3, r3, #8
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	72fb      	strb	r3, [r7, #11]
	uint8_t l3 = ms3;
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t h4 = ms4 >> 8;
 80018bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018c0:	121b      	asrs	r3, r3, #8
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	727b      	strb	r3, [r7, #9]
	uint8_t l4 = ms4;
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	723b      	strb	r3, [r7, #8]
	runMotors(h1,l1,h2,l2,h3,l3,h4,l4);
 80018ca:	7b3c      	ldrb	r4, [r7, #12]
 80018cc:	7b7a      	ldrb	r2, [r7, #13]
 80018ce:	7bb9      	ldrb	r1, [r7, #14]
 80018d0:	7bf8      	ldrb	r0, [r7, #15]
 80018d2:	7a3b      	ldrb	r3, [r7, #8]
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	7a7b      	ldrb	r3, [r7, #9]
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	7abb      	ldrb	r3, [r7, #10]
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4623      	mov	r3, r4
 80018e4:	f000 f804 	bl	80018f0 <runMotors>
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <runMotors>:

void runMotors(unsigned char motorOneHigh, unsigned char motorOneLow, unsigned char motorTwoHigh, 
unsigned char motorTwoLow, unsigned char motorThreeHigh, unsigned char motorThreeLow, unsigned char motorFourHigh, 
unsigned char motorFourLow)
{          
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	4603      	mov	r3, r0
 8001904:	71bb      	strb	r3, [r7, #6]
 8001906:	460b      	mov	r3, r1
 8001908:	717b      	strb	r3, [r7, #5]
 800190a:	4613      	mov	r3, r2
 800190c:	713b      	strb	r3, [r7, #4]
  //speed can be 16 bits, split into high and low bytes
	CAN_TxData[0] = motorOneHigh;  //high byte for speed, shifted 8 because only buffer is only 8 bits
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <runMotors+0x68>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	7013      	strb	r3, [r2, #0]
	CAN_TxData[1] = motorOneLow;       //low bytes for speed
 8001914:	4a10      	ldr	r2, [pc, #64]	@ (8001958 <runMotors+0x68>)
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	7053      	strb	r3, [r2, #1]
	CAN_TxData[2] = motorTwoHigh;
 800191a:	4a0f      	ldr	r2, [pc, #60]	@ (8001958 <runMotors+0x68>)
 800191c:	797b      	ldrb	r3, [r7, #5]
 800191e:	7093      	strb	r3, [r2, #2]
	CAN_TxData[3] = motorTwoLow;
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <runMotors+0x68>)
 8001922:	793b      	ldrb	r3, [r7, #4]
 8001924:	70d3      	strb	r3, [r2, #3]
	CAN_TxData[4] = motorThreeHigh;
 8001926:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <runMotors+0x68>)
 8001928:	7e3b      	ldrb	r3, [r7, #24]
 800192a:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = motorThreeLow;
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <runMotors+0x68>)
 800192e:	7f3b      	ldrb	r3, [r7, #28]
 8001930:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = motorFourHigh;
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <runMotors+0x68>)
 8001934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001938:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = motorFourLow;
 800193a:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <runMotors+0x68>)
 800193c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001940:	71d3      	strb	r3, [r2, #7]
	HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, CAN_TxData, &canTxMailbox);
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <runMotors+0x6c>)
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <runMotors+0x68>)
 8001946:	4906      	ldr	r1, [pc, #24]	@ (8001960 <runMotors+0x70>)
 8001948:	4806      	ldr	r0, [pc, #24]	@ (8001964 <runMotors+0x74>)
 800194a:	f000 fda9 	bl	80024a0 <HAL_CAN_AddTxMessage>
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop
 8001958:	200000d0 	.word	0x200000d0
 800195c:	200000cc 	.word	0x200000cc
 8001960:	20000098 	.word	0x20000098
 8001964:	20000048 	.word	0x20000048

08001968 <kick>:

void kick(int kickDuration)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2102      	movs	r1, #2
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <kick+0x2c>)
 8001976:	f001 ffdf 	bl	8003938 <HAL_GPIO_WritePin>
	HAL_Delay(kickDuration);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fb4b 	bl	8002018 <HAL_Delay>
	HAL_GPIO_WritePin(Kicker_Port, Kicker_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2102      	movs	r1, #2
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <kick+0x2c>)
 8001988:	f001 ffd6 	bl	8003938 <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40020800 	.word	0x40020800

08001998 <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)


{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019aa:	f000 fb15 	bl	8001fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40001000 	.word	0x40001000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <Error_Handler+0x8>

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	@ 0x38
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <HAL_InitTick+0xe4>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a32      	ldr	r2, [pc, #200]	@ (8001afc <HAL_InitTick+0xe4>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a38:	4b30      	ldr	r3, [pc, #192]	@ (8001afc <HAL_InitTick+0xe4>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a44:	f107 0210 	add.w	r2, r7, #16
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fbfe 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a5e:	f002 fbcf 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8001a62:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a64:	e004      	b.n	8001a70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a66:	f002 fbcb 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <HAL_InitTick+0xe8>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <HAL_InitTick+0xec>)
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_InitTick+0xf0>)
 8001a82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <HAL_InitTick+0xec>)
 8001a86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_InitTick+0xec>)
 8001a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_InitTick+0xec>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_InitTick+0xec>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_InitTick+0xec>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001aa4:	4817      	ldr	r0, [pc, #92]	@ (8001b04 <HAL_InitTick+0xec>)
 8001aa6:	f002 fc05 	bl	80042b4 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d11b      	bne.n	8001af0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ab8:	4812      	ldr	r0, [pc, #72]	@ (8001b04 <HAL_InitTick+0xec>)
 8001aba:	f002 fc55 	bl	8004368 <HAL_TIM_Base_Start_IT>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001acc:	2036      	movs	r0, #54	@ 0x36
 8001ace:	f001 f9fd 	bl	8002ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d808      	bhi.n	8001aea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	2036      	movs	r0, #54	@ 0x36
 8001ade:	f001 f9d9 	bl	8002e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_InitTick+0xf4>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e002      	b.n	8001af0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3738      	adds	r7, #56	@ 0x38
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	200002e0 	.word	0x200002e0
 8001b08:	40001000 	.word	0x40001000
 8001b0c:	20000024 	.word	0x20000024

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <NMI_Handler+0x4>

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <MemManage_Handler+0x4>

08001b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <CAN1_TX_IRQHandler+0x10>)
 8001b76:	f000 fea6 	bl	80028c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000048 	.word	0x20000048

08001b84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <CAN1_RX0_IRQHandler+0x10>)
 8001b8a:	f000 fe9c 	bl	80028c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000048 	.word	0x20000048

08001b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <USART2_IRQHandler+0x10>)
 8001b9e:	f003 f947 	bl	8004e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003d0 	.word	0x200003d0

08001bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <TIM6_DAC_IRQHandler+0x10>)
 8001bb2:	f002 fc98 	bl	80044e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002e0 	.word	0x200002e0

08001bc0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA2_Stream6_IRQHandler+0x10>)
 8001bc6:	f001 facf 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000370 	.word	0x20000370

08001bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c14:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c16:	4a37      	ldr	r2, [pc, #220]	@ (8001cf4 <MX_TIM1_Init+0xfc>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c28:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c40:	482b      	ldr	r0, [pc, #172]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c42:	f002 fc01 	bl	8004448 <HAL_TIM_IC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c4c:	f7ff feb6 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4824      	ldr	r0, [pc, #144]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c60:	f002 ffd8 	bl	8004c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c6a:	f7ff fea7 	bl	80019bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c72:	2302      	movs	r3, #2
 8001c74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	481a      	ldr	r0, [pc, #104]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001c86:	f002 fd36 	bl	80046f6 <HAL_TIM_IC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001c90:	f7ff fe94 	bl	80019bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001c94:	230a      	movs	r3, #10
 8001c96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4813      	ldr	r0, [pc, #76]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001ca4:	f002 fd27 	bl	80046f6 <HAL_TIM_IC_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001cae:	f7ff fe85 	bl	80019bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001cbe:	f002 fd1a 	bl	80046f6 <HAL_TIM_IC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001cc8:	f7ff fe78 	bl	80019bc <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <MX_TIM1_Init+0xf8>)
 8001cd8:	f002 fd0d 	bl	80046f6 <HAL_TIM_IC_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001ce2:	f7ff fe6b 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000328 	.word	0x20000328
 8001cf4:	40010000 	.word	0x40010000

08001cf8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a47      	ldr	r2, [pc, #284]	@ (8001e34 <HAL_TIM_IC_MspInit+0x13c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f040 8088 	bne.w	8001e2c <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	4a44      	ldr	r2, [pc, #272]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2c:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4a3d      	ldr	r2, [pc, #244]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	4a36      	ldr	r2, [pc, #216]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_TIM_IC_MspInit+0x140>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	482b      	ldr	r0, [pc, #172]	@ (8001e3c <HAL_TIM_IC_MspInit+0x144>)
 8001d8e:	f001 fc27 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4824      	ldr	r0, [pc, #144]	@ (8001e40 <HAL_TIM_IC_MspInit+0x148>)
 8001db0:	f001 fc16 	bl	80035e0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001db4:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001db6:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_TIM_IC_MspInit+0x150>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dda:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dea:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001df8:	4812      	ldr	r0, [pc, #72]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001dfa:	f001 f875 	bl	8002ee8 <HAL_DMA_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 8001e04:	f7ff fdda 	bl	80019bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e26:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_TIM_IC_MspInit+0x14c>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	@ 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	20000370 	.word	0x20000370
 8001e48:	400264a0 	.word	0x400264a0

08001e4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <MX_USART2_UART_Init+0x50>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_USART2_UART_Init+0x4c>)
 8001e84:	f002 ff56 	bl	8004d34 <HAL_UART_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e8e:	f7ff fd95 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200003d0 	.word	0x200003d0
 8001e9c:	40004400 	.word	0x40004400

08001ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_UART_MspInit+0x94>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d133      	bne.n	8001f2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_UART_MspInit+0x98>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001efa:	2360      	movs	r3, #96	@ 0x60
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <HAL_UART_MspInit+0x9c>)
 8001f16:	f001 fb63 	bl	80035e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2026      	movs	r0, #38	@ 0x26
 8001f20:	f000 ffb8 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f24:	2026      	movs	r0, #38	@ 0x26
 8001f26:	f000 ffd1 	bl	8002ecc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40004400 	.word	0x40004400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020c00 	.word	0x40020c00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	@ (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff fe33 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f003 fe61 	bl	8005c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff f969 	bl	8001248 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001f84:	08005cc4 	.word	0x08005cc4
  ldr r2, =_sbss
 8001f88:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001f8c:	20000418 	.word	0x20000418

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 ff5e 	bl	8002e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f7ff fd28 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fcfe 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000028 	.word	0x20000028
 8001ffc:	20000414 	.word	0x20000414

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000414 	.word	0x20000414

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000028 	.word	0x20000028

08002060 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0ed      	b.n	800224e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe ff82 	bl	8000f88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002094:	f7ff ffb4 	bl	8002000 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800209a:	e012      	b.n	80020c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800209c:	f7ff ffb0 	bl	8002000 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b0a      	cmp	r3, #10
 80020a8:	d90b      	bls.n	80020c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0c5      	b.n	800224e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0e5      	beq.n	800209c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0202 	bic.w	r2, r2, #2
 80020de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e0:	f7ff ff8e 	bl	8002000 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020e6:	e012      	b.n	800210e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e8:	f7ff ff8a 	bl	8002000 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b0a      	cmp	r3, #10
 80020f4:	d90b      	bls.n	800210e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2205      	movs	r2, #5
 8002106:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e09f      	b.n	800224e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e5      	bne.n	80020e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e1b      	ldrb	r3, [r3, #24]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7e5b      	ldrb	r3, [r3, #25]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d108      	bne.n	8002160 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e9b      	ldrb	r3, [r3, #26]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0220 	orr.w	r2, r2, #32
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e007      	b.n	800219a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0220 	bic.w	r2, r2, #32
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7edb      	ldrb	r3, [r3, #27]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0210 	bic.w	r2, r2, #16
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e007      	b.n	80021c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0210 	orr.w	r2, r2, #16
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7f1b      	ldrb	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0208 	orr.w	r2, r2, #8
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e007      	b.n	80021ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0208 	bic.w	r2, r2, #8
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f5b      	ldrb	r3, [r3, #29]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0204 	orr.w	r2, r2, #4
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e007      	b.n	8002218 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	ea42 0103 	orr.w	r1, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	1e5a      	subs	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <HAL_CAN_ConfigFilter+0x26>
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b02      	cmp	r3, #2
 800227a:	f040 80be 	bne.w	80023fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800227e:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <HAL_CAN_ConfigFilter+0x1bc>)
 8002280:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002298:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	401a      	ands	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d123      	bne.n	8002328 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002302:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3248      	adds	r2, #72	@ 0x48
 8002308:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800231c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800231e:	6979      	ldr	r1, [r7, #20]
 8002320:	3348      	adds	r3, #72	@ 0x48
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d122      	bne.n	8002376 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	431a      	orrs	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002350:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3248      	adds	r2, #72	@ 0x48
 8002356:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800236a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	3348      	adds	r3, #72	@ 0x48
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	401a      	ands	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002390:	e007      	b.n	80023a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	431a      	orrs	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80023bc:	e007      	b.n	80023ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	431a      	orrs	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023ec:	f023 0201 	bic.w	r2, r3, #1
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e006      	b.n	8002408 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40006400 	.word	0x40006400

08002418 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d12e      	bne.n	800248a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002444:	f7ff fddc 	bl	8002000 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800244a:	e012      	b.n	8002472 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800244c:	f7ff fdd8 	bl	8002000 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b0a      	cmp	r3, #10
 8002458:	d90b      	bls.n	8002472 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2205      	movs	r2, #5
 800246a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e012      	b.n	8002498 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e5      	bne.n	800244c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e006      	b.n	8002498 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d003      	beq.n	80024cc <HAL_CAN_AddTxMessage+0x2c>
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	f040 80b8 	bne.w	800263c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80a0 	beq.w	800262c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	0e1b      	lsrs	r3, r3, #24
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d907      	bls.n	800250c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e09e      	b.n	800264a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800250c:	2201      	movs	r2, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	409a      	lsls	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	6809      	ldr	r1, [r1, #0]
 800252c:	431a      	orrs	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3318      	adds	r3, #24
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	440b      	add	r3, r1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e00f      	b.n	800255a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002544:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800254e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3318      	adds	r3, #24
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	440b      	add	r3, r1
 800256a:	3304      	adds	r3, #4
 800256c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	7d1b      	ldrb	r3, [r3, #20]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d111      	bne.n	800259a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3318      	adds	r3, #24
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3318      	adds	r3, #24
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3304      	adds	r3, #4
 8002598:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3307      	adds	r3, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	061a      	lsls	r2, r3, #24
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3306      	adds	r3, #6
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3305      	adds	r3, #5
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4313      	orrs	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	3204      	adds	r2, #4
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	4610      	mov	r0, r2
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	ea43 0200 	orr.w	r2, r3, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80025d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3303      	adds	r3, #3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	061a      	lsls	r2, r3, #24
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3302      	adds	r3, #2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3301      	adds	r3, #1
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4313      	orrs	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	4610      	mov	r0, r2
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6811      	ldr	r1, [r2, #0]
 80025f8:	ea43 0200 	orr.w	r2, r3, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	440b      	add	r3, r1
 8002602:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002606:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3318      	adds	r3, #24
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3318      	adds	r3, #24
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	440b      	add	r3, r1
 8002626:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e00e      	b.n	800264a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e006      	b.n	800264a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <HAL_CAN_GetRxMessage+0x24>
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 80f3 	bne.w	8002860 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10e      	bne.n	800269e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0e7      	b.n	800286e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d8      	b.n	800286e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	331b      	adds	r3, #27
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	4413      	add	r3, r2
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0204 	and.w	r2, r3, #4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	331b      	adds	r3, #27
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e00b      	b.n	800270c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	331b      	adds	r3, #27
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	331b      	adds	r3, #27
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0202 	and.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	331b      	adds	r3, #27
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	331b      	adds	r3, #27
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	b2da      	uxtb	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	331b      	adds	r3, #27
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0a1a      	lsrs	r2, r3, #8
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0c1a      	lsrs	r2, r3, #16
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3302      	adds	r3, #2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e1a      	lsrs	r2, r3, #24
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3303      	adds	r3, #3
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0a1a      	lsrs	r2, r3, #8
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	3305      	adds	r3, #5
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0c1a      	lsrs	r2, r3, #16
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3306      	adds	r3, #6
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e1a      	lsrs	r2, r3, #24
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3307      	adds	r3, #7
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	e007      	b.n	800285c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e006      	b.n	800286e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d002      	beq.n	8002898 <HAL_CAN_ActivateNotification+0x1e>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d109      	bne.n	80028ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6959      	ldr	r1, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e006      	b.n	80028ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08a      	sub	sp, #40	@ 0x28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d07c      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d023      	beq.n	800295e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f983 	bl	8002c34 <HAL_CAN_TxMailbox0CompleteCallback>
 800292e:	e016      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
 8002942:	e00c      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
 8002956:	e002      	b.n	800295e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f989 	bl	8002c70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d024      	beq.n	80029b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002970:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f963 	bl	8002c48 <HAL_CAN_TxMailbox1CompleteCallback>
 8002982:	e016      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	e00c      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029aa:	e002      	b.n	80029b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f969 	bl	8002c84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d024      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f943 	bl	8002c5c <HAL_CAN_TxMailbox2CompleteCallback>
 80029d6:	e016      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ea:	e00c      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fe:	e002      	b.n	8002a06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f949 	bl	8002c98 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2210      	movs	r2, #16
 8002a28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f930 	bl	8002cac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fe fd53 	bl	8001510 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f912 	bl	8002cd4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8f9 	bl	8002cc0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8fc 	bl	8002ce8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8f5 	bl	8002cfc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07b      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d072      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d043      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03e      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b94:	2b60      	cmp	r3, #96	@ 0x60
 8002b96:	d02b      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x32a>
 8002b98:	2b60      	cmp	r3, #96	@ 0x60
 8002b9a:	d82e      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002b9c:	2b50      	cmp	r3, #80	@ 0x50
 8002b9e:	d022      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x320>
 8002ba0:	2b50      	cmp	r3, #80	@ 0x50
 8002ba2:	d82a      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002ba4:	2b40      	cmp	r3, #64	@ 0x40
 8002ba6:	d019      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x316>
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d826      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002bac:	2b30      	cmp	r3, #48	@ 0x30
 8002bae:	d010      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x30c>
 8002bb0:	2b30      	cmp	r3, #48	@ 0x30
 8002bb2:	d822      	bhi.n	8002bfa <HAL_CAN_IRQHandler+0x334>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d002      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x2f8>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d005      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bbc:	e01d      	b.n	8002bfa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bc6:	e019      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bd0:	e014      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	f043 0320 	orr.w	r3, r3, #32
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bda:	e00f      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002be4:	e00a      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bee:	e005      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bf8:	e000      	b.n	8002bfc <HAL_CAN_IRQHandler+0x336>
            break;
 8002bfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f872 	bl	8002d10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	@ 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	@ (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff4c 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea6:	f7ff ff61 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6978      	ldr	r0, [r7, #20]
 8002eb2:	f7ff ffb1 	bl	8002e18 <NVIC_EncodePriority>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff80 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002ec4:	bf00      	nop
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff54 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff f884 	bl	8002000 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e099      	b.n	8003038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e00f      	b.n	8002f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7ff f86b 	bl	8002000 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d908      	bls.n	8002f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e078      	b.n	8003038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_DMA_Init+0x158>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d117      	bne.n	800300a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa7b 	bl	80034e8 <DMA_CheckFifoParam>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	@ 0x40
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003006:	2301      	movs	r3, #1
 8003008:	e016      	b.n	8003038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa32 	bl	800347c <DMA_CalcBaseAndBitshift>
 8003018:	4603      	mov	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	223f      	movs	r2, #63	@ 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	f010803f 	.word	0xf010803f

08003044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003052:	f7fe ffd5 	bl	8002000 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d008      	beq.n	8003076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	@ 0x80
 8003068:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e052      	b.n	800311c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0216 	bic.w	r2, r2, #22
 8003084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_DMA_Abort+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c6:	e013      	b.n	80030f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c8:	f7fe ff9a 	bl	8002000 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d90c      	bls.n	80030f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2203      	movs	r2, #3
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e015      	b.n	800311c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e4      	bne.n	80030c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	223f      	movs	r2, #63	@ 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2280      	movs	r2, #128	@ 0x80
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00c      	b.n	800315c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2205      	movs	r2, #5
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003174:	4b8e      	ldr	r3, [pc, #568]	@ (80033b0 <HAL_DMA_IRQHandler+0x248>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a8e      	ldr	r2, [pc, #568]	@ (80033b4 <HAL_DMA_IRQHandler+0x24c>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2208      	movs	r2, #8
 8003194:	409a      	lsls	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c0:	2208      	movs	r2, #8
 80031c2:	409a      	lsls	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2201      	movs	r2, #1
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	2204      	movs	r2, #4
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	2204      	movs	r2, #4
 800322e:	409a      	lsls	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	2210      	movs	r2, #16
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d043      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03c      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	2210      	movs	r2, #16
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d108      	bne.n	8003298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d024      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	e01f      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e016      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	2220      	movs	r2, #32
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 808f 	beq.w	8003408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8087 	beq.w	8003408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	2220      	movs	r2, #32
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d136      	bne.n	8003380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0216 	bic.w	r2, r2, #22
 8003320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_DMA_IRQHandler+0x1da>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	223f      	movs	r2, #63	@ 0x3f
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d07e      	beq.n	8003474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
        }
        return;
 800337e:	e079      	b.n	8003474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01d      	beq.n	80033ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e02c      	b.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
 80033ae:	bf00      	nop
 80033b0:	20000020 	.word	0x20000020
 80033b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e01e      	b.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0210 	bic.w	r2, r2, #16
 80033e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	2b00      	cmp	r3, #0
 800340e:	d032      	beq.n	8003476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d022      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2205      	movs	r2, #5
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	d307      	bcc.n	8003450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f2      	bne.n	8003434 <HAL_DMA_IRQHandler+0x2cc>
 800344e:	e000      	b.n	8003452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003450:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003474:	bf00      	nop
    }
  }
}
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3b10      	subs	r3, #16
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <DMA_CalcBaseAndBitshift+0x64>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003496:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d909      	bls.n	80034be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80034bc:	e007      	b.n	80034ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	aaaaaaab 	.word	0xaaaaaaab
 80034e4:	08005cac 	.word	0x08005cac

080034e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11f      	bne.n	8003542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d856      	bhi.n	80035b6 <DMA_CheckFifoParam+0xce>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <DMA_CheckFifoParam+0x28>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	08003533 	.word	0x08003533
 8003518:	08003521 	.word	0x08003521
 800351c:	080035b7 	.word	0x080035b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d046      	beq.n	80035ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e043      	b.n	80035ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800353a:	d140      	bne.n	80035be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003540:	e03d      	b.n	80035be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354a:	d121      	bne.n	8003590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d837      	bhi.n	80035c2 <DMA_CheckFifoParam+0xda>
 8003552:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <DMA_CheckFifoParam+0x70>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003569 	.word	0x08003569
 800355c:	0800356f 	.word	0x0800356f
 8003560:	08003569 	.word	0x08003569
 8003564:	08003581 	.word	0x08003581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e030      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d025      	beq.n	80035c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357e:	e022      	b.n	80035c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800358e:	e01c      	b.n	80035ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d903      	bls.n	800359e <DMA_CheckFifoParam+0xb6>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d003      	beq.n	80035a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800359c:	e018      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      break;
 80035a2:	e015      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e00b      	b.n	80035ce <DMA_CheckFifoParam+0xe6>
      break;
 80035b6:	bf00      	nop
 80035b8:	e00a      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e008      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e006      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
    }
  } 
  
  return status; 
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e177      	b.n	80038ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 8166 	bne.w	80038e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80c0 	beq.w	80038e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b66      	ldr	r3, [pc, #408]	@ (8003904 <HAL_GPIO_Init+0x324>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	4a65      	ldr	r2, [pc, #404]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003774:	6453      	str	r3, [r2, #68]	@ 0x44
 8003776:	4b63      	ldr	r3, [pc, #396]	@ (8003904 <HAL_GPIO_Init+0x324>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003782:	4a61      	ldr	r2, [pc, #388]	@ (8003908 <HAL_GPIO_Init+0x328>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a58      	ldr	r2, [pc, #352]	@ (800390c <HAL_GPIO_Init+0x32c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d037      	beq.n	800381e <HAL_GPIO_Init+0x23e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a57      	ldr	r2, [pc, #348]	@ (8003910 <HAL_GPIO_Init+0x330>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_GPIO_Init+0x23a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a56      	ldr	r2, [pc, #344]	@ (8003914 <HAL_GPIO_Init+0x334>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <HAL_GPIO_Init+0x236>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a55      	ldr	r2, [pc, #340]	@ (8003918 <HAL_GPIO_Init+0x338>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d025      	beq.n	8003812 <HAL_GPIO_Init+0x232>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a54      	ldr	r2, [pc, #336]	@ (800391c <HAL_GPIO_Init+0x33c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01f      	beq.n	800380e <HAL_GPIO_Init+0x22e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a53      	ldr	r2, [pc, #332]	@ (8003920 <HAL_GPIO_Init+0x340>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d019      	beq.n	800380a <HAL_GPIO_Init+0x22a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	@ (8003924 <HAL_GPIO_Init+0x344>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_GPIO_Init+0x226>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a51      	ldr	r2, [pc, #324]	@ (8003928 <HAL_GPIO_Init+0x348>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00d      	beq.n	8003802 <HAL_GPIO_Init+0x222>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a50      	ldr	r2, [pc, #320]	@ (800392c <HAL_GPIO_Init+0x34c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <HAL_GPIO_Init+0x21e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003930 <HAL_GPIO_Init+0x350>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_GPIO_Init+0x21a>
 80037f6:	2309      	movs	r3, #9
 80037f8:	e012      	b.n	8003820 <HAL_GPIO_Init+0x240>
 80037fa:	230a      	movs	r3, #10
 80037fc:	e010      	b.n	8003820 <HAL_GPIO_Init+0x240>
 80037fe:	2308      	movs	r3, #8
 8003800:	e00e      	b.n	8003820 <HAL_GPIO_Init+0x240>
 8003802:	2307      	movs	r3, #7
 8003804:	e00c      	b.n	8003820 <HAL_GPIO_Init+0x240>
 8003806:	2306      	movs	r3, #6
 8003808:	e00a      	b.n	8003820 <HAL_GPIO_Init+0x240>
 800380a:	2305      	movs	r3, #5
 800380c:	e008      	b.n	8003820 <HAL_GPIO_Init+0x240>
 800380e:	2304      	movs	r3, #4
 8003810:	e006      	b.n	8003820 <HAL_GPIO_Init+0x240>
 8003812:	2303      	movs	r3, #3
 8003814:	e004      	b.n	8003820 <HAL_GPIO_Init+0x240>
 8003816:	2302      	movs	r3, #2
 8003818:	e002      	b.n	8003820 <HAL_GPIO_Init+0x240>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_GPIO_Init+0x240>
 800381e:	2300      	movs	r3, #0
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f002 0203 	and.w	r2, r2, #3
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	4093      	lsls	r3, r2
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003830:	4935      	ldr	r1, [pc, #212]	@ (8003908 <HAL_GPIO_Init+0x328>)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	3302      	adds	r3, #2
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383e:	4b3d      	ldr	r3, [pc, #244]	@ (8003934 <HAL_GPIO_Init+0x354>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003862:	4a34      	ldr	r2, [pc, #208]	@ (8003934 <HAL_GPIO_Init+0x354>)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003868:	4b32      	ldr	r3, [pc, #200]	@ (8003934 <HAL_GPIO_Init+0x354>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800388c:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <HAL_GPIO_Init+0x354>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003892:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <HAL_GPIO_Init+0x354>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_GPIO_Init+0x354>)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <HAL_GPIO_Init+0x354>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e0:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <HAL_GPIO_Init+0x354>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3301      	adds	r3, #1
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b0f      	cmp	r3, #15
 80038f0:	f67f ae84 	bls.w	80035fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40013800 	.word	0x40013800
 800390c:	40020000 	.word	0x40020000
 8003910:	40020400 	.word	0x40020400
 8003914:	40020800 	.word	0x40020800
 8003918:	40020c00 	.word	0x40020c00
 800391c:	40021000 	.word	0x40021000
 8003920:	40021400 	.word	0x40021400
 8003924:	40021800 	.word	0x40021800
 8003928:	40021c00 	.word	0x40021c00
 800392c:	40022000 	.word	0x40022000
 8003930:	40022400 	.word	0x40022400
 8003934:	40013c00 	.word	0x40013c00

08003938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	807b      	strh	r3, [r7, #2]
 8003944:	4613      	mov	r3, r2
 8003946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003948:	787b      	ldrb	r3, [r7, #1]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003954:	e003      	b.n	800395e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	041a      	lsls	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	619a      	str	r2, [r3, #24]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800397c:	887a      	ldrh	r2, [r7, #2]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	041a      	lsls	r2, r3, #16
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43d9      	mvns	r1, r3
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	400b      	ands	r3, r1
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fad2 	bl	8002000 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe face 	bl	8002000 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe fabe 	bl	8002000 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fe faba 	bl	8002000 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fe fa73 	bl	8002000 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fa6f 	bl	8002000 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa52 	bl	8002000 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fe fa4e 	bl	8002000 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fe fa32 	bl	8002000 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fe fa2e 	bl	8002000 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fa1b 	bl	8002000 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fe fa17 	bl	8002000 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe f9d7 	bl	8002000 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fe f9d3 	bl	8002000 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe f998 	bl	8002000 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe f994 	bl	8002000 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fe f982 	bl	8002000 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fe f97e 	bl	8002000 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe f952 	bl	8002000 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe f94e 	bl	8002000 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe f927 	bl	8002000 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe f923 	bl	8002000 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe f910 	bl	8002000 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe f90c 	bl	8002000 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fe f83e 	bl	8002000 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fe f83a 	bl	8002000 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fcee 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	08005c94 	.word	0x08005c94
 8004054:	20000020 	.word	0x20000020
 8004058:	20000024 	.word	0x20000024

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b090      	sub	sp, #64	@ 0x40
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 8004068:	2300      	movs	r3, #0
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406c:	2300      	movs	r3, #0
 800406e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80a1 	bhi.w	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e09b      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b53      	ldr	r3, [pc, #332]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004094:	e09b      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800409a:	e098      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b4d      	ldr	r3, [pc, #308]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b4a      	ldr	r3, [pc, #296]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c4:	2100      	movs	r1, #0
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c8:	fb03 f201 	mul.w	r2, r3, r1
 80040cc:	2300      	movs	r3, #0
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4a43      	ldr	r2, [pc, #268]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d6:	fba0 1202 	umull	r1, r2, r0, r2
 80040da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040dc:	460a      	mov	r2, r1
 80040de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e2:	4413      	add	r3, r2
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	2200      	movs	r2, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040f6:	f7fc fc97 	bl	8000a28 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4613      	mov	r3, r2
 8004100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004102:	e053      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	617a      	str	r2, [r7, #20]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004116:	f04f 0b00 	mov.w	fp, #0
 800411a:	4652      	mov	r2, sl
 800411c:	465b      	mov	r3, fp
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	ebb2 080a 	subs.w	r8, r2, sl
 8004136:	eb63 090b 	sbc.w	r9, r3, fp
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800414a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800414e:	ebb2 0408 	subs.w	r4, r2, r8
 8004152:	eb63 0509 	sbc.w	r5, r3, r9
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	00eb      	lsls	r3, r5, #3
 8004160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004164:	00e2      	lsls	r2, r4, #3
 8004166:	4614      	mov	r4, r2
 8004168:	461d      	mov	r5, r3
 800416a:	eb14 030a 	adds.w	r3, r4, sl
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	eb45 030b 	adc.w	r3, r5, fp
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004182:	4629      	mov	r1, r5
 8004184:	028b      	lsls	r3, r1, #10
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800418c:	4621      	mov	r1, r4
 800418e:	028a      	lsls	r2, r1, #10
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	2200      	movs	r2, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a0:	f7fc fc42 	bl	8000a28 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3740      	adds	r7, #64	@ 0x40
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	00b71b00 	.word	0x00b71b00

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000020 	.word	0x20000020

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a9b      	lsrs	r3, r3, #10
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4903      	ldr	r1, [pc, #12]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	08005ca4 	.word	0x08005ca4

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800422c:	f7ff ffdc 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0b5b      	lsrs	r3, r3, #13
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	@ (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	08005ca4 	.word	0x08005ca4

08004250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	220f      	movs	r2, #15
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800426c:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004284:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <HAL_RCC_GetClockConfig+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40023c00 	.word	0x40023c00

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e041      	b.n	800434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f839 	bl	8004352 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 fac4 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e04e      	b.n	800441e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a23      	ldr	r2, [pc, #140]	@ (800442c <HAL_TIM_Base_Start_IT+0xc4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d01d      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_TIM_Base_Start_IT+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004434 <HAL_TIM_Base_Start_IT+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <HAL_TIM_Base_Start_IT+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <HAL_TIM_Base_Start_IT+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a19      	ldr	r2, [pc, #100]	@ (8004440 <HAL_TIM_Base_Start_IT+0xd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	e007      	b.n	800441c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40010400 	.word	0x40010400
 8004440:	40014000 	.word	0x40014000
 8004444:	40001800 	.word	0x40001800

08004448 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e041      	b.n	80044de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fc42 	bl	8001cf8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f000 f9fa 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d122      	bne.n	8004542 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b02      	cmp	r3, #2
 8004508:	d11b      	bne.n	8004542 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0202 	mvn.w	r2, #2
 8004512:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f98a 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 800452e:	e005      	b.n	800453c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f97c 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f98d 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d122      	bne.n	8004596 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d11b      	bne.n	8004596 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0204 	mvn.w	r2, #4
 8004566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f960 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f952 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f963 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d122      	bne.n	80045ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11b      	bne.n	80045ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0208 	mvn.w	r2, #8
 80045ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2204      	movs	r2, #4
 80045c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f936 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 80045d6:	e005      	b.n	80045e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f928 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f939 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d122      	bne.n	800463e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d11b      	bne.n	800463e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0210 	mvn.w	r2, #16
 800460e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2208      	movs	r2, #8
 8004614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f90c 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 800462a:	e005      	b.n	8004638 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8fe 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f90f 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0201 	mvn.w	r2, #1
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fd f997 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004674:	2b80      	cmp	r3, #128	@ 0x80
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb45 	bl	8004d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ae:	2b40      	cmp	r3, #64	@ 0x40
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8d4 	bl	800486a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d10e      	bne.n	80046ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0220 	mvn.w	r2, #32
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb0f 	bl	8004d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004710:	2302      	movs	r3, #2
 8004712:	e088      	b.n	8004826 <HAL_TIM_IC_ConfigChannel+0x130>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11b      	bne.n	800475a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f000 f945 	bl	80049c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 020c 	bic.w	r2, r2, #12
 8004744:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6999      	ldr	r1, [r3, #24]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]
 8004758:	e060      	b.n	800481c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d11c      	bne.n	800479a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f000 f99a 	bl	8004aa8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004782:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
 8004798:	e040      	b.n	800481c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f000 f9b7 	bl	8004b22 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020c 	bic.w	r2, r2, #12
 80047c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69d9      	ldr	r1, [r3, #28]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	61da      	str	r2, [r3, #28]
 80047d6:	e021      	b.n	800481c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d11c      	bne.n	8004818 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f000 f9d4 	bl	8004b9a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004800:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
 8004816:	e001      	b.n	800481c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a40      	ldr	r2, [pc, #256]	@ (8004994 <TIM_Base_SetConfig+0x114>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004998 <TIM_Base_SetConfig+0x118>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3c      	ldr	r2, [pc, #240]	@ (800499c <TIM_Base_SetConfig+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	@ (80049a0 <TIM_Base_SetConfig+0x120>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3a      	ldr	r2, [pc, #232]	@ (80049a4 <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004994 <TIM_Base_SetConfig+0x114>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004998 <TIM_Base_SetConfig+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <TIM_Base_SetConfig+0x11c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	@ (80049a0 <TIM_Base_SetConfig+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a29      	ldr	r2, [pc, #164]	@ (80049a4 <TIM_Base_SetConfig+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a28      	ldr	r2, [pc, #160]	@ (80049a8 <TIM_Base_SetConfig+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a27      	ldr	r2, [pc, #156]	@ (80049ac <TIM_Base_SetConfig+0x12c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a26      	ldr	r2, [pc, #152]	@ (80049b0 <TIM_Base_SetConfig+0x130>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	@ (80049b4 <TIM_Base_SetConfig+0x134>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <TIM_Base_SetConfig+0x138>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a23      	ldr	r2, [pc, #140]	@ (80049bc <TIM_Base_SetConfig+0x13c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0c      	ldr	r2, [pc, #48]	@ (80049a4 <TIM_Base_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40010400 	.word	0x40010400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	40001800 	.word	0x40001800
 80049b8:	40001c00 	.word	0x40001c00
 80049bc:	40002000 	.word	0x40002000

080049c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a28      	ldr	r2, [pc, #160]	@ (8004a8c <TIM_TI1_SetConfig+0xcc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01b      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	d017      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a25      	ldr	r2, [pc, #148]	@ (8004a90 <TIM_TI1_SetConfig+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4a24      	ldr	r2, [pc, #144]	@ (8004a94 <TIM_TI1_SetConfig+0xd4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a23      	ldr	r2, [pc, #140]	@ (8004a98 <TIM_TI1_SetConfig+0xd8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a22      	ldr	r2, [pc, #136]	@ (8004a9c <TIM_TI1_SetConfig+0xdc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a21      	ldr	r2, [pc, #132]	@ (8004aa0 <TIM_TI1_SetConfig+0xe0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_TI1_SetConfig+0x66>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a20      	ldr	r2, [pc, #128]	@ (8004aa4 <TIM_TI1_SetConfig+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <TIM_TI1_SetConfig+0x6a>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <TIM_TI1_SetConfig+0x6c>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e003      	b.n	8004a4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f023 030a 	bic.w	r3, r3, #10
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f003 030a 	and.w	r3, r3, #10
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40010400 	.word	0x40010400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40001800 	.word	0x40001800

08004aa8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0210 	bic.w	r2, r3, #16
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	031b      	lsls	r3, r3, #12
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004afa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e05a      	b.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	@ (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d022      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c78:	d01d      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1a      	ldr	r2, [pc, #104]	@ (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40001800 	.word	0x40001800

08004d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e03f      	b.n	8004dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fd f8a0 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	@ 0x24
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fcdf 	bl	800573c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d11d      	bne.n	8004e24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_UART_Receive_IT+0x26>
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e016      	b.n	8004e26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Receive_IT+0x38>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e00f      	b.n	8004e26 <HAL_UART_Receive_IT+0x58>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fab6 	bl	800538c <UART_Start_Receive_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0ba      	sub	sp, #232	@ 0xe8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
 8004e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fb99 	bl	80055c6 <UART_Receive_IT>
      return;
 8004e94:	e256      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80de 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
 8004ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80d1 	beq.w	800505c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 81ed 	beq.w	800533a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb24 	bl	80055c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_UART_IRQHandler+0x17a>
 8004fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04f      	beq.n	800504a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa2c 	bl	8005408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d141      	bne.n	8005042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1d9      	bne.n	8004fbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	4a7d      	ldr	r2, [pc, #500]	@ (800520c <HAL_UART_IRQHandler+0x3dc>)
 8005018:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f880 	bl	8003124 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00e      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f990 	bl	8005360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00a      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f98c 	bl	8005360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e006      	b.n	8005058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f988 	bl	8005360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005056:	e170      	b.n	800533a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	bf00      	nop
    return;
 800505a:	e16e      	b.n	800533a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	f040 814a 	bne.w	80052fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8143 	beq.w	80052fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 813c 	beq.w	80052fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a2:	2b40      	cmp	r3, #64	@ 0x40
 80050a4:	f040 80b4 	bne.w	8005210 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8140 	beq.w	800533e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f080 8139 	bcs.w	800533e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050de:	f000 8088 	beq.w	80051f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800510e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800511a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1d9      	bne.n	80050e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800513e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005152:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005156:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800515a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800517a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800517c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3314      	adds	r3, #20
 800518a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800518e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800519c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fd ff29 	bl	8003044 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8b6 	bl	8005374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005208:	e099      	b.n	800533e <HAL_UART_IRQHandler+0x50e>
 800520a:	bf00      	nop
 800520c:	080054cf 	.word	0x080054cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005218:	b29b      	uxth	r3, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 808b 	beq.w	8005342 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800522c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8086 	beq.w	8005342 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800525a:	647a      	str	r2, [r7, #68]	@ 0x44
 800525c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e3      	bne.n	8005236 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3314      	adds	r3, #20
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	623b      	str	r3, [r7, #32]
   return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005292:	633a      	str	r2, [r7, #48]	@ 0x30
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e3      	bne.n	80052b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f83e 	bl	8005374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052f8:	e023      	b.n	8005342 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_UART_IRQHandler+0x4ea>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8ef 	bl	80054f6 <UART_Transmit_IT>
    return;
 8005318:	e014      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <HAL_UART_IRQHandler+0x514>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f92f 	bl	8005596 <UART_EndTransmit_IT>
    return;
 8005338:	e004      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
    return;
 800533a:	bf00      	nop
 800533c:	e002      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
      return;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_UART_IRQHandler+0x514>
      return;
 8005342:	bf00      	nop
  }
}
 8005344:	37e8      	adds	r7, #232	@ 0xe8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2222      	movs	r2, #34	@ 0x22
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0220 	orr.w	r2, r2, #32
 80053f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b095      	sub	sp, #84	@ 0x54
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005430:	643a      	str	r2, [r7, #64]	@ 0x40
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3314      	adds	r3, #20
 800544a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	61fb      	str	r3, [r7, #28]
   return(result);
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e5      	bne.n	8005444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547c:	2b01      	cmp	r3, #1
 800547e:	d119      	bne.n	80054b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f023 0310 	bic.w	r3, r3, #16
 8005496:	647b      	str	r3, [r7, #68]	@ 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054a0:	61ba      	str	r2, [r7, #24]
 80054a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6979      	ldr	r1, [r7, #20]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	613b      	str	r3, [r7, #16]
   return(result);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054c2:	bf00      	nop
 80054c4:	3754      	adds	r7, #84	@ 0x54
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ff39 	bl	8005360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b21      	cmp	r3, #33	@ 0x21
 8005508:	d13e      	bne.n	8005588 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005512:	d114      	bne.n	800553e <UART_Transmit_IT+0x48>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d110      	bne.n	800553e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005530:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	621a      	str	r2, [r3, #32]
 800553c:	e008      	b.n	8005550 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6211      	str	r1, [r2, #32]
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29b      	uxth	r3, r3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4619      	mov	r1, r3
 800555e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10f      	bne.n	8005584 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005572:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005582:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fec8 	bl	800534c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b08c      	sub	sp, #48	@ 0x30
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b22      	cmp	r3, #34	@ 0x22
 80055d8:	f040 80ab 	bne.w	8005732 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e4:	d117      	bne.n	8005616 <UART_Receive_IT+0x50>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d113      	bne.n	8005616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005604:	b29a      	uxth	r2, r3
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
 8005614:	e026      	b.n	8005664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005628:	d007      	beq.n	800563a <UART_Receive_IT+0x74>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <UART_Receive_IT+0x82>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e008      	b.n	800565a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15a      	bne.n	800572e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0220 	bic.w	r2, r2, #32
 8005686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d135      	bne.n	8005724 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	613b      	str	r3, [r7, #16]
   return(result);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f023 0310 	bic.w	r3, r3, #16
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056de:	623a      	str	r2, [r7, #32]
 80056e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69f9      	ldr	r1, [r7, #28]
 80056e4:	6a3a      	ldr	r2, [r7, #32]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d10a      	bne.n	8005716 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fe29 	bl	8005374 <HAL_UARTEx_RxEventCallback>
 8005722:	e002      	b.n	800572a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fb ff7b 	bl	8001620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e002      	b.n	8005734 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3730      	adds	r7, #48	@ 0x30
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005740:	b0c0      	sub	sp, #256	@ 0x100
 8005742:	af00      	add	r7, sp, #0
 8005744:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	ea40 0301 	orr.w	r3, r0, r1
 8005764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	431a      	orrs	r2, r3
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	431a      	orrs	r2, r3
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005794:	f021 010c 	bic.w	r1, r1, #12
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057a2:	430b      	orrs	r3, r1
 80057a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	6999      	ldr	r1, [r3, #24]
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	ea40 0301 	orr.w	r3, r0, r1
 80057c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005a08 <UART_SetConfig+0x2cc>)
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d005      	beq.n	80057dc <UART_SetConfig+0xa0>
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a0c <UART_SetConfig+0x2d0>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d104      	bne.n	80057e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fe fd24 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 80057e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057e4:	e003      	b.n	80057ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057e6:	f7fe fd0b 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 80057ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f8:	f040 810c 	bne.w	8005a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005800:	2200      	movs	r2, #0
 8005802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005806:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800580a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800580e:	4622      	mov	r2, r4
 8005810:	462b      	mov	r3, r5
 8005812:	1891      	adds	r1, r2, r2
 8005814:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005816:	415b      	adcs	r3, r3
 8005818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800581a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800581e:	4621      	mov	r1, r4
 8005820:	eb12 0801 	adds.w	r8, r2, r1
 8005824:	4629      	mov	r1, r5
 8005826:	eb43 0901 	adc.w	r9, r3, r1
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800583a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800583e:	4690      	mov	r8, r2
 8005840:	4699      	mov	r9, r3
 8005842:	4623      	mov	r3, r4
 8005844:	eb18 0303 	adds.w	r3, r8, r3
 8005848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800584c:	462b      	mov	r3, r5
 800584e:	eb49 0303 	adc.w	r3, r9, r3
 8005852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800586a:	460b      	mov	r3, r1
 800586c:	18db      	adds	r3, r3, r3
 800586e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005870:	4613      	mov	r3, r2
 8005872:	eb42 0303 	adc.w	r3, r2, r3
 8005876:	657b      	str	r3, [r7, #84]	@ 0x54
 8005878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800587c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005880:	f7fb f8d2 	bl	8000a28 <__aeabi_uldivmod>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4b61      	ldr	r3, [pc, #388]	@ (8005a10 <UART_SetConfig+0x2d4>)
 800588a:	fba3 2302 	umull	r2, r3, r3, r2
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	011c      	lsls	r4, r3, #4
 8005892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005896:	2200      	movs	r2, #0
 8005898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800589c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058a4:	4642      	mov	r2, r8
 80058a6:	464b      	mov	r3, r9
 80058a8:	1891      	adds	r1, r2, r2
 80058aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058ac:	415b      	adcs	r3, r3
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058b4:	4641      	mov	r1, r8
 80058b6:	eb12 0a01 	adds.w	sl, r2, r1
 80058ba:	4649      	mov	r1, r9
 80058bc:	eb43 0b01 	adc.w	fp, r3, r1
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058d4:	4692      	mov	sl, r2
 80058d6:	469b      	mov	fp, r3
 80058d8:	4643      	mov	r3, r8
 80058da:	eb1a 0303 	adds.w	r3, sl, r3
 80058de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058e2:	464b      	mov	r3, r9
 80058e4:	eb4b 0303 	adc.w	r3, fp, r3
 80058e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005900:	460b      	mov	r3, r1
 8005902:	18db      	adds	r3, r3, r3
 8005904:	643b      	str	r3, [r7, #64]	@ 0x40
 8005906:	4613      	mov	r3, r2
 8005908:	eb42 0303 	adc.w	r3, r2, r3
 800590c:	647b      	str	r3, [r7, #68]	@ 0x44
 800590e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005916:	f7fb f887 	bl	8000a28 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4611      	mov	r1, r2
 8005920:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <UART_SetConfig+0x2d4>)
 8005922:	fba3 2301 	umull	r2, r3, r3, r1
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2264      	movs	r2, #100	@ 0x64
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	1acb      	subs	r3, r1, r3
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005936:	4b36      	ldr	r3, [pc, #216]	@ (8005a10 <UART_SetConfig+0x2d4>)
 8005938:	fba3 2302 	umull	r2, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005944:	441c      	add	r4, r3
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005950:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005960:	415b      	adcs	r3, r3
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6339      	str	r1, [r7, #48]	@ 0x30
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	637b      	str	r3, [r7, #52]	@ 0x34
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059bc:	460b      	mov	r3, r1
 80059be:	18db      	adds	r3, r3, r3
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059c2:	4613      	mov	r3, r2
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059d2:	f7fb f829 	bl	8000a28 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <UART_SetConfig+0x2d4>)
 80059dc:	fba3 1302 	umull	r1, r3, r3, r2
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	2164      	movs	r1, #100	@ 0x64
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	3332      	adds	r3, #50	@ 0x32
 80059ee:	4a08      	ldr	r2, [pc, #32]	@ (8005a10 <UART_SetConfig+0x2d4>)
 80059f0:	fba2 2303 	umull	r2, r3, r2, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	f003 0207 	and.w	r2, r3, #7
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4422      	add	r2, r4
 8005a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a04:	e106      	b.n	8005c14 <UART_SetConfig+0x4d8>
 8005a06:	bf00      	nop
 8005a08:	40011000 	.word	0x40011000
 8005a0c:	40011400 	.word	0x40011400
 8005a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a26:	4642      	mov	r2, r8
 8005a28:	464b      	mov	r3, r9
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	6239      	str	r1, [r7, #32]
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a36:	4641      	mov	r1, r8
 8005a38:	1854      	adds	r4, r2, r1
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	eb43 0501 	adc.w	r5, r3, r1
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	00eb      	lsls	r3, r5, #3
 8005a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a4e:	00e2      	lsls	r2, r4, #3
 8005a50:	4614      	mov	r4, r2
 8005a52:	461d      	mov	r5, r3
 8005a54:	4643      	mov	r3, r8
 8005a56:	18e3      	adds	r3, r4, r3
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	eb45 0303 	adc.w	r3, r5, r3
 8005a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a82:	4629      	mov	r1, r5
 8005a84:	008b      	lsls	r3, r1, #2
 8005a86:	4621      	mov	r1, r4
 8005a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	008a      	lsls	r2, r1, #2
 8005a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a94:	f7fa ffc8 	bl	8000a28 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4b60      	ldr	r3, [pc, #384]	@ (8005c20 <UART_SetConfig+0x4e4>)
 8005a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	011c      	lsls	r4, r3, #4
 8005aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	1891      	adds	r1, r2, r2
 8005abe:	61b9      	str	r1, [r7, #24]
 8005ac0:	415b      	adcs	r3, r3
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac8:	4641      	mov	r1, r8
 8005aca:	1851      	adds	r1, r2, r1
 8005acc:	6139      	str	r1, [r7, #16]
 8005ace:	4649      	mov	r1, r9
 8005ad0:	414b      	adcs	r3, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	00cb      	lsls	r3, r1, #3
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aea:	4651      	mov	r1, sl
 8005aec:	00ca      	lsls	r2, r1, #3
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	4642      	mov	r2, r8
 8005af6:	189b      	adds	r3, r3, r2
 8005af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005afc:	464b      	mov	r3, r9
 8005afe:	460a      	mov	r2, r1
 8005b00:	eb42 0303 	adc.w	r3, r2, r3
 8005b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b20:	4649      	mov	r1, r9
 8005b22:	008b      	lsls	r3, r1, #2
 8005b24:	4641      	mov	r1, r8
 8005b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	008a      	lsls	r2, r1, #2
 8005b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b32:	f7fa ff79 	bl	8000a28 <__aeabi_uldivmod>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4b38      	ldr	r3, [pc, #224]	@ (8005c20 <UART_SetConfig+0x4e4>)
 8005b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	2264      	movs	r2, #100	@ 0x64
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	1acb      	subs	r3, r1, r3
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	3332      	adds	r3, #50	@ 0x32
 8005b50:	4a33      	ldr	r2, [pc, #204]	@ (8005c20 <UART_SetConfig+0x4e4>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b5c:	441c      	add	r4, r3
 8005b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b62:	2200      	movs	r2, #0
 8005b64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	464b      	mov	r3, r9
 8005b70:	1891      	adds	r1, r2, r2
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	415b      	adcs	r3, r3
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	1851      	adds	r1, r2, r1
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	4649      	mov	r1, r9
 8005b84:	414b      	adcs	r3, r1
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b94:	4659      	mov	r1, fp
 8005b96:	00cb      	lsls	r3, r1, #3
 8005b98:	4651      	mov	r1, sl
 8005b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b9e:	4651      	mov	r1, sl
 8005ba0:	00ca      	lsls	r2, r1, #3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4642      	mov	r2, r8
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bae:	464b      	mov	r3, r9
 8005bb0:	460a      	mov	r2, r1
 8005bb2:	eb42 0303 	adc.w	r3, r2, r3
 8005bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	008b      	lsls	r3, r1, #2
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bda:	4641      	mov	r1, r8
 8005bdc:	008a      	lsls	r2, r1, #2
 8005bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005be2:	f7fa ff21 	bl	8000a28 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <UART_SetConfig+0x4e4>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	@ 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3332      	adds	r3, #50	@ 0x32
 8005bfe:	4a08      	ldr	r2, [pc, #32]	@ (8005c20 <UART_SetConfig+0x4e4>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 020f 	and.w	r2, r3, #15
 8005c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4422      	add	r2, r4
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c20:	51eb851f 	.word	0x51eb851f

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <__libc_init_array>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4d0d      	ldr	r5, [pc, #52]	@ (8005c6c <__libc_init_array+0x38>)
 8005c38:	4c0d      	ldr	r4, [pc, #52]	@ (8005c70 <__libc_init_array+0x3c>)
 8005c3a:	1b64      	subs	r4, r4, r5
 8005c3c:	10a4      	asrs	r4, r4, #2
 8005c3e:	2600      	movs	r6, #0
 8005c40:	42a6      	cmp	r6, r4
 8005c42:	d109      	bne.n	8005c58 <__libc_init_array+0x24>
 8005c44:	4d0b      	ldr	r5, [pc, #44]	@ (8005c74 <__libc_init_array+0x40>)
 8005c46:	4c0c      	ldr	r4, [pc, #48]	@ (8005c78 <__libc_init_array+0x44>)
 8005c48:	f000 f818 	bl	8005c7c <_init>
 8005c4c:	1b64      	subs	r4, r4, r5
 8005c4e:	10a4      	asrs	r4, r4, #2
 8005c50:	2600      	movs	r6, #0
 8005c52:	42a6      	cmp	r6, r4
 8005c54:	d105      	bne.n	8005c62 <__libc_init_array+0x2e>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5c:	4798      	blx	r3
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7ee      	b.n	8005c40 <__libc_init_array+0xc>
 8005c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c66:	4798      	blx	r3
 8005c68:	3601      	adds	r6, #1
 8005c6a:	e7f2      	b.n	8005c52 <__libc_init_array+0x1e>
 8005c6c:	08005cbc 	.word	0x08005cbc
 8005c70:	08005cbc 	.word	0x08005cbc
 8005c74:	08005cbc 	.word	0x08005cbc
 8005c78:	08005cc0 	.word	0x08005cc0

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
